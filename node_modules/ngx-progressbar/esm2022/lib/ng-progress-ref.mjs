import { Directive, inject, signal, effect, output, computed, untracked, numberAttribute, input } from '@angular/core';
import { outputToObservable } from '@angular/core/rxjs-interop';
import { BehaviorSubject, of, tap, delay, timer, filter, finalize, switchMap, takeUntil, EMPTY } from 'rxjs';
import { NG_PROGRESS_OPTIONS } from './ng-progress.model';
import * as i0 from "@angular/core";
var TriggerType;
(function (TriggerType) {
    TriggerType["START"] = "START";
    TriggerType["COMPLETE"] = "COMPLETE";
})(TriggerType || (TriggerType = {}));
function minAttribute(value) {
    const min = numberAttribute(value) || 0;
    return (min < 100 && min >= 0) ? min : 0;
}
function maxAttribute(value) {
    const max = numberAttribute(value) || 100;
    return (max > 0 && max <= 100) ? max : 100;
}
export class NgProgressRef {
    constructor() {
        this.defaultOptions = inject(NG_PROGRESS_OPTIONS);
        this.min = input(this.defaultOptions.min, { transform: minAttribute });
        this.max = input(this.defaultOptions.max, { transform: maxAttribute });
        this.speed = input(this.defaultOptions.speed, { transform: numberAttribute });
        this.trickleSpeed = input(this.defaultOptions.trickleSpeed, { transform: numberAttribute });
        this.fadeOutSpeed = input(this.defaultOptions.fadeOutSpeed, { transform: numberAttribute });
        this.debounceTime = input(this.defaultOptions.debounceTime, { transform: numberAttribute });
        this.trickleFunc = input(this.defaultOptions.trickleFunc);
        this.config = computed(() => {
            return {
                max: this.max(),
                min: this.min(),
                speed: this.speed(),
                trickleSpeed: this.trickleSpeed(),
                fadeOutSpeed: this.fadeOutSpeed(),
                trickleFunc: this.trickleFunc(),
                debounceTime: this.debounceTime()
            };
        });
        this._progress = signal(0);
        this._active = signal(false);
        this.active = computed(() => this._active());
        this.progress = computed(() => this._progress());
        // Progress start source event (used to cancel onComplete delays)
        this.started = output();
        // Progress ended source event
        this.completed = output();
        this._trigger = new BehaviorSubject(null);
        let sub$;
        effect((onCleanup) => {
            const config = this.config();
            untracked(() => {
                sub$ = this._trigger.pipe(filter((trigger) => !!trigger), switchMap((trigger) => {
                    if (trigger === TriggerType.START) {
                        return timer(config.debounceTime).pipe(switchMap(() => this.onTrickling(config)));
                    }
                    return this.onComplete(config);
                })).subscribe();
                onCleanup(() => sub$?.unsubscribe());
            });
        });
    }
    /**
     * Start the progress
     */
    start() {
        this.started.emit();
        this._trigger.next(TriggerType.START);
        this._active.set(true);
    }
    /**
     * Complete the progress
     */
    complete() {
        this._trigger.next(TriggerType.COMPLETE);
    }
    /**
     * Increment the progress
     */
    inc(amount) {
        const n = this.progress();
        if (!this.active()) {
            this.start();
        }
        else {
            if (typeof amount !== 'number') {
                amount = this.config().trickleFunc(n);
            }
            this.set(n + amount);
        }
    }
    /**
     * Set the progress
     */
    set(n) {
        this._active.set(true);
        this._progress.set(this.clamp(n));
    }
    /**
     * Clamps a value to be between min and max
     */
    clamp(n) {
        return Math.max(this.config().min, Math.min(this.config().max, n));
    }
    /**
     * Keeps incrementing the progress
     */
    onTrickling(config) {
        if (!this.active()) {
            this.set(config.min);
        }
        return timer(0, config.trickleSpeed).pipe(tap(() => this.inc()));
    }
    /**
     * Completes then resets the progress
     */
    onComplete(config) {
        // If it's not active no need to complete
        if (!this.active()) {
            return EMPTY;
        }
        // Emit completed
        this.completed.emit();
        return of({}).pipe(
        // Complete the progress
        tap(() => this._progress.set(100)), 
        // Deactivate the progress after a tiny delay
        delay(config.speed + 140), tap(() => this._active.set(false)), 
        // Use a tiny delay before resetting
        delay(config.fadeOutSpeed), 
        // Force the progress to reset even it got cancelled
        finalize(() => this._progress.set(0)), 
        // Cancel any of the finalizing delays if the progress has started again
        takeUntil(outputToObservable(this.started)));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.12", ngImport: i0, type: NgProgressRef, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "17.1.0", version: "18.2.12", type: NgProgressRef, isStandalone: true, selector: "[ngProgressRef]", inputs: { min: { classPropertyName: "min", publicName: "min", isSignal: true, isRequired: false, transformFunction: null }, max: { classPropertyName: "max", publicName: "max", isSignal: true, isRequired: false, transformFunction: null }, speed: { classPropertyName: "speed", publicName: "speed", isSignal: true, isRequired: false, transformFunction: null }, trickleSpeed: { classPropertyName: "trickleSpeed", publicName: "trickleSpeed", isSignal: true, isRequired: false, transformFunction: null }, fadeOutSpeed: { classPropertyName: "fadeOutSpeed", publicName: "fadeOutSpeed", isSignal: true, isRequired: false, transformFunction: null }, debounceTime: { classPropertyName: "debounceTime", publicName: "debounceTime", isSignal: true, isRequired: false, transformFunction: null }, trickleFunc: { classPropertyName: "trickleFunc", publicName: "trickleFunc", isSignal: true, isRequired: false, transformFunction: null } }, outputs: { started: "started", completed: "completed" }, exportAs: ["ngProgressRef"], ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.12", ngImport: i0, type: NgProgressRef, decorators: [{
            type: Directive,
            args: [{
                    standalone: true,
                    selector: '[ngProgressRef]',
                    exportAs: 'ngProgressRef'
                }]
        }], ctorParameters: () => [] });
//# sourceMappingURL=data:application/json;base64,