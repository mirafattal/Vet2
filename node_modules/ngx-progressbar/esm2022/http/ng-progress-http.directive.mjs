import { Directive, effect, inject, untracked } from '@angular/core';
import { NgProgressRef } from 'ngx-progressbar';
import { NgProgressHttpManager } from './ng-progress-http-manager';
import * as i0 from "@angular/core";
import * as i1 from "ngx-progressbar";
class NgProgressHttpBase {
    constructor() {
        this.manager = inject(NgProgressHttpManager);
        this.progressRef = inject(NgProgressRef, { host: true, self: true });
        let initial = true;
        effect(() => {
            const requestLoading = this.manager.requestsLoading();
            // Ignore the initial execution if loading state is false
            if (initial) {
                initial = false;
                if (!requestLoading)
                    return;
            }
            untracked(() => {
                if (requestLoading) {
                    this.progressRef.start();
                }
                else if (this.progressRef.active()) {
                    this.progressRef.complete();
                }
            });
        });
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.12", ngImport: i0, type: NgProgressHttpBase, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "18.2.12", type: NgProgressHttpBase, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.12", ngImport: i0, type: NgProgressHttpBase, decorators: [{
            type: Directive
        }], ctorParameters: () => [] });
export class NgProgressHttp extends NgProgressHttpBase {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.12", ngImport: i0, type: NgProgressHttp, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "18.2.12", type: NgProgressHttp, isStandalone: true, selector: "ng-progress[ngProgressHttp]", usesInheritance: true, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.12", ngImport: i0, type: NgProgressHttp, decorators: [{
            type: Directive,
            args: [{
                    standalone: true,
                    selector: 'ng-progress[ngProgressHttp]'
                }]
        }] });
export class NgProgressHttpRef extends NgProgressHttpBase {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.12", ngImport: i0, type: NgProgressHttpRef, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "18.2.12", type: NgProgressHttpRef, isStandalone: true, selector: "[ngProgressHttp]:not(ng-progress)", usesInheritance: true, hostDirectives: [{ directive: i1.NgProgressRef }], ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.12", ngImport: i0, type: NgProgressHttpRef, decorators: [{
            type: Directive,
            args: [{
                    standalone: true,
                    selector: '[ngProgressHttp]:not(ng-progress)',
                    hostDirectives: [NgProgressRef]
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctcHJvZ3Jlc3MtaHR0cC5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wcm9qZWN0cy9uZ3gtcHJvZ3Jlc3NiYXIvaHR0cC9zcmMvbmctcHJvZ3Jlc3MtaHR0cC5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNyRSxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDaEQsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sNEJBQTRCLENBQUM7OztBQUVuRSxNQUNNLGtCQUFrQjtJQU10QjtRQUppQixZQUFPLEdBQTBCLE1BQU0sQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDO1FBRS9ELGdCQUFXLEdBQWtCLE1BQU0sQ0FBQyxhQUFhLEVBQUUsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO1FBRzlGLElBQUksT0FBTyxHQUFZLElBQUksQ0FBQztRQUM1QixNQUFNLENBQUMsR0FBRyxFQUFFO1lBQ1YsTUFBTSxjQUFjLEdBQVksSUFBSSxDQUFDLE9BQU8sQ0FBQyxlQUFlLEVBQUUsQ0FBQztZQUMvRCx5REFBeUQ7WUFDekQsSUFBSSxPQUFPLEVBQUUsQ0FBQztnQkFDWixPQUFPLEdBQUcsS0FBSyxDQUFDO2dCQUNoQixJQUFJLENBQUMsY0FBYztvQkFBRSxPQUFPO1lBQzlCLENBQUM7WUFFRCxTQUFTLENBQUMsR0FBRyxFQUFFO2dCQUNiLElBQUksY0FBYyxFQUFFLENBQUM7b0JBQ25CLElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxFQUFFLENBQUM7Z0JBQzNCLENBQUM7cUJBQU0sSUFBSSxJQUFJLENBQUMsV0FBVyxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUM7b0JBQ3JDLElBQUksQ0FBQyxXQUFXLENBQUMsUUFBUSxFQUFFLENBQUM7Z0JBQzlCLENBQUM7WUFDSCxDQUFDLENBQUMsQ0FBQztRQUNMLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQzsrR0F4Qkcsa0JBQWtCO21HQUFsQixrQkFBa0I7OzRGQUFsQixrQkFBa0I7a0JBRHZCLFNBQVM7O0FBaUNWLE1BQU0sT0FBTyxjQUFlLFNBQVEsa0JBQWtCOytHQUF6QyxjQUFjO21HQUFkLGNBQWM7OzRGQUFkLGNBQWM7a0JBSjFCLFNBQVM7bUJBQUM7b0JBQ1QsVUFBVSxFQUFFLElBQUk7b0JBQ2hCLFFBQVEsRUFBRSw2QkFBNkI7aUJBQ3hDOztBQVNELE1BQU0sT0FBTyxpQkFBa0IsU0FBUSxrQkFBa0I7K0dBQTVDLGlCQUFpQjttR0FBakIsaUJBQWlCOzs0RkFBakIsaUJBQWlCO2tCQUw3QixTQUFTO21CQUFDO29CQUNULFVBQVUsRUFBRSxJQUFJO29CQUNoQixRQUFRLEVBQUUsbUNBQW1DO29CQUM3QyxjQUFjLEVBQUUsQ0FBQyxhQUFhLENBQUM7aUJBQ2hDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBlZmZlY3QsIGluamVjdCwgdW50cmFja2VkIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IE5nUHJvZ3Jlc3NSZWYgfSBmcm9tICduZ3gtcHJvZ3Jlc3NiYXInO1xyXG5pbXBvcnQgeyBOZ1Byb2dyZXNzSHR0cE1hbmFnZXIgfSBmcm9tICcuL25nLXByb2dyZXNzLWh0dHAtbWFuYWdlcic7XHJcblxyXG5ARGlyZWN0aXZlKClcclxuY2xhc3MgTmdQcm9ncmVzc0h0dHBCYXNlIHtcclxuXHJcbiAgcHJpdmF0ZSByZWFkb25seSBtYW5hZ2VyOiBOZ1Byb2dyZXNzSHR0cE1hbmFnZXIgPSBpbmplY3QoTmdQcm9ncmVzc0h0dHBNYW5hZ2VyKTtcclxuXHJcbiAgcHJpdmF0ZSByZWFkb25seSBwcm9ncmVzc1JlZjogTmdQcm9ncmVzc1JlZiA9IGluamVjdChOZ1Byb2dyZXNzUmVmLCB7IGhvc3Q6IHRydWUsIHNlbGY6IHRydWUgfSk7XHJcblxyXG4gIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgbGV0IGluaXRpYWw6IGJvb2xlYW4gPSB0cnVlO1xyXG4gICAgZWZmZWN0KCgpID0+IHtcclxuICAgICAgY29uc3QgcmVxdWVzdExvYWRpbmc6IGJvb2xlYW4gPSB0aGlzLm1hbmFnZXIucmVxdWVzdHNMb2FkaW5nKCk7XHJcbiAgICAgIC8vIElnbm9yZSB0aGUgaW5pdGlhbCBleGVjdXRpb24gaWYgbG9hZGluZyBzdGF0ZSBpcyBmYWxzZVxyXG4gICAgICBpZiAoaW5pdGlhbCkge1xyXG4gICAgICAgIGluaXRpYWwgPSBmYWxzZTtcclxuICAgICAgICBpZiAoIXJlcXVlc3RMb2FkaW5nKSByZXR1cm47XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHVudHJhY2tlZCgoKSA9PiB7XHJcbiAgICAgICAgaWYgKHJlcXVlc3RMb2FkaW5nKSB7XHJcbiAgICAgICAgICB0aGlzLnByb2dyZXNzUmVmLnN0YXJ0KCk7XHJcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLnByb2dyZXNzUmVmLmFjdGl2ZSgpKSB7XHJcbiAgICAgICAgICB0aGlzLnByb2dyZXNzUmVmLmNvbXBsZXRlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG4gIH1cclxufVxyXG5cclxuXHJcbkBEaXJlY3RpdmUoe1xyXG4gIHN0YW5kYWxvbmU6IHRydWUsXHJcbiAgc2VsZWN0b3I6ICduZy1wcm9ncmVzc1tuZ1Byb2dyZXNzSHR0cF0nXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBOZ1Byb2dyZXNzSHR0cCBleHRlbmRzIE5nUHJvZ3Jlc3NIdHRwQmFzZSB7XHJcbn1cclxuXHJcbkBEaXJlY3RpdmUoe1xyXG4gIHN0YW5kYWxvbmU6IHRydWUsXHJcbiAgc2VsZWN0b3I6ICdbbmdQcm9ncmVzc0h0dHBdOm5vdChuZy1wcm9ncmVzcyknLFxyXG4gIGhvc3REaXJlY3RpdmVzOiBbTmdQcm9ncmVzc1JlZl1cclxufSlcclxuZXhwb3J0IGNsYXNzIE5nUHJvZ3Jlc3NIdHRwUmVmIGV4dGVuZHMgTmdQcm9ncmVzc0h0dHBCYXNlIHtcclxufVxyXG5cclxuIl19