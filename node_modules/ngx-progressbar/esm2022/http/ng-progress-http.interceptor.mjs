import { inject } from '@angular/core';
import { finalize } from 'rxjs';
import { NG_PROGRESS_HTTP_OPTIONS } from './ng-progress-http.model';
import { NgProgressHttpCounter } from './ng-progress-http-counter';
export function progressInterceptor(req, next) {
    const config = inject(NG_PROGRESS_HTTP_OPTIONS);
    const inProgressCount = inject(NgProgressHttpCounter);
    // Ignore by request headers
    if (req.headers.has('ignoreProgressBar')) {
        return next(req.clone({ headers: req.headers.delete('ignoreProgressBar') }));
    }
    // Ignore silent api requests
    if (config && checkUrl(req, config)) {
        return next(req);
    }
    inProgressCount.set(inProgressCount() + 1);
    return next(req).pipe(finalize(() => {
        inProgressCount.set(inProgressCount() - 1);
    }));
}
/**
 * Check if request is silent.
 */
function checkUrl(req, config) {
    const url = req.url.toLowerCase();
    if (config.matcher && config.silentApis?.length) {
        return checkForMatcher(url, config.matcher) && checkForSilentApis(url, config.silentApis);
    }
    if (config.silentApis?.length) {
        return checkForSilentApis(url, config.silentApis);
    }
    if (config.matcher) {
        return checkForMatcher(url, config.matcher);
    }
    return false;
}
function checkForSilentApis(url, silentApis) {
    return !!silentApis.find((u) => url.includes(u.toLowerCase()));
}
function checkForMatcher(url, matcher) {
    return !!url.match(matcher);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctcHJvZ3Jlc3MtaHR0cC5pbnRlcmNlcHRvci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Byb2plY3RzL25neC1wcm9ncmVzc2Jhci9odHRwL3NyYy9uZy1wcm9ncmVzcy1odHRwLmludGVyY2VwdG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxNQUFNLEVBQWtCLE1BQU0sZUFBZSxDQUFDO0FBRXZELE9BQU8sRUFBYyxRQUFRLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDNUMsT0FBTyxFQUFFLHdCQUF3QixFQUF5QixNQUFNLDBCQUEwQixDQUFDO0FBQzNGLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBRW5FLE1BQU0sVUFBVSxtQkFBbUIsQ0FBQyxHQUF5QixFQUFFLElBQW1CO0lBRWhGLE1BQU0sTUFBTSxHQUEwQixNQUFNLENBQUMsd0JBQXdCLENBQUMsQ0FBQztJQUV2RSxNQUFNLGVBQWUsR0FBMkIsTUFBTSxDQUFDLHFCQUFxQixDQUFDLENBQUM7SUFFOUUsNEJBQTRCO0lBQzVCLElBQUksR0FBRyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsbUJBQW1CLENBQUMsRUFBRSxDQUFDO1FBQ3pDLE9BQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsRUFBRSxPQUFPLEVBQUUsR0FBRyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsbUJBQW1CLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUMvRSxDQUFDO0lBRUQsNkJBQTZCO0lBQzdCLElBQUksTUFBTSxJQUFJLFFBQVEsQ0FBQyxHQUFHLEVBQUUsTUFBTSxDQUFDLEVBQUUsQ0FBQztRQUNwQyxPQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNuQixDQUFDO0lBRUQsZUFBZSxDQUFDLEdBQUcsQ0FBQyxlQUFlLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQztJQUUzQyxPQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQ25CLFFBQVEsQ0FBQyxHQUFHLEVBQUU7UUFDWixlQUFlLENBQUMsR0FBRyxDQUFDLGVBQWUsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBQzdDLENBQUMsQ0FBQyxDQUNILENBQUM7QUFDSixDQUFDO0FBR0Q7O0dBRUc7QUFDSCxTQUFTLFFBQVEsQ0FBQyxHQUFxQixFQUFFLE1BQTZCO0lBQ3BFLE1BQU0sR0FBRyxHQUFXLEdBQUcsQ0FBQyxHQUFHLENBQUMsV0FBVyxFQUFFLENBQUM7SUFFMUMsSUFBSSxNQUFNLENBQUMsT0FBTyxJQUFJLE1BQU0sQ0FBQyxVQUFVLEVBQUUsTUFBTSxFQUFFLENBQUM7UUFDaEQsT0FBTyxlQUFlLENBQUMsR0FBRyxFQUFFLE1BQU0sQ0FBQyxPQUFPLENBQUMsSUFBSSxrQkFBa0IsQ0FBQyxHQUFHLEVBQUUsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQzVGLENBQUM7SUFDRCxJQUFJLE1BQU0sQ0FBQyxVQUFVLEVBQUUsTUFBTSxFQUFFLENBQUM7UUFDOUIsT0FBTyxrQkFBa0IsQ0FBQyxHQUFHLEVBQUUsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQ3BELENBQUM7SUFDRCxJQUFJLE1BQU0sQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUNuQixPQUFPLGVBQWUsQ0FBQyxHQUFHLEVBQUUsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQzlDLENBQUM7SUFDRCxPQUFPLEtBQUssQ0FBQztBQUNmLENBQUM7QUFFRCxTQUFTLGtCQUFrQixDQUFDLEdBQVcsRUFBRSxVQUFvQjtJQUMzRCxPQUFPLENBQUMsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBUyxFQUFFLEVBQUUsQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFDekUsQ0FBQztBQUVELFNBQVMsZUFBZSxDQUFDLEdBQVcsRUFBRSxPQUFlO0lBQ25ELE9BQU8sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDOUIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGluamVjdCwgV3JpdGFibGVTaWduYWwgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgSHR0cEV2ZW50LCBIdHRwSGFuZGxlckZuLCBIdHRwUmVxdWVzdCB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcclxuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgZmluYWxpemUgfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgTkdfUFJPR1JFU1NfSFRUUF9PUFRJT05TLCBOZ1Byb2dyZXNzSHR0cE9wdGlvbnMgfSBmcm9tICcuL25nLXByb2dyZXNzLWh0dHAubW9kZWwnO1xyXG5pbXBvcnQgeyBOZ1Byb2dyZXNzSHR0cENvdW50ZXIgfSBmcm9tICcuL25nLXByb2dyZXNzLWh0dHAtY291bnRlcic7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gcHJvZ3Jlc3NJbnRlcmNlcHRvcihyZXE6IEh0dHBSZXF1ZXN0PHVua25vd24+LCBuZXh0OiBIdHRwSGFuZGxlckZuKTogT2JzZXJ2YWJsZTxIdHRwRXZlbnQ8dW5rbm93bj4+IHtcclxuXHJcbiAgY29uc3QgY29uZmlnOiBOZ1Byb2dyZXNzSHR0cE9wdGlvbnMgPSBpbmplY3QoTkdfUFJPR1JFU1NfSFRUUF9PUFRJT05TKTtcclxuXHJcbiAgY29uc3QgaW5Qcm9ncmVzc0NvdW50OiBXcml0YWJsZVNpZ25hbDxudW1iZXI+ID0gaW5qZWN0KE5nUHJvZ3Jlc3NIdHRwQ291bnRlcik7XHJcblxyXG4gIC8vIElnbm9yZSBieSByZXF1ZXN0IGhlYWRlcnNcclxuICBpZiAocmVxLmhlYWRlcnMuaGFzKCdpZ25vcmVQcm9ncmVzc0JhcicpKSB7XHJcbiAgICByZXR1cm4gbmV4dChyZXEuY2xvbmUoeyBoZWFkZXJzOiByZXEuaGVhZGVycy5kZWxldGUoJ2lnbm9yZVByb2dyZXNzQmFyJykgfSkpO1xyXG4gIH1cclxuXHJcbiAgLy8gSWdub3JlIHNpbGVudCBhcGkgcmVxdWVzdHNcclxuICBpZiAoY29uZmlnICYmIGNoZWNrVXJsKHJlcSwgY29uZmlnKSkge1xyXG4gICAgcmV0dXJuIG5leHQocmVxKTtcclxuICB9XHJcblxyXG4gIGluUHJvZ3Jlc3NDb3VudC5zZXQoaW5Qcm9ncmVzc0NvdW50KCkgKyAxKTtcclxuXHJcbiAgcmV0dXJuIG5leHQocmVxKS5waXBlKFxyXG4gICAgZmluYWxpemUoKCkgPT4ge1xyXG4gICAgICBpblByb2dyZXNzQ291bnQuc2V0KGluUHJvZ3Jlc3NDb3VudCgpIC0gMSk7XHJcbiAgICB9KVxyXG4gICk7XHJcbn1cclxuXHJcblxyXG4vKipcclxuICogQ2hlY2sgaWYgcmVxdWVzdCBpcyBzaWxlbnQuXHJcbiAqL1xyXG5mdW5jdGlvbiBjaGVja1VybChyZXE6IEh0dHBSZXF1ZXN0PGFueT4sIGNvbmZpZzogTmdQcm9ncmVzc0h0dHBPcHRpb25zKTogYm9vbGVhbiB7XHJcbiAgY29uc3QgdXJsOiBzdHJpbmcgPSByZXEudXJsLnRvTG93ZXJDYXNlKCk7XHJcblxyXG4gIGlmIChjb25maWcubWF0Y2hlciAmJiBjb25maWcuc2lsZW50QXBpcz8ubGVuZ3RoKSB7XHJcbiAgICByZXR1cm4gY2hlY2tGb3JNYXRjaGVyKHVybCwgY29uZmlnLm1hdGNoZXIpICYmIGNoZWNrRm9yU2lsZW50QXBpcyh1cmwsIGNvbmZpZy5zaWxlbnRBcGlzKTtcclxuICB9XHJcbiAgaWYgKGNvbmZpZy5zaWxlbnRBcGlzPy5sZW5ndGgpIHtcclxuICAgIHJldHVybiBjaGVja0ZvclNpbGVudEFwaXModXJsLCBjb25maWcuc2lsZW50QXBpcyk7XHJcbiAgfVxyXG4gIGlmIChjb25maWcubWF0Y2hlcikge1xyXG4gICAgcmV0dXJuIGNoZWNrRm9yTWF0Y2hlcih1cmwsIGNvbmZpZy5tYXRjaGVyKTtcclxuICB9XHJcbiAgcmV0dXJuIGZhbHNlO1xyXG59XHJcblxyXG5mdW5jdGlvbiBjaGVja0ZvclNpbGVudEFwaXModXJsOiBzdHJpbmcsIHNpbGVudEFwaXM6IHN0cmluZ1tdKTogYm9vbGVhbiB7XHJcbiAgcmV0dXJuICEhc2lsZW50QXBpcy5maW5kKCh1OiBzdHJpbmcpID0+IHVybC5pbmNsdWRlcyh1LnRvTG93ZXJDYXNlKCkpKTtcclxufVxyXG5cclxuZnVuY3Rpb24gY2hlY2tGb3JNYXRjaGVyKHVybDogc3RyaW5nLCBtYXRjaGVyOiBzdHJpbmcpOiBib29sZWFuIHtcclxuICByZXR1cm4gISF1cmwubWF0Y2gobWF0Y2hlcik7XHJcbn1cclxuIl19