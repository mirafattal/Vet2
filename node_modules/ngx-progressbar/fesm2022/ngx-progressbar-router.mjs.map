{"version":3,"file":"ngx-progressbar-router.mjs","sources":["../../../projects/ngx-progressbar/router/src/ng-progress-router-default.ts","../../../projects/ngx-progressbar/router/src/ng-progress-router.model.ts","../../../projects/ngx-progressbar/router/src/ng-progress-router.directive.ts","../../../projects/ngx-progressbar/router/src/ngx-progressbar-router.ts"],"sourcesContent":["import { NavigationCancel, NavigationEnd, NavigationError, NavigationStart } from '@angular/router';\r\nimport { NgProgressRouterOptions } from './ng-progress-router.model';\r\n\r\nexport const defaultRouterOptions: NgProgressRouterOptions = {\r\n  minDuration: 0,\r\n  startEvents: [NavigationStart],\r\n  completeEvents: [NavigationEnd, NavigationCancel, NavigationError]\r\n};\r\n","import { InjectionToken, Provider, Type } from '@angular/core';\r\nimport { Event } from '@angular/router';\r\nimport { defaultRouterOptions } from './ng-progress-router-default';\r\n\r\nexport interface NgProgressRouterOptions {\r\n  minDuration?: number;\r\n  startEvents?: Type<Event>[];\r\n  completeEvents?: Type<Event>[];\r\n}\r\n\r\nexport const NG_PROGRESS_ROUTER_OPTIONS: InjectionToken<NgProgressRouterOptions> = new InjectionToken<NgProgressRouterOptions>('NG_PROGRESS_ROUTER_OPTIONS', {\r\n  providedIn: 'root',\r\n  factory: () => defaultRouterOptions\r\n});\r\n\r\nexport function provideNgProgressRouter(options: NgProgressRouterOptions): Provider {\r\n  return {\r\n    provide: NG_PROGRESS_ROUTER_OPTIONS,\r\n    useValue: { ...defaultRouterOptions, ...options },\r\n  }\r\n}\r\n","import { Directive, inject, Type, effect, untracked, Signal, EffectCleanupRegisterFn } from '@angular/core';\r\nimport { Event, Router } from '@angular/router';\r\nimport { toSignal } from '@angular/core/rxjs-interop';\r\nimport { filter, map } from 'rxjs';\r\nimport { NgProgressRef } from 'ngx-progressbar';\r\nimport { NG_PROGRESS_ROUTER_OPTIONS, NgProgressRouterOptions } from './ng-progress-router.model';\r\n\r\n/**\r\n * Check if a router event type exists in an array of router event types\r\n */\r\nfunction eventExists(routerEvent: Event, events: Type<Event>[]): boolean {\r\n  return events.some((e: Type<Event>) => routerEvent instanceof e);\r\n}\r\n\r\n@Directive()\r\nclass NgProgressRouterBase {\r\n\r\n  private readonly router: Router = inject(Router);\r\n\r\n  private readonly config: NgProgressRouterOptions = inject(NG_PROGRESS_ROUTER_OPTIONS);\r\n\r\n  readonly progressRef: NgProgressRef = inject(NgProgressRef, { host: true, self: true });\r\n\r\n  private readonly routerToggleEvent: Signal<boolean> = toSignal<boolean>(\r\n    this.router.events.pipe(\r\n      filter((event: Event) => eventExists(event, [...this.config.startEvents, ...this.config.completeEvents])),\r\n      map((event: Event) => eventExists(event, this.config.startEvents))\r\n    )\r\n  );\r\n\r\n  constructor() {\r\n    effect((onCleanup: EffectCleanupRegisterFn) => {\r\n      const toggle: boolean = this.routerToggleEvent();\r\n      let completeTimeout: ReturnType<typeof setTimeout>;\r\n\r\n      untracked(() => {\r\n        if (toggle) {\r\n          this.progressRef.start();\r\n        } else {\r\n          completeTimeout = setTimeout(() => {\r\n            this.progressRef.complete();\r\n          }, this.config.minDuration);\r\n        }\r\n\r\n        onCleanup(() => clearTimeout(completeTimeout));\r\n      });\r\n    });\r\n  }\r\n}\r\n\r\n@Directive({\r\n  standalone: true,\r\n  selector: 'ng-progress[ngProgressRouter]'\r\n})\r\nexport class NgProgressRouter extends NgProgressRouterBase {\r\n}\r\n\r\n@Directive({\r\n  standalone: true,\r\n  selector: '[ngProgressRouter]:not(ng-progress)',\r\n  hostDirectives: [NgProgressRef]\r\n})\r\nexport class NgProgressRouterRef extends NgProgressRouterBase {\r\n}\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"],"names":[],"mappings":"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"}