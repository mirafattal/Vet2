import { Signal, InputSignal, OutputEmitterRef, InputSignalWithTransform } from '@angular/core';
import { NgProgressRefOptions } from './ng-progress.model';
import * as i0 from "@angular/core";
export declare class NgProgressRef {
    private readonly defaultOptions;
    min: InputSignalWithTransform<number, number | string>;
    max: InputSignalWithTransform<number, number | string>;
    speed: InputSignalWithTransform<number, number | string>;
    trickleSpeed: InputSignalWithTransform<number, number | string>;
    fadeOutSpeed: InputSignalWithTransform<number, number | string>;
    debounceTime: InputSignalWithTransform<number, number | string>;
    trickleFunc: InputSignal<(n: number) => number>;
    config: Signal<NgProgressRefOptions>;
    private _progress;
    private _active;
    active: Signal<boolean>;
    progress: Signal<number>;
    started: OutputEmitterRef<void>;
    completed: OutputEmitterRef<void>;
    private _trigger;
    constructor();
    /**
     * Start the progress
     */
    start(): void;
    /**
     * Complete the progress
     */
    complete(): void;
    /**
     * Increment the progress
     */
    inc(amount?: number): void;
    /**
     * Set the progress
     */
    set(n: number): void;
    /**
     * Clamps a value to be between min and max
     */
    private clamp;
    /**
     * Keeps incrementing the progress
     */
    private onTrickling;
    /**
     * Completes then resets the progress
     */
    private onComplete;
    static ɵfac: i0.ɵɵFactoryDeclaration<NgProgressRef, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<NgProgressRef, "[ngProgressRef]", ["ngProgressRef"], { "min": { "alias": "min"; "required": false; "isSignal": true; }; "max": { "alias": "max"; "required": false; "isSignal": true; }; "speed": { "alias": "speed"; "required": false; "isSignal": true; }; "trickleSpeed": { "alias": "trickleSpeed"; "required": false; "isSignal": true; }; "fadeOutSpeed": { "alias": "fadeOutSpeed"; "required": false; "isSignal": true; }; "debounceTime": { "alias": "debounceTime"; "required": false; "isSignal": true; }; "trickleFunc": { "alias": "trickleFunc"; "required": false; "isSignal": true; }; }, { "started": "started"; "completed": "completed"; }, never, never, true, never>;
}
