import { ComponentType } from '@angular/cdk/portal';
import { OnDestroy, TemplateRef } from '@angular/core';
import { Observable, Subject } from 'rxjs';
import { NgpDialogConfig } from '../config/dialog.config';
import { NgpDialogRef } from './dialog-ref';
import * as i0 from "@angular/core";
/**
 * This is based on the Angular CDK Dialog service.
 * https://github.com/angular/components/blob/main/src/cdk/dialog/dialog.ts
 */
export declare class NgpDialogManager implements OnDestroy {
    private readonly overlay;
    private readonly defaultOptions;
    private readonly parentDialogManager;
    private readonly overlayContainer;
    private readonly scrollStrategy;
    private openDialogsAtThisLevel;
    private readonly afterAllClosedAtThisLevel;
    private readonly afterOpenedAtThisLevel;
    private ariaHiddenElements;
    /** Keeps track of the currently-open dialogs. */
    get openDialogs(): readonly NgpDialogRef[];
    /** Stream that emits when a dialog has been opened. */
    get afterOpened(): Subject<NgpDialogRef>;
    /**
     * Stream that emits when all open dialog have finished closing.
     * Will emit on subscribe if there are no open dialogs to begin with.
     */
    readonly afterAllClosed: Observable<void>;
    /**
     * Opens a modal dialog containing the given template.
     */
    open(templateRefOrComponentType: TemplateRef<NgpDialogContext> | ComponentType<any>, config?: NgpDialogConfig): NgpDialogRef;
    /**
     * Closes all of the currently-open dialogs.
     */
    closeAll(): void;
    /**
     * Finds an open dialog by its id.
     * @param id ID to use when looking up the dialog.
     */
    getDialogById(id: string): NgpDialogRef | undefined;
    ngOnDestroy(): void;
    /**
     * Creates an overlay config from a dialog config.
     */
    private getOverlayConfig;
    /**
     * Creates a custom injector to be used inside the dialog. This allows a component loaded inside
     * of a dialog to close itself and, optionally, to return a value.
     */
    private createInjector;
    /**
     * Removes a dialog from the array of open dialogs.
     */
    private removeOpenDialog;
    /** Hides all of the content that isn't an overlay from assistive technology. */
    private hideNonDialogContentFromAssistiveTechnology;
    private getAfterAllClosed;
    static ɵfac: i0.ɵɵFactoryDeclaration<NgpDialogManager, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<NgpDialogManager>;
}
export interface NgpDialogContext {
    $implicit: NgpDialogRef;
    close: () => void;
}
export declare function injectDialogManager(): NgpDialogManager;
