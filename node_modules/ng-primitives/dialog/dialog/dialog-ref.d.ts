/**
 * Copyright Â© 2024 Angular Primitives.
 * https://github.com/ng-primitives/ng-primitives
 *
 * This source code is licensed under the Apache 2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */
import { FocusOrigin } from '@angular/cdk/a11y';
import { OverlayRef } from '@angular/cdk/overlay';
import { Observable, Subject } from 'rxjs';
import { NgpDialogConfig } from '../config/dialog.config';
/**
 * Reference to a dialog opened via the Dialog service.
 */
export declare class NgpDialogRef<T = unknown> {
    readonly overlayRef: OverlayRef;
    readonly config: NgpDialogConfig<T>;
    /** Whether the user is allowed to close the dialog. */
    disableClose: boolean | undefined;
    /** Emits when the dialog has been closed. */
    readonly closed: Subject<FocusOrigin>;
    /** Emits when on keyboard events within the dialog. */
    readonly keydownEvents: Observable<KeyboardEvent>;
    /** Emits on pointer events that happen outside of the dialog. */
    readonly outsidePointerEvents: Observable<MouseEvent>;
    /** Data passed from the dialog opener. */
    readonly data?: T;
    /** Unique ID for the dialog. */
    readonly id: string;
    /** Subscription to external detachments of the dialog. */
    private detachSubscription;
    constructor(overlayRef: OverlayRef, config: NgpDialogConfig<T>);
    /**
     * Close the dialog.
     * @param result Optional result to return to the dialog opener.
     * @param options Additional options to customize the closing behavior.
     */
    close(focusOrigin?: FocusOrigin): void;
    /** Updates the position of the dialog based on the current position strategy. */
    updatePosition(): this;
}
export declare function injectDialogRef<T = unknown>(): NgpDialogRef<T>;
