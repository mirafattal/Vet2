import { OnDestroy, OnInit } from '@angular/core';
import * as i0 from "@angular/core";
export declare class NgpFocusTrap implements OnInit, OnDestroy {
    /**
     * Create a new focus trap.
     */
    private readonly focusTrap;
    /**
     * Access the interactivity checker.
     */
    private readonly interactivityChecker;
    /**
     * Get the focus trap container element.
     */
    private readonly elementRef;
    /**
     * Access NgZone to run the focus trap events outside of Angular's zone.
     */
    private readonly ngZone;
    /**
     * Store the mutation observer.
     */
    private mutationObserver;
    /**
     * Store the last focused element.
     */
    private lastFocusedElement;
    /**
     * Whether the focus trap is disabled.
     */
    readonly disabled: import("@angular/core").InputSignalWithTransform<boolean, unknown>;
    ngOnInit(): void;
    ngOnDestroy(): void;
    private handleFocusIn;
    /**
     * Handles the `focusout` event.
     */
    private handleFocusOut;
    /**
     * If the focused element gets removed from the DOM, browsers move focus back to the document.body.
     * We move focus to the container to keep focus trapped correctly.
     */
    private handleMutations;
    /**
     * Handles the `keydown` event.
     */
    protected handleKeyDown(event: KeyboardEvent): void;
    /**
     * Returns the first and last tabbable elements inside a container.
     */
    private getTabbableEdges;
    /**
     * Returns a list of potential focusable elements inside a container.
     */
    private getTabbableCandidates;
    /**
     * Returns the first visible element in a list..
     */
    private findVisible;
    private focus;
    private focusFirst;
    static ɵfac: i0.ɵɵFactoryDeclaration<NgpFocusTrap, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<NgpFocusTrap, "[ngpFocusTrap]", ["ngpFocusTrap"], { "disabled": { "alias": "ngpFocusTrapDisabled"; "required": false; "isSignal": true; }; }, {}, never, never, true, never>;
}
