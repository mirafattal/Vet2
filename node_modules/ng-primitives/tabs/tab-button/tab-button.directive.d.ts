/**
 * Copyright © 2024 Angular Primitives.
 * https://github.com/ng-primitives/ng-primitives
 *
 * This source code is licensed under the Apache 2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */
import { BooleanInput } from '@angular/cdk/coercion';
import * as i0 from "@angular/core";
import * as i1 from "ng-primitives/roving-focus";
import * as i2 from "ng-primitives/interactions";
export declare class NgpTabButton {
    /**
     * Access the tabset
     */
    protected readonly tabset: import("ng-primitives/tabs").NgpTabset;
    /**
     * The value of the tab this trigger controls
     */
    readonly value: import("@angular/core").InputSignal<string>;
    /**
     * Whether the tab is disabled
     * @default false
     */
    readonly disabled: import("@angular/core").InputSignalWithTransform<boolean, BooleanInput>;
    /**
     * Determine the id of the tab button
     * @internal
     */
    readonly id: import("@angular/core").InputSignal<string | undefined>;
    /**
     * Determine a unique id for the tab button if not provided
     * @internal
     */
    readonly defaultId: import("@angular/core").Signal<string>;
    /**
     * Determine the aria-controls of the tab button
     * @internal
     */
    readonly ariaControls: import("@angular/core").Signal<string>;
    /**
     * Whether the tab is active
     */
    readonly active: import("@angular/core").Signal<boolean>;
    /**
     * Select the tab this trigger controls
     */
    select(): void;
    /**
     * On focus select the tab this trigger controls if activateOnFocus is true
     */
    protected activateOnFocus(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<NgpTabButton, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<NgpTabButton, "[ngpTabButton]", ["ngpTabButton"], { "value": { "alias": "ngpTabButtonValue"; "required": true; "isSignal": true; }; "disabled": { "alias": "ngpTabButtonDisabled"; "required": false; "isSignal": true; }; "id": { "alias": "id"; "required": false; "isSignal": true; }; }, {}, never, never, true, [{ directive: typeof i1.NgpRovingFocusItem; inputs: {}; outputs: {}; }, { directive: typeof i2.NgpHover; inputs: {}; outputs: {}; }, { directive: typeof i2.NgpFocusVisible; inputs: {}; outputs: {}; }, { directive: typeof i2.NgpPress; inputs: {}; outputs: {}; }]>;
}
