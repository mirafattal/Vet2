/**
 * Copyright © 2024 Angular Primitives.
 * https://github.com/ng-primitives/ng-primitives
 *
 * This source code is licensed under the Apache 2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */
import { BooleanInput } from '@angular/cdk/coercion';
import { NgpCanOrientate, NgpOrientation } from 'ng-primitives/internal';
import * as i0 from "@angular/core";
import * as i1 from "ng-primitives/roving-focus";
export declare class NgpTabset implements NgpCanOrientate {
    /**
     * Access the global tabset configuration
     */
    private readonly config;
    /**
     * Define the id for the tabset
     */
    readonly id: import("@angular/core").InputSignal<string>;
    /**
     * Define the active tab
     */
    readonly value: import("@angular/core").ModelSignal<string | null>;
    /**
     * The orientation of the tabset
     * @default 'horizontal'
     */
    readonly orientation: import("@angular/core").InputSignal<NgpOrientation>;
    /**
     * Whether tabs should activate on focus
     */
    readonly activateOnFocus: import("@angular/core").InputSignalWithTransform<boolean, BooleanInput>;
    /**
     * Access the tabs within the tabset
     */
    readonly panels: import("@angular/core").Signal<readonly import("ng-primitives/tabs").NgpTabPanel[]>;
    /**
     * Get the id of the selected tab
     */
    readonly selectedTab: import("@angular/core").Signal<string | null>;
    /**
     * Select a tab by its value
     * @param value The value of the tab to select
     */
    select(value: string): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<NgpTabset, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<NgpTabset, "[ngpTabset]", ["ngpTabset"], { "id": { "alias": "id"; "required": false; "isSignal": true; }; "value": { "alias": "ngpTabsetValue"; "required": false; "isSignal": true; }; "orientation": { "alias": "ngpTabsetOrientation"; "required": false; "isSignal": true; }; "activateOnFocus": { "alias": "ngpTabsetActivateOnFocus"; "required": false; "isSignal": true; }; }, { "value": "ngpTabsetValueChange"; }, ["panels"], never, true, [{ directive: typeof i1.NgpRovingFocusGroup; inputs: {}; outputs: {}; }]>;
}
