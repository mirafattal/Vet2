/**
 * Copyright © 2024 Angular Primitives.
 * https://github.com/ng-primitives/ng-primitives
 *
 * This source code is licensed under the Apache 2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */
import type { BooleanInput } from '@angular/cdk/coercion';
import * as i0 from "@angular/core";
/**
 * A directive for normalizing hover events across the different browsers and devices.
 *
 * This is an Angular port of the useHover hook from
 * react-aria: https://github.com/adobe/react-spectrum/blob/main/packages/%40react-aria/interactions/src/useHover.ts
 */
export declare class NgpHover {
    /**
     * Whether hoving should be disabled.
     */
    readonly disabled: import("@angular/core").InputSignalWithTransform<boolean, BooleanInput>;
    /**
     * Access the disabled state from any parent.
     */
    private readonly isDisabled;
    /**
     * Emit an event when hovering starts.
     */
    readonly hoverStart: import("@angular/core").OutputEmitterRef<void>;
    /**
     * Emit an event when hovering ends.
     */
    readonly hoverEnd: import("@angular/core").OutputEmitterRef<void>;
    /**
     * Emit an event when the hover state changes.
     */
    readonly hoverChange: import("@angular/core").OutputEmitterRef<boolean>;
    /**
     * Setup the hover state.
     */
    constructor();
    static ɵfac: i0.ɵɵFactoryDeclaration<NgpHover, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<NgpHover, "[ngpHover]", ["ngpHover"], { "disabled": { "alias": "ngpHoverDisabled"; "required": false; "isSignal": true; }; }, { "hoverStart": "ngpHoverStart"; "hoverEnd": "ngpHoverEnd"; "hoverChange": "ngpHover"; }, never, never, true, never>;
}
