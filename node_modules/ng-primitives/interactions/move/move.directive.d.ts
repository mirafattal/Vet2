/**
 * Copyright © 2024 Angular Primitives.
 * https://github.com/ng-primitives/ng-primitives
 *
 * This source code is licensed under the Apache 2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */
import { BooleanInput } from '@angular/cdk/coercion';
import * as i0 from "@angular/core";
/**
 * Inspired by react-aria useMove hook:
 * https://github.com/adobe/react-spectrum/blob/main/packages/%40react-aria/interactions/src/useMove.ts
 */
export declare class NgpMove {
    /**
     * Access the disposable helper.
     */
    private readonly disposables;
    /**
     * Whether movement is disabled.
     */
    readonly disabled: import("@angular/core").InputSignalWithTransform<boolean, BooleanInput>;
    /**
     * Access the disabled state from any parent.
     */
    private readonly isDisabled;
    /**
     * Emit when the move event begins.
     */
    readonly start: import("@angular/core").OutputEmitterRef<NgpMoveBaseEvent>;
    /**
     * Emit when the element is moved.
     */
    readonly move: import("@angular/core").OutputEmitterRef<NgpMoveEvent>;
    /**
     * Emit when the move event ends.
     */
    readonly end: import("@angular/core").OutputEmitterRef<NgpMoveBaseEvent>;
    /**
     * Whether the element is currently being moved.
     */
    private isMoving;
    /**
     * Store the last x position of the element.
     */
    private x;
    /**
     * Store the last y position of the element.
     */
    private y;
    /**
     * Store the id of the last pointer.
     */
    private pointerId;
    /**
     * Store the disposable event listeners.
     */
    private disposableListeners;
    /**
     * Handle a move start.
     */
    private onMoveStart;
    /**
     * Handle a move event.
     */
    private onMove;
    /**
     * Handle a move end.
     */
    private onMoveEnd;
    /**
     * Handle the pointer down event.
     */
    protected onPointerDown(event: PointerEvent): void;
    /**
     * Handle the pointer up event.
     */
    protected onPointerUp(event: PointerEvent): void;
    /**
     * Handle the pointer move event.
     */
    protected onPointerMove(event: PointerEvent): void;
    private triggerKeyboardMove;
    protected onArrowUp(event: KeyboardEvent): void;
    protected onArrowDown(event: KeyboardEvent): void;
    protected onArrowLeft(event: KeyboardEvent): void;
    protected onArrowRight(event: KeyboardEvent): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<NgpMove, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<NgpMove, "[ngpMove]", ["ngpMove"], { "disabled": { "alias": "ngpMoveDisabled"; "required": false; "isSignal": true; }; }, { "start": "ngpMoveStart"; "move": "ngpMove"; "end": "ngpMoveEnd"; }, never, never, true, never>;
}
interface NgpMoveBaseEvent {
    /**
     * Whether the event was triggered by a mouse or keyboard event.
     */
    pointerType: PointerType;
    /**
     * Whether the shift key was pressed during the event.
     */
    shiftKey: boolean;
    /**
     * Whether the control key was pressed during the event.
     */
    ctrlKey: boolean;
    /**
     * Whether the meta key was pressed during the event.
     */
    metaKey: boolean;
    /**
     * Whether the alt key was pressed during the event.
     */
    altKey: boolean;
}
export type NgpMoveStartEvent = NgpMoveBaseEvent;
export type NgpMoveEndEvent = NgpMoveBaseEvent;
export interface NgpMoveEvent extends NgpMoveBaseEvent {
    /**
     * The amount of pixels moved in the x-axis.
     */
    deltaX: number;
    /**
     * The amount of pixels moved in the y-axis.
     */
    deltaY: number;
}
export type PointerType = 'mouse' | 'pen' | 'touch' | 'keyboard' | 'virtual';
export {};
