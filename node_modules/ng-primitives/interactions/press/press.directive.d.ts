/**
 * Copyright © 2024 Angular Primitives.
 * https://github.com/ng-primitives/ng-primitives
 *
 * This source code is licensed under the Apache 2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */
import { BooleanInput } from '@angular/cdk/coercion';
import * as i0 from "@angular/core";
/**
 * This was inpsired by Headless UI's active-press hook:
 * https://github.com/tailwindlabs/headlessui/blob/main/packages/%40headlessui-react/src/hooks/use-active-press.tsx
 */
export declare class NgpPress {
    /**
     * Whether listening for press events is disabled.
     */
    readonly disabled: import("@angular/core").InputSignalWithTransform<boolean, BooleanInput>;
    /**
     * Access the disabled state from any parent.
     */
    private readonly isDisabled;
    /**
     * Emit when the press begins.
     */
    readonly pressStart: import("@angular/core").OutputEmitterRef<void>;
    /**
     * Emit when the press ends.
     */
    readonly pressEnd: import("@angular/core").OutputEmitterRef<void>;
    /**
     * Emit when the press changes.
     */
    readonly pressChange: import("@angular/core").OutputEmitterRef<boolean>;
    constructor();
    static ɵfac: i0.ɵɵFactoryDeclaration<NgpPress, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<NgpPress, "[ngpPress]", ["ngpPress"], { "disabled": { "alias": "ngpPressDisabled"; "required": false; "isSignal": true; }; }, { "pressStart": "ngpPressStart"; "pressEnd": "ngpPressEnd"; "pressChange": "ngpPress"; }, never, never, true, never>;
}
