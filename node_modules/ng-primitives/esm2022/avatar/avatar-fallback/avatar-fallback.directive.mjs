import { Directive, computed, input, numberAttribute, signal } from '@angular/core';
import { injectDisposables } from 'ng-primitives/utils';
import { NgpAvatarState } from '../avatar/avatar.directive';
import { injectAvatar } from '../avatar/avatar.token';
import { injectAvatarConfig } from '../config/avatar.config';
import * as i0 from "@angular/core";
export class NgpAvatarFallback {
    constructor() {
        /**
         * Access the avatar
         */
        this.avatar = injectAvatar();
        /**
         * Access the global configuration.
         */
        this.config = injectAvatarConfig();
        /**
         * Access the disposable utilities.
         */
        this.disposables = injectDisposables();
        /**
         * Define a delay before the fallback is shown. This is useful to only show the fallback for those with slower connections.
         * @default 0
         */
        this.delay = input(this.config.delay, {
            alias: 'ngpAvatarFallbackDelay',
            transform: numberAttribute,
        });
        /**
         * Determine if this element should be hidden.
         * @returns True if the element should be visible
         */
        this.visible = computed(() => 
        // we need to check if the element can render and if the avatar is not in a loaded state
        this.delayElapsed() && this.avatar.state() !== NgpAvatarState.Loaded);
        /**
         * Determine the delay has elapsed, and we can show the fallback.
         */
        this.delayElapsed = signal(false);
    }
    ngOnInit() {
        this.disposables.setTimeout(() => this.delayElapsed.set(true), this.delay());
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: NgpAvatarFallback, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "17.1.0", version: "18.2.13", type: NgpAvatarFallback, isStandalone: true, selector: "[ngpAvatarFallback]", inputs: { delay: { classPropertyName: "delay", publicName: "ngpAvatarFallbackDelay", isSignal: true, isRequired: false, transformFunction: null } }, host: { properties: { "style.display": "visible() ? null : \"none\"" } }, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: NgpAvatarFallback, decorators: [{
            type: Directive,
            args: [{
                    selector: '[ngpAvatarFallback]',
                    standalone: true,
                    host: {
                        '[style.display]': 'visible() ? null : "none"',
                    },
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXZhdGFyLWZhbGxiYWNrLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL25nLXByaW1pdGl2ZXMvYXZhdGFyL3NyYy9hdmF0YXItZmFsbGJhY2svYXZhdGFyLWZhbGxiYWNrLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFRQSxPQUFPLEVBQUUsU0FBUyxFQUFVLFFBQVEsRUFBRSxLQUFLLEVBQUUsZUFBZSxFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM1RixPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUN4RCxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFDNUQsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQ3RELE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLHlCQUF5QixDQUFDOztBQVM3RCxNQUFNLE9BQU8saUJBQWlCO0lBUDlCO1FBUUU7O1dBRUc7UUFDYyxXQUFNLEdBQUcsWUFBWSxFQUFFLENBQUM7UUFFekM7O1dBRUc7UUFDYyxXQUFNLEdBQUcsa0JBQWtCLEVBQUUsQ0FBQztRQUUvQzs7V0FFRztRQUNjLGdCQUFXLEdBQUcsaUJBQWlCLEVBQUUsQ0FBQztRQUVuRDs7O1dBR0c7UUFDTSxVQUFLLEdBQUcsS0FBSyxDQUFzQixJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRTtZQUM3RCxLQUFLLEVBQUUsd0JBQXdCO1lBQy9CLFNBQVMsRUFBRSxlQUFlO1NBQzNCLENBQUMsQ0FBQztRQUVIOzs7V0FHRztRQUNnQixZQUFPLEdBQUcsUUFBUSxDQUNuQyxHQUFHLEVBQUU7UUFDSCx3RkFBd0Y7UUFDeEYsSUFBSSxDQUFDLFlBQVksRUFBRSxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLEtBQUssY0FBYyxDQUFDLE1BQU0sQ0FDdkUsQ0FBQztRQUVGOztXQUVHO1FBQ0ssaUJBQVksR0FBRyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7S0FLdEM7SUFIQyxRQUFRO1FBQ04sSUFBSSxDQUFDLFdBQVcsQ0FBQyxVQUFVLENBQUMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUM7SUFDL0UsQ0FBQzsrR0ExQ1UsaUJBQWlCO21HQUFqQixpQkFBaUI7OzRGQUFqQixpQkFBaUI7a0JBUDdCLFNBQVM7bUJBQUM7b0JBQ1QsUUFBUSxFQUFFLHFCQUFxQjtvQkFDL0IsVUFBVSxFQUFFLElBQUk7b0JBQ2hCLElBQUksRUFBRTt3QkFDSixpQkFBaUIsRUFBRSwyQkFBMkI7cUJBQy9DO2lCQUNGIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgwqkgMjAyNCBBbmd1bGFyIFByaW1pdGl2ZXMuXG4gKiBodHRwczovL2dpdGh1Yi5jb20vbmctcHJpbWl0aXZlcy9uZy1wcmltaXRpdmVzXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIDIuMCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5pbXBvcnQgeyBOdW1iZXJJbnB1dCB9IGZyb20gJ0Bhbmd1bGFyL2Nkay9jb2VyY2lvbic7XG5pbXBvcnQgeyBEaXJlY3RpdmUsIE9uSW5pdCwgY29tcHV0ZWQsIGlucHV0LCBudW1iZXJBdHRyaWJ1dGUsIHNpZ25hbCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgaW5qZWN0RGlzcG9zYWJsZXMgfSBmcm9tICduZy1wcmltaXRpdmVzL3V0aWxzJztcbmltcG9ydCB7IE5ncEF2YXRhclN0YXRlIH0gZnJvbSAnLi4vYXZhdGFyL2F2YXRhci5kaXJlY3RpdmUnO1xuaW1wb3J0IHsgaW5qZWN0QXZhdGFyIH0gZnJvbSAnLi4vYXZhdGFyL2F2YXRhci50b2tlbic7XG5pbXBvcnQgeyBpbmplY3RBdmF0YXJDb25maWcgfSBmcm9tICcuLi9jb25maWcvYXZhdGFyLmNvbmZpZyc7XG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ1tuZ3BBdmF0YXJGYWxsYmFja10nLFxuICBzdGFuZGFsb25lOiB0cnVlLFxuICBob3N0OiB7XG4gICAgJ1tzdHlsZS5kaXNwbGF5XSc6ICd2aXNpYmxlKCkgPyBudWxsIDogXCJub25lXCInLFxuICB9LFxufSlcbmV4cG9ydCBjbGFzcyBOZ3BBdmF0YXJGYWxsYmFjayBpbXBsZW1lbnRzIE9uSW5pdCB7XG4gIC8qKlxuICAgKiBBY2Nlc3MgdGhlIGF2YXRhclxuICAgKi9cbiAgcHJpdmF0ZSByZWFkb25seSBhdmF0YXIgPSBpbmplY3RBdmF0YXIoKTtcblxuICAvKipcbiAgICogQWNjZXNzIHRoZSBnbG9iYWwgY29uZmlndXJhdGlvbi5cbiAgICovXG4gIHByaXZhdGUgcmVhZG9ubHkgY29uZmlnID0gaW5qZWN0QXZhdGFyQ29uZmlnKCk7XG5cbiAgLyoqXG4gICAqIEFjY2VzcyB0aGUgZGlzcG9zYWJsZSB1dGlsaXRpZXMuXG4gICAqL1xuICBwcml2YXRlIHJlYWRvbmx5IGRpc3Bvc2FibGVzID0gaW5qZWN0RGlzcG9zYWJsZXMoKTtcblxuICAvKipcbiAgICogRGVmaW5lIGEgZGVsYXkgYmVmb3JlIHRoZSBmYWxsYmFjayBpcyBzaG93bi4gVGhpcyBpcyB1c2VmdWwgdG8gb25seSBzaG93IHRoZSBmYWxsYmFjayBmb3IgdGhvc2Ugd2l0aCBzbG93ZXIgY29ubmVjdGlvbnMuXG4gICAqIEBkZWZhdWx0IDBcbiAgICovXG4gIHJlYWRvbmx5IGRlbGF5ID0gaW5wdXQ8bnVtYmVyLCBOdW1iZXJJbnB1dD4odGhpcy5jb25maWcuZGVsYXksIHtcbiAgICBhbGlhczogJ25ncEF2YXRhckZhbGxiYWNrRGVsYXknLFxuICAgIHRyYW5zZm9ybTogbnVtYmVyQXR0cmlidXRlLFxuICB9KTtcblxuICAvKipcbiAgICogRGV0ZXJtaW5lIGlmIHRoaXMgZWxlbWVudCBzaG91bGQgYmUgaGlkZGVuLlxuICAgKiBAcmV0dXJucyBUcnVlIGlmIHRoZSBlbGVtZW50IHNob3VsZCBiZSB2aXNpYmxlXG4gICAqL1xuICBwcm90ZWN0ZWQgcmVhZG9ubHkgdmlzaWJsZSA9IGNvbXB1dGVkKFxuICAgICgpID0+XG4gICAgICAvLyB3ZSBuZWVkIHRvIGNoZWNrIGlmIHRoZSBlbGVtZW50IGNhbiByZW5kZXIgYW5kIGlmIHRoZSBhdmF0YXIgaXMgbm90IGluIGEgbG9hZGVkIHN0YXRlXG4gICAgICB0aGlzLmRlbGF5RWxhcHNlZCgpICYmIHRoaXMuYXZhdGFyLnN0YXRlKCkgIT09IE5ncEF2YXRhclN0YXRlLkxvYWRlZCxcbiAgKTtcblxuICAvKipcbiAgICogRGV0ZXJtaW5lIHRoZSBkZWxheSBoYXMgZWxhcHNlZCwgYW5kIHdlIGNhbiBzaG93IHRoZSBmYWxsYmFjay5cbiAgICovXG4gIHByaXZhdGUgZGVsYXlFbGFwc2VkID0gc2lnbmFsKGZhbHNlKTtcblxuICBuZ09uSW5pdCgpOiB2b2lkIHtcbiAgICB0aGlzLmRpc3Bvc2FibGVzLnNldFRpbWVvdXQoKCkgPT4gdGhpcy5kZWxheUVsYXBzZWQuc2V0KHRydWUpLCB0aGlzLmRlbGF5KCkpO1xuICB9XG59XG4iXX0=