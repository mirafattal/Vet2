/**
 * Copyright © 2024 Angular Primitives.
 * https://github.com/ng-primitives/ng-primitives
 *
 * This source code is licensed under the Apache 2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */
import { Directive, signal } from '@angular/core';
import { NgpFocusVisible, NgpHover, NgpPress } from 'ng-primitives/interactions';
import { NgpAvatarToken } from './avatar.token';
import * as i0 from "@angular/core";
import * as i1 from "ng-primitives/interactions";
export class NgpAvatar {
    constructor() {
        /**
         * Store the current state of the avatar.
         * @internal
         */
        this.state = signal(NgpAvatarState.Idle);
    }
    /**
     * Set the avatar state.
     * @param state The state to set.
     * @internal
     */
    setState(state) {
        this.state.set(state);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: NgpAvatar, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "18.2.13", type: NgpAvatar, isStandalone: true, selector: "[ngpAvatar]", host: { properties: { "attr.data-state": "state()" } }, providers: [{ provide: NgpAvatarToken, useExisting: NgpAvatar }], hostDirectives: [{ directive: i1.NgpHover }, { directive: i1.NgpFocusVisible }, { directive: i1.NgpPress }], ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: NgpAvatar, decorators: [{
            type: Directive,
            args: [{
                    selector: '[ngpAvatar]',
                    standalone: true,
                    providers: [{ provide: NgpAvatarToken, useExisting: NgpAvatar }],
                    host: {
                        '[attr.data-state]': 'state()',
                    },
                    hostDirectives: [NgpHover, NgpFocusVisible, NgpPress],
                }]
        }] });
export var NgpAvatarState;
(function (NgpAvatarState) {
    NgpAvatarState["Idle"] = "idle";
    NgpAvatarState["Loading"] = "loading";
    NgpAvatarState["Loaded"] = "loaded";
    NgpAvatarState["Error"] = "error";
})(NgpAvatarState || (NgpAvatarState = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXZhdGFyLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL25nLXByaW1pdGl2ZXMvYXZhdGFyL3NyYy9hdmF0YXIvYXZhdGFyLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7O0dBTUc7QUFDSCxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNsRCxPQUFPLEVBQUUsZUFBZSxFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUNqRixPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7OztBQVdoRCxNQUFNLE9BQU8sU0FBUztJQVR0QjtRQVVFOzs7V0FHRztRQUNNLFVBQUssR0FBRyxNQUFNLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxDQUFDO0tBVTlDO0lBUkM7Ozs7T0FJRztJQUNILFFBQVEsQ0FBQyxLQUFxQjtRQUM1QixJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUN4QixDQUFDOytHQWRVLFNBQVM7bUdBQVQsU0FBUyxrSEFOVCxDQUFDLEVBQUUsT0FBTyxFQUFFLGNBQWMsRUFBRSxXQUFXLEVBQUUsU0FBUyxFQUFFLENBQUM7OzRGQU1yRCxTQUFTO2tCQVRyQixTQUFTO21CQUFDO29CQUNULFFBQVEsRUFBRSxhQUFhO29CQUN2QixVQUFVLEVBQUUsSUFBSTtvQkFDaEIsU0FBUyxFQUFFLENBQUMsRUFBRSxPQUFPLEVBQUUsY0FBYyxFQUFFLFdBQVcsV0FBVyxFQUFFLENBQUM7b0JBQ2hFLElBQUksRUFBRTt3QkFDSixtQkFBbUIsRUFBRSxTQUFTO3FCQUMvQjtvQkFDRCxjQUFjLEVBQUUsQ0FBQyxRQUFRLEVBQUUsZUFBZSxFQUFFLFFBQVEsQ0FBQztpQkFDdEQ7O0FBa0JELE1BQU0sQ0FBTixJQUFZLGNBS1g7QUFMRCxXQUFZLGNBQWM7SUFDeEIsK0JBQWEsQ0FBQTtJQUNiLHFDQUFtQixDQUFBO0lBQ25CLG1DQUFpQixDQUFBO0lBQ2pCLGlDQUFlLENBQUE7QUFDakIsQ0FBQyxFQUxXLGNBQWMsS0FBZCxjQUFjLFFBS3pCIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgwqkgMjAyNCBBbmd1bGFyIFByaW1pdGl2ZXMuXG4gKiBodHRwczovL2dpdGh1Yi5jb20vbmctcHJpbWl0aXZlcy9uZy1wcmltaXRpdmVzXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIDIuMCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5pbXBvcnQgeyBEaXJlY3RpdmUsIHNpZ25hbCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTmdwRm9jdXNWaXNpYmxlLCBOZ3BIb3ZlciwgTmdwUHJlc3MgfSBmcm9tICduZy1wcmltaXRpdmVzL2ludGVyYWN0aW9ucyc7XG5pbXBvcnQgeyBOZ3BBdmF0YXJUb2tlbiB9IGZyb20gJy4vYXZhdGFyLnRva2VuJztcblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW25ncEF2YXRhcl0nLFxuICBzdGFuZGFsb25lOiB0cnVlLFxuICBwcm92aWRlcnM6IFt7IHByb3ZpZGU6IE5ncEF2YXRhclRva2VuLCB1c2VFeGlzdGluZzogTmdwQXZhdGFyIH1dLFxuICBob3N0OiB7XG4gICAgJ1thdHRyLmRhdGEtc3RhdGVdJzogJ3N0YXRlKCknLFxuICB9LFxuICBob3N0RGlyZWN0aXZlczogW05ncEhvdmVyLCBOZ3BGb2N1c1Zpc2libGUsIE5ncFByZXNzXSxcbn0pXG5leHBvcnQgY2xhc3MgTmdwQXZhdGFyIHtcbiAgLyoqXG4gICAqIFN0b3JlIHRoZSBjdXJyZW50IHN0YXRlIG9mIHRoZSBhdmF0YXIuXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgcmVhZG9ubHkgc3RhdGUgPSBzaWduYWwoTmdwQXZhdGFyU3RhdGUuSWRsZSk7XG5cbiAgLyoqXG4gICAqIFNldCB0aGUgYXZhdGFyIHN0YXRlLlxuICAgKiBAcGFyYW0gc3RhdGUgVGhlIHN0YXRlIHRvIHNldC5cbiAgICogQGludGVybmFsXG4gICAqL1xuICBzZXRTdGF0ZShzdGF0ZTogTmdwQXZhdGFyU3RhdGUpOiB2b2lkIHtcbiAgICB0aGlzLnN0YXRlLnNldChzdGF0ZSk7XG4gIH1cbn1cblxuZXhwb3J0IGVudW0gTmdwQXZhdGFyU3RhdGUge1xuICBJZGxlID0gJ2lkbGUnLFxuICBMb2FkaW5nID0gJ2xvYWRpbmcnLFxuICBMb2FkZWQgPSAnbG9hZGVkJyxcbiAgRXJyb3IgPSAnZXJyb3InLFxufVxuIl19