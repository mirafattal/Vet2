/**
 * Copyright © 2024 Angular Primitives.
 * https://github.com/ng-primitives/ng-primitives
 *
 * This source code is licensed under the Apache 2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */
import { Directive, ElementRef, HostListener, inject } from '@angular/core';
import { NgpVisuallyHidden, injectVisuallyHidden } from 'ng-primitives/a11y';
import { NgpAvatarState } from '../avatar/avatar.directive';
import { injectAvatar } from '../avatar/avatar.token';
import * as i0 from "@angular/core";
import * as i1 from "ng-primitives/a11y";
export class NgpAvatarImage {
    constructor() {
        /**
         * Control the visibility of the image.
         */
        this.visuallyHidden = injectVisuallyHidden();
        /**
         * Access the avatar
         */
        this.avatar = injectAvatar();
        /**
         * Access the image element ref.
         */
        this.elementRef = inject(ElementRef);
    }
    ngOnInit() {
        // mark the avatar as loading
        this.setState(NgpAvatarState.Loading);
        // if there is no src, we can report this as an error
        if (!this.elementRef.nativeElement.src) {
            this.setState(NgpAvatarState.Error);
        }
        // if the image has already loaded, we can report this to the avatar
        if (this.elementRef.nativeElement.complete) {
            this.setState(NgpAvatarState.Loaded);
        }
    }
    onLoad() {
        this.setState(NgpAvatarState.Loaded);
    }
    onError() {
        this.setState(NgpAvatarState.Error);
    }
    setState(state) {
        this.avatar.setState(state);
        // if the state is loaded then we should make the image visible
        this.visuallyHidden.setVisibility(state === NgpAvatarState.Loaded);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: NgpAvatarImage, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "18.2.13", type: NgpAvatarImage, isStandalone: true, selector: "img[ngpAvatarImage]", host: { listeners: { "load": "onLoad()", "error": "onError()" } }, hostDirectives: [{ directive: i1.NgpVisuallyHidden }], ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: NgpAvatarImage, decorators: [{
            type: Directive,
            args: [{
                    selector: 'img[ngpAvatarImage]',
                    standalone: true,
                    hostDirectives: [NgpVisuallyHidden],
                }]
        }], propDecorators: { onLoad: [{
                type: HostListener,
                args: ['load']
            }], onError: [{
                type: HostListener,
                args: ['error']
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXZhdGFyLWltYWdlLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL25nLXByaW1pdGl2ZXMvYXZhdGFyL3NyYy9hdmF0YXItaW1hZ2UvYXZhdGFyLWltYWdlLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7O0dBTUc7QUFDSCxPQUFPLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxZQUFZLEVBQVUsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3BGLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxvQkFBb0IsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQzdFLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUM1RCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sd0JBQXdCLENBQUM7OztBQU90RCxNQUFNLE9BQU8sY0FBYztJQUwzQjtRQU1FOztXQUVHO1FBQ2dCLG1CQUFjLEdBQUcsb0JBQW9CLEVBQUUsQ0FBQztRQUUzRDs7V0FFRztRQUNjLFdBQU0sR0FBRyxZQUFZLEVBQUUsQ0FBQztRQUV6Qzs7V0FFRztRQUNjLGVBQVUsR0FBRyxNQUFNLENBQStCLFVBQVUsQ0FBQyxDQUFDO0tBaUNoRjtJQS9CQyxRQUFRO1FBQ04sNkJBQTZCO1FBQzdCLElBQUksQ0FBQyxRQUFRLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBRXRDLHFEQUFxRDtRQUNyRCxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUMsR0FBRyxFQUFFLENBQUM7WUFDdkMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxjQUFjLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDdEMsQ0FBQztRQUVELG9FQUFvRTtRQUNwRSxJQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsYUFBYSxDQUFDLFFBQVEsRUFBRSxDQUFDO1lBQzNDLElBQUksQ0FBQyxRQUFRLENBQUMsY0FBYyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3ZDLENBQUM7SUFDSCxDQUFDO0lBR1MsTUFBTTtRQUNkLElBQUksQ0FBQyxRQUFRLENBQUMsY0FBYyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ3ZDLENBQUM7SUFHUyxPQUFPO1FBQ2YsSUFBSSxDQUFDLFFBQVEsQ0FBQyxjQUFjLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDdEMsQ0FBQztJQUVPLFFBQVEsQ0FBQyxLQUFxQjtRQUNwQyxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUU1QiwrREFBK0Q7UUFDL0QsSUFBSSxDQUFDLGNBQWMsQ0FBQyxhQUFhLENBQUMsS0FBSyxLQUFLLGNBQWMsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUNyRSxDQUFDOytHQTlDVSxjQUFjO21HQUFkLGNBQWM7OzRGQUFkLGNBQWM7a0JBTDFCLFNBQVM7bUJBQUM7b0JBQ1QsUUFBUSxFQUFFLHFCQUFxQjtvQkFDL0IsVUFBVSxFQUFFLElBQUk7b0JBQ2hCLGNBQWMsRUFBRSxDQUFDLGlCQUFpQixDQUFDO2lCQUNwQzs4QkFpQ1csTUFBTTtzQkFEZixZQUFZO3VCQUFDLE1BQU07Z0JBTVYsT0FBTztzQkFEaEIsWUFBWTt1QkFBQyxPQUFPIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgwqkgMjAyNCBBbmd1bGFyIFByaW1pdGl2ZXMuXG4gKiBodHRwczovL2dpdGh1Yi5jb20vbmctcHJpbWl0aXZlcy9uZy1wcmltaXRpdmVzXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIDIuMCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5pbXBvcnQgeyBEaXJlY3RpdmUsIEVsZW1lbnRSZWYsIEhvc3RMaXN0ZW5lciwgT25Jbml0LCBpbmplY3QgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE5ncFZpc3VhbGx5SGlkZGVuLCBpbmplY3RWaXN1YWxseUhpZGRlbiB9IGZyb20gJ25nLXByaW1pdGl2ZXMvYTExeSc7XG5pbXBvcnQgeyBOZ3BBdmF0YXJTdGF0ZSB9IGZyb20gJy4uL2F2YXRhci9hdmF0YXIuZGlyZWN0aXZlJztcbmltcG9ydCB7IGluamVjdEF2YXRhciB9IGZyb20gJy4uL2F2YXRhci9hdmF0YXIudG9rZW4nO1xuXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdpbWdbbmdwQXZhdGFySW1hZ2VdJyxcbiAgc3RhbmRhbG9uZTogdHJ1ZSxcbiAgaG9zdERpcmVjdGl2ZXM6IFtOZ3BWaXN1YWxseUhpZGRlbl0sXG59KVxuZXhwb3J0IGNsYXNzIE5ncEF2YXRhckltYWdlIGltcGxlbWVudHMgT25Jbml0IHtcbiAgLyoqXG4gICAqIENvbnRyb2wgdGhlIHZpc2liaWxpdHkgb2YgdGhlIGltYWdlLlxuICAgKi9cbiAgcHJvdGVjdGVkIHJlYWRvbmx5IHZpc3VhbGx5SGlkZGVuID0gaW5qZWN0VmlzdWFsbHlIaWRkZW4oKTtcblxuICAvKipcbiAgICogQWNjZXNzIHRoZSBhdmF0YXJcbiAgICovXG4gIHByaXZhdGUgcmVhZG9ubHkgYXZhdGFyID0gaW5qZWN0QXZhdGFyKCk7XG5cbiAgLyoqXG4gICAqIEFjY2VzcyB0aGUgaW1hZ2UgZWxlbWVudCByZWYuXG4gICAqL1xuICBwcml2YXRlIHJlYWRvbmx5IGVsZW1lbnRSZWYgPSBpbmplY3Q8RWxlbWVudFJlZjxIVE1MSW1hZ2VFbGVtZW50Pj4oRWxlbWVudFJlZik7XG5cbiAgbmdPbkluaXQoKTogdm9pZCB7XG4gICAgLy8gbWFyayB0aGUgYXZhdGFyIGFzIGxvYWRpbmdcbiAgICB0aGlzLnNldFN0YXRlKE5ncEF2YXRhclN0YXRlLkxvYWRpbmcpO1xuXG4gICAgLy8gaWYgdGhlcmUgaXMgbm8gc3JjLCB3ZSBjYW4gcmVwb3J0IHRoaXMgYXMgYW4gZXJyb3JcbiAgICBpZiAoIXRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LnNyYykge1xuICAgICAgdGhpcy5zZXRTdGF0ZShOZ3BBdmF0YXJTdGF0ZS5FcnJvcik7XG4gICAgfVxuXG4gICAgLy8gaWYgdGhlIGltYWdlIGhhcyBhbHJlYWR5IGxvYWRlZCwgd2UgY2FuIHJlcG9ydCB0aGlzIHRvIHRoZSBhdmF0YXJcbiAgICBpZiAodGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQuY29tcGxldGUpIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoTmdwQXZhdGFyU3RhdGUuTG9hZGVkKTtcbiAgICB9XG4gIH1cblxuICBASG9zdExpc3RlbmVyKCdsb2FkJylcbiAgcHJvdGVjdGVkIG9uTG9hZCgpOiB2b2lkIHtcbiAgICB0aGlzLnNldFN0YXRlKE5ncEF2YXRhclN0YXRlLkxvYWRlZCk7XG4gIH1cblxuICBASG9zdExpc3RlbmVyKCdlcnJvcicpXG4gIHByb3RlY3RlZCBvbkVycm9yKCk6IHZvaWQge1xuICAgIHRoaXMuc2V0U3RhdGUoTmdwQXZhdGFyU3RhdGUuRXJyb3IpO1xuICB9XG5cbiAgcHJpdmF0ZSBzZXRTdGF0ZShzdGF0ZTogTmdwQXZhdGFyU3RhdGUpIHtcbiAgICB0aGlzLmF2YXRhci5zZXRTdGF0ZShzdGF0ZSk7XG5cbiAgICAvLyBpZiB0aGUgc3RhdGUgaXMgbG9hZGVkIHRoZW4gd2Ugc2hvdWxkIG1ha2UgdGhlIGltYWdlIHZpc2libGVcbiAgICB0aGlzLnZpc3VhbGx5SGlkZGVuLnNldFZpc2liaWxpdHkoc3RhdGUgPT09IE5ncEF2YXRhclN0YXRlLkxvYWRlZCk7XG4gIH1cbn1cbiJdfQ==