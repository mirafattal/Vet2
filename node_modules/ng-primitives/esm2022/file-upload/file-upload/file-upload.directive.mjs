/**
 * Copyright © 2024 Angular Primitives.
 * https://github.com/ng-primitives/ng-primitives
 *
 * This source code is licensed under the Apache 2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */
import { coerceStringArray } from '@angular/cdk/coercion';
import { Directive, ElementRef, HostListener, booleanAttribute, inject, input, output, signal, } from '@angular/core';
import { NgpFocusVisible, NgpHover, NgpPress } from 'ng-primitives/interactions';
import { NgpFileUploadToken } from './file-upload.token';
import * as i0 from "@angular/core";
import * as i1 from "ng-primitives/interactions";
export class NgpFileUpload {
    constructor() {
        /**
         * Access the host element.
         */
        this.elementRef = inject(ElementRef);
        /**
         * The accepted file types.
         */
        this.fileTypes = input(undefined, {
            alias: 'ngpFileUploadFileTypes',
            transform: coerceStringArray,
        });
        /**
         * Whether to allow multiple files to be selected.
         */
        this.multiple = input(false, {
            alias: 'ngpFileUploadMultiple',
            transform: booleanAttribute,
        });
        /**
         * Whether to allow the user to select directories.
         */
        this.directory = input(false, {
            alias: 'ngpFileUploadDirectory',
            transform: booleanAttribute,
        });
        /**
         * Whether drag-and-drop is enabled.
         */
        this.dragAndDrop = input(true, {
            alias: 'ngpFileUploadDragDrop',
            transform: booleanAttribute,
        });
        /**
         * Whether the file upload is disabled.
         */
        this.disabled = input(false, {
            alias: 'ngpFileUploadDisabled',
            transform: booleanAttribute,
        });
        /**
         * Emits when the user selects files.
         */
        this.selected = output({
            alias: 'ngpFileUploadSelected',
        });
        /**
         * Emits when the user drags a file over the file upload.
         */
        this.dragOver = output({
            alias: 'ngpFileUploadDragOver',
        });
        /**
         * Whether the user is currently dragging a file over the file upload.
         */
        this.isDragOver = signal(false);
        /**
         * Store the file input element.
         */
        this.input = document.createElement('input');
        this.input.type = 'file';
        this.input.addEventListener('change', () => this.selected.emit(this.input.files));
    }
    showFileDialog() {
        if (this.disabled()) {
            return;
        }
        const fileTypes = this.fileTypes()?.join(',');
        if (fileTypes) {
            this.input.accept = fileTypes;
        }
        this.input.multiple = this.multiple();
        this.input.webkitdirectory = this.directory();
        this.input.click();
    }
    onDragEnter(event) {
        if (this.disabled() || !this.dragAndDrop()) {
            return;
        }
        event.preventDefault();
        event.stopPropagation();
        this.isDragOver.set(true);
        this.dragOver.emit(true);
    }
    onDragOver(event) {
        if (this.disabled() || !this.dragAndDrop()) {
            return;
        }
        event.stopPropagation();
        event.preventDefault();
        this.isDragOver.set(true);
    }
    onDragLeave(event) {
        if (this.disabled() || !this.dragAndDrop() || !this.isDragOver()) {
            return;
        }
        // if the element we are dragging over is a child of the file upload, ignore the event
        if (this.elementRef.nativeElement.contains(event.relatedTarget)) {
            return;
        }
        event.preventDefault();
        event.stopPropagation();
        this.isDragOver.set(false);
        this.dragOver.emit(false);
    }
    onDrop(event) {
        if (this.disabled() || !this.dragAndDrop()) {
            return;
        }
        event.preventDefault();
        this.isDragOver.set(false);
        this.dragOver.emit(false);
        if (event.dataTransfer?.files) {
            this.selected.emit(event.dataTransfer.files);
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: NgpFileUpload, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "17.1.0", version: "18.2.13", type: NgpFileUpload, isStandalone: true, selector: "[ngpFileUpload]", inputs: { fileTypes: { classPropertyName: "fileTypes", publicName: "ngpFileUploadFileTypes", isSignal: true, isRequired: false, transformFunction: null }, multiple: { classPropertyName: "multiple", publicName: "ngpFileUploadMultiple", isSignal: true, isRequired: false, transformFunction: null }, directory: { classPropertyName: "directory", publicName: "ngpFileUploadDirectory", isSignal: true, isRequired: false, transformFunction: null }, dragAndDrop: { classPropertyName: "dragAndDrop", publicName: "ngpFileUploadDragDrop", isSignal: true, isRequired: false, transformFunction: null }, disabled: { classPropertyName: "disabled", publicName: "ngpFileUploadDisabled", isSignal: true, isRequired: false, transformFunction: null } }, outputs: { selected: "ngpFileUploadSelected", dragOver: "ngpFileUploadDragOver" }, host: { listeners: { "click": "showFileDialog()", "dragenter": "onDragEnter($event)", "dragover": "onDragOver($event)", "dragleave": "onDragLeave($event)", "drop": "onDrop($event)" }, properties: { "attr.data-disabled": "disabled() ? \"\" : null", "attr.data-dragover": "isDragOver() ? \"\" : null" } }, providers: [{ provide: NgpFileUploadToken, useExisting: NgpFileUpload }], exportAs: ["ngpFileUpload"], hostDirectives: [{ directive: i1.NgpHover }, { directive: i1.NgpFocusVisible }, { directive: i1.NgpPress }], ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: NgpFileUpload, decorators: [{
            type: Directive,
            args: [{
                    standalone: true,
                    selector: '[ngpFileUpload]',
                    exportAs: 'ngpFileUpload',
                    providers: [{ provide: NgpFileUploadToken, useExisting: NgpFileUpload }],
                    host: {
                        '[attr.data-disabled]': 'disabled() ? "" : null',
                        '[attr.data-dragover]': 'isDragOver() ? "" : null',
                    },
                    hostDirectives: [NgpHover, NgpFocusVisible, NgpPress],
                }]
        }], ctorParameters: () => [], propDecorators: { showFileDialog: [{
                type: HostListener,
                args: ['click']
            }], onDragEnter: [{
                type: HostListener,
                args: ['dragenter', ['$event']]
            }], onDragOver: [{
                type: HostListener,
                args: ['dragover', ['$event']]
            }], onDragLeave: [{
                type: HostListener,
                args: ['dragleave', ['$event']]
            }], onDrop: [{
                type: HostListener,
                args: ['drop', ['$event']]
            }] } });
//# sourceMappingURL=data:application/json;base64,