/**
 * Copyright © 2024 Angular Primitives.
 * https://github.com/ng-primitives/ng-primitives
 *
 * This source code is licensed under the Apache 2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */
import { computed, Directive, ElementRef, HostListener, inject } from '@angular/core';
import { NgpButton } from 'ng-primitives/button';
import { injectDateAdapter } from 'ng-primitives/date-time';
import { NgpDisabledToken } from 'ng-primitives/internal';
import { injectDatePicker } from '../date-picker/date-picker.token';
import { NgpDatePickerNextMonthToken } from './date-picker-next-month.token';
import * as i0 from "@angular/core";
import * as i1 from "ng-primitives/button";
export class NgpDatePickerNextMonth {
    constructor() {
        /**
         * Access the element ref.
         */
        this.elementRef = inject(ElementRef);
        /**
         * Access the date adapter.
         */
        this.dateAdapter = injectDateAdapter();
        /**
         * Access the date picker.
         */
        this.datePicker = injectDatePicker();
        /**
         * Determine if this is a button element
         */
        this.isButton = this.elementRef.nativeElement.tagName.toLowerCase() === 'button';
        /**
         * Determine if the next month is disabled.
         * @internal
         */
        this.disabled = computed(() => {
            if (this.datePicker.disabled()) {
                return true;
            }
            const maxDate = this.datePicker.max();
            const lastDay = this.dateAdapter.set(this.dateAdapter.endOfMonth(this.datePicker.focusedDate()), {
                hour: 23,
                minute: 59,
                second: 59,
                millisecond: 999,
            });
            // if there is a max date and it is equal to or before the last day of the month, disable it.
            if (maxDate && this.dateAdapter.compare(maxDate, lastDay) <= 0) {
                return true;
            }
            return false;
        });
    }
    /**
     * Navigate to the next month.
     */
    navigateToNextMonth() {
        if (this.disabled()) {
            return;
        }
        // move focus to the first day of the next month.
        let date = this.datePicker.focusedDate();
        date = this.dateAdapter.add(date, { months: 1 });
        date = this.dateAdapter.set(date, {
            day: 1,
            hour: 0,
            minute: 0,
            second: 0,
            millisecond: 0,
        });
        this.datePicker.setFocusedDate(date, 'mouse', 'forward');
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: NgpDatePickerNextMonth, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "18.2.13", type: NgpDatePickerNextMonth, isStandalone: true, selector: "[ngpDatePickerNextMonth]", host: { listeners: { "click": "navigateToNextMonth()" }, properties: { "attr.data-disabled": "disabled() ? \"\" : null", "attr.aria-disabled": "disabled()", "attr.disabled": "isButton && disabled() ? true : null", "attr.type": "isButton ? \"button\" : null" } }, providers: [
            { provide: NgpDatePickerNextMonthToken, useExisting: NgpDatePickerNextMonth },
            { provide: NgpDisabledToken, useExisting: NgpDatePickerNextMonth },
        ], exportAs: ["ngpDatePickerNextMonth"], hostDirectives: [{ directive: i1.NgpButton }], ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: NgpDatePickerNextMonth, decorators: [{
            type: Directive,
            args: [{
                    standalone: true,
                    selector: '[ngpDatePickerNextMonth]',
                    exportAs: 'ngpDatePickerNextMonth',
                    providers: [
                        { provide: NgpDatePickerNextMonthToken, useExisting: NgpDatePickerNextMonth },
                        { provide: NgpDisabledToken, useExisting: NgpDatePickerNextMonth },
                    ],
                    hostDirectives: [NgpButton],
                    host: {
                        '[attr.data-disabled]': 'disabled() ? "" : null',
                        '[attr.aria-disabled]': 'disabled()',
                        '[attr.disabled]': 'isButton && disabled() ? true : null',
                        '[attr.type]': 'isButton ? "button" : null',
                    },
                }]
        }], propDecorators: { navigateToNextMonth: [{
                type: HostListener,
                args: ['click']
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0ZS1waWNrZXItbmV4dC1tb250aC5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9uZy1wcmltaXRpdmVzL2RhdGUtcGlja2VyL3NyYy9kYXRlLXBpY2tlci1uZXh0LW1vbnRoL2RhdGUtcGlja2VyLW5leHQtbW9udGguZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7R0FNRztBQUNILE9BQU8sRUFBRSxRQUFRLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxZQUFZLEVBQUUsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3RGLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUNqRCxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUM1RCxPQUFPLEVBQWlCLGdCQUFnQixFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDekUsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sa0NBQWtDLENBQUM7QUFDcEUsT0FBTyxFQUFFLDJCQUEyQixFQUFFLE1BQU0sZ0NBQWdDLENBQUM7OztBQWtCN0UsTUFBTSxPQUFPLHNCQUFzQjtJQWhCbkM7UUFpQkU7O1dBRUc7UUFDYyxlQUFVLEdBQUcsTUFBTSxDQUEwQixVQUFVLENBQUMsQ0FBQztRQUUxRTs7V0FFRztRQUNjLGdCQUFXLEdBQUcsaUJBQWlCLEVBQUssQ0FBQztRQUV0RDs7V0FFRztRQUNjLGVBQVUsR0FBRyxnQkFBZ0IsRUFBSyxDQUFDO1FBRXBEOztXQUVHO1FBQ2dCLGFBQVEsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsV0FBVyxFQUFFLEtBQUssUUFBUSxDQUFDO1FBRS9GOzs7V0FHRztRQUNNLGFBQVEsR0FBRyxRQUFRLENBQUMsR0FBRyxFQUFFO1lBQ2hDLElBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQyxRQUFRLEVBQUUsRUFBRSxDQUFDO2dCQUMvQixPQUFPLElBQUksQ0FBQztZQUNkLENBQUM7WUFFRCxNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsRUFBRSxDQUFDO1lBQ3RDLE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUNsQyxJQUFJLENBQUMsV0FBVyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLFdBQVcsRUFBRSxDQUFDLEVBQzFEO2dCQUNFLElBQUksRUFBRSxFQUFFO2dCQUNSLE1BQU0sRUFBRSxFQUFFO2dCQUNWLE1BQU0sRUFBRSxFQUFFO2dCQUNWLFdBQVcsRUFBRSxHQUFHO2FBQ2pCLENBQ0YsQ0FBQztZQUVGLDZGQUE2RjtZQUM3RixJQUFJLE9BQU8sSUFBSSxJQUFJLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUUsT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUM7Z0JBQy9ELE9BQU8sSUFBSSxDQUFDO1lBQ2QsQ0FBQztZQUVELE9BQU8sS0FBSyxDQUFDO1FBQ2YsQ0FBQyxDQUFDLENBQUM7S0F3Qko7SUF0QkM7O09BRUc7SUFFTyxtQkFBbUI7UUFDM0IsSUFBSSxJQUFJLENBQUMsUUFBUSxFQUFFLEVBQUUsQ0FBQztZQUNwQixPQUFPO1FBQ1QsQ0FBQztRQUVELGlEQUFpRDtRQUNqRCxJQUFJLElBQUksR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBQ3pDLElBQUksR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsRUFBRSxNQUFNLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUNqRCxJQUFJLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFO1lBQ2hDLEdBQUcsRUFBRSxDQUFDO1lBQ04sSUFBSSxFQUFFLENBQUM7WUFDUCxNQUFNLEVBQUUsQ0FBQztZQUNULE1BQU0sRUFBRSxDQUFDO1lBQ1QsV0FBVyxFQUFFLENBQUM7U0FDZixDQUFDLENBQUM7UUFFSCxJQUFJLENBQUMsVUFBVSxDQUFDLGNBQWMsQ0FBQyxJQUFJLEVBQUUsT0FBTyxFQUFFLFNBQVMsQ0FBQyxDQUFDO0lBQzNELENBQUM7K0dBdEVVLHNCQUFzQjttR0FBdEIsc0JBQXNCLDhVQVp0QjtZQUNULEVBQUUsT0FBTyxFQUFFLDJCQUEyQixFQUFFLFdBQVcsRUFBRSxzQkFBc0IsRUFBRTtZQUM3RSxFQUFFLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxXQUFXLEVBQUUsc0JBQXNCLEVBQUU7U0FDbkU7OzRGQVNVLHNCQUFzQjtrQkFoQmxDLFNBQVM7bUJBQUM7b0JBQ1QsVUFBVSxFQUFFLElBQUk7b0JBQ2hCLFFBQVEsRUFBRSwwQkFBMEI7b0JBQ3BDLFFBQVEsRUFBRSx3QkFBd0I7b0JBQ2xDLFNBQVMsRUFBRTt3QkFDVCxFQUFFLE9BQU8sRUFBRSwyQkFBMkIsRUFBRSxXQUFXLHdCQUF3QixFQUFFO3dCQUM3RSxFQUFFLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxXQUFXLHdCQUF3QixFQUFFO3FCQUNuRTtvQkFDRCxjQUFjLEVBQUUsQ0FBQyxTQUFTLENBQUM7b0JBQzNCLElBQUksRUFBRTt3QkFDSixzQkFBc0IsRUFBRSx3QkFBd0I7d0JBQ2hELHNCQUFzQixFQUFFLFlBQVk7d0JBQ3BDLGlCQUFpQixFQUFFLHNDQUFzQzt3QkFDekQsYUFBYSxFQUFFLDRCQUE0QjtxQkFDNUM7aUJBQ0Y7OEJBc0RXLG1CQUFtQjtzQkFENUIsWUFBWTt1QkFBQyxPQUFPIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgwqkgMjAyNCBBbmd1bGFyIFByaW1pdGl2ZXMuXG4gKiBodHRwczovL2dpdGh1Yi5jb20vbmctcHJpbWl0aXZlcy9uZy1wcmltaXRpdmVzXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIDIuMCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5pbXBvcnQgeyBjb21wdXRlZCwgRGlyZWN0aXZlLCBFbGVtZW50UmVmLCBIb3N0TGlzdGVuZXIsIGluamVjdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTmdwQnV0dG9uIH0gZnJvbSAnbmctcHJpbWl0aXZlcy9idXR0b24nO1xuaW1wb3J0IHsgaW5qZWN0RGF0ZUFkYXB0ZXIgfSBmcm9tICduZy1wcmltaXRpdmVzL2RhdGUtdGltZSc7XG5pbXBvcnQgeyBOZ3BDYW5EaXNhYmxlLCBOZ3BEaXNhYmxlZFRva2VuIH0gZnJvbSAnbmctcHJpbWl0aXZlcy9pbnRlcm5hbCc7XG5pbXBvcnQgeyBpbmplY3REYXRlUGlja2VyIH0gZnJvbSAnLi4vZGF0ZS1waWNrZXIvZGF0ZS1waWNrZXIudG9rZW4nO1xuaW1wb3J0IHsgTmdwRGF0ZVBpY2tlck5leHRNb250aFRva2VuIH0gZnJvbSAnLi9kYXRlLXBpY2tlci1uZXh0LW1vbnRoLnRva2VuJztcblxuQERpcmVjdGl2ZSh7XG4gIHN0YW5kYWxvbmU6IHRydWUsXG4gIHNlbGVjdG9yOiAnW25ncERhdGVQaWNrZXJOZXh0TW9udGhdJyxcbiAgZXhwb3J0QXM6ICduZ3BEYXRlUGlja2VyTmV4dE1vbnRoJyxcbiAgcHJvdmlkZXJzOiBbXG4gICAgeyBwcm92aWRlOiBOZ3BEYXRlUGlja2VyTmV4dE1vbnRoVG9rZW4sIHVzZUV4aXN0aW5nOiBOZ3BEYXRlUGlja2VyTmV4dE1vbnRoIH0sXG4gICAgeyBwcm92aWRlOiBOZ3BEaXNhYmxlZFRva2VuLCB1c2VFeGlzdGluZzogTmdwRGF0ZVBpY2tlck5leHRNb250aCB9LFxuICBdLFxuICBob3N0RGlyZWN0aXZlczogW05ncEJ1dHRvbl0sXG4gIGhvc3Q6IHtcbiAgICAnW2F0dHIuZGF0YS1kaXNhYmxlZF0nOiAnZGlzYWJsZWQoKSA/IFwiXCIgOiBudWxsJyxcbiAgICAnW2F0dHIuYXJpYS1kaXNhYmxlZF0nOiAnZGlzYWJsZWQoKScsXG4gICAgJ1thdHRyLmRpc2FibGVkXSc6ICdpc0J1dHRvbiAmJiBkaXNhYmxlZCgpID8gdHJ1ZSA6IG51bGwnLFxuICAgICdbYXR0ci50eXBlXSc6ICdpc0J1dHRvbiA/IFwiYnV0dG9uXCIgOiBudWxsJyxcbiAgfSxcbn0pXG5leHBvcnQgY2xhc3MgTmdwRGF0ZVBpY2tlck5leHRNb250aDxUPiBpbXBsZW1lbnRzIE5ncENhbkRpc2FibGUge1xuICAvKipcbiAgICogQWNjZXNzIHRoZSBlbGVtZW50IHJlZi5cbiAgICovXG4gIHByaXZhdGUgcmVhZG9ubHkgZWxlbWVudFJlZiA9IGluamVjdDxFbGVtZW50UmVmPEhUTUxFbGVtZW50Pj4oRWxlbWVudFJlZik7XG5cbiAgLyoqXG4gICAqIEFjY2VzcyB0aGUgZGF0ZSBhZGFwdGVyLlxuICAgKi9cbiAgcHJpdmF0ZSByZWFkb25seSBkYXRlQWRhcHRlciA9IGluamVjdERhdGVBZGFwdGVyPFQ+KCk7XG5cbiAgLyoqXG4gICAqIEFjY2VzcyB0aGUgZGF0ZSBwaWNrZXIuXG4gICAqL1xuICBwcml2YXRlIHJlYWRvbmx5IGRhdGVQaWNrZXIgPSBpbmplY3REYXRlUGlja2VyPFQ+KCk7XG5cbiAgLyoqXG4gICAqIERldGVybWluZSBpZiB0aGlzIGlzIGEgYnV0dG9uIGVsZW1lbnRcbiAgICovXG4gIHByb3RlY3RlZCByZWFkb25seSBpc0J1dHRvbiA9IHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LnRhZ05hbWUudG9Mb3dlckNhc2UoKSA9PT0gJ2J1dHRvbic7XG5cbiAgLyoqXG4gICAqIERldGVybWluZSBpZiB0aGUgbmV4dCBtb250aCBpcyBkaXNhYmxlZC5cbiAgICogQGludGVybmFsXG4gICAqL1xuICByZWFkb25seSBkaXNhYmxlZCA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICBpZiAodGhpcy5kYXRlUGlja2VyLmRpc2FibGVkKCkpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGNvbnN0IG1heERhdGUgPSB0aGlzLmRhdGVQaWNrZXIubWF4KCk7XG4gICAgY29uc3QgbGFzdERheSA9IHRoaXMuZGF0ZUFkYXB0ZXIuc2V0KFxuICAgICAgdGhpcy5kYXRlQWRhcHRlci5lbmRPZk1vbnRoKHRoaXMuZGF0ZVBpY2tlci5mb2N1c2VkRGF0ZSgpKSxcbiAgICAgIHtcbiAgICAgICAgaG91cjogMjMsXG4gICAgICAgIG1pbnV0ZTogNTksXG4gICAgICAgIHNlY29uZDogNTksXG4gICAgICAgIG1pbGxpc2Vjb25kOiA5OTksXG4gICAgICB9LFxuICAgICk7XG5cbiAgICAvLyBpZiB0aGVyZSBpcyBhIG1heCBkYXRlIGFuZCBpdCBpcyBlcXVhbCB0byBvciBiZWZvcmUgdGhlIGxhc3QgZGF5IG9mIHRoZSBtb250aCwgZGlzYWJsZSBpdC5cbiAgICBpZiAobWF4RGF0ZSAmJiB0aGlzLmRhdGVBZGFwdGVyLmNvbXBhcmUobWF4RGF0ZSwgbGFzdERheSkgPD0gMCkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9KTtcblxuICAvKipcbiAgICogTmF2aWdhdGUgdG8gdGhlIG5leHQgbW9udGguXG4gICAqL1xuICBASG9zdExpc3RlbmVyKCdjbGljaycpXG4gIHByb3RlY3RlZCBuYXZpZ2F0ZVRvTmV4dE1vbnRoKCk6IHZvaWQge1xuICAgIGlmICh0aGlzLmRpc2FibGVkKCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBtb3ZlIGZvY3VzIHRvIHRoZSBmaXJzdCBkYXkgb2YgdGhlIG5leHQgbW9udGguXG4gICAgbGV0IGRhdGUgPSB0aGlzLmRhdGVQaWNrZXIuZm9jdXNlZERhdGUoKTtcbiAgICBkYXRlID0gdGhpcy5kYXRlQWRhcHRlci5hZGQoZGF0ZSwgeyBtb250aHM6IDEgfSk7XG4gICAgZGF0ZSA9IHRoaXMuZGF0ZUFkYXB0ZXIuc2V0KGRhdGUsIHtcbiAgICAgIGRheTogMSxcbiAgICAgIGhvdXI6IDAsXG4gICAgICBtaW51dGU6IDAsXG4gICAgICBzZWNvbmQ6IDAsXG4gICAgICBtaWxsaXNlY29uZDogMCxcbiAgICB9KTtcblxuICAgIHRoaXMuZGF0ZVBpY2tlci5zZXRGb2N1c2VkRGF0ZShkYXRlLCAnbW91c2UnLCAnZm9yd2FyZCcpO1xuICB9XG59XG4iXX0=