/**
 * Copyright © 2024 Angular Primitives.
 * https://github.com/ng-primitives/ng-primitives
 *
 * This source code is licensed under the Apache 2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */
import { computed, Directive, inject, Injector, TemplateRef, ViewContainerRef, } from '@angular/core';
import { injectDateAdapter } from 'ng-primitives/date-time';
import { onChange } from 'ng-primitives/utils';
import { injectDatePicker } from '../date-picker/date-picker.token';
import { NgpDatePickerRowRenderToken, NgpDatePickerWeekToken, } from './date-picker-row-render.token';
import * as i0 from "@angular/core";
export class NgpDatePickerRowRender {
    constructor() {
        /**
         * Access the date adapter.
         */
        this.dateAdapter = injectDateAdapter();
        /**
         * Access the date picker.
         */
        this.datePicker = injectDatePicker();
        /**
         * Access the template ref for the cell.
         */
        this.templateRef = inject(TemplateRef);
        /**
         * Access the view container ref.
         */
        this.viewContainerRef = inject(ViewContainerRef);
        /**
         * Get all the days to display, this is the days of the current month
         * and the days of the previous and next month to fill the grid.
         */
        this.days = computed(() => {
            const month = this.datePicker.focusedDate();
            const days = [];
            // Get the first and last day of the month.
            let firstDay = this.dateAdapter.startOfMonth(month);
            let lastDay = this.dateAdapter.endOfMonth(month);
            // find the first and last day of visible in the grid.
            firstDay = this.dateAdapter.subtract(firstDay, {
                days: this.dateAdapter.getDay(firstDay),
            });
            lastDay = this.dateAdapter.add(lastDay, {
                days: 6 - this.dateAdapter.getDay(lastDay),
            });
            // collect all the days to display.
            while (firstDay <= lastDay) {
                days.push(firstDay);
                firstDay = this.dateAdapter.add(firstDay, { days: 1 });
            }
            return days;
        });
        // get the weeks to display.
        this.weeks = computed(() => {
            const days = this.days();
            const weeks = [];
            for (let i = 0; i < days.length; i += 7) {
                weeks.push(days.slice(i, i + 7));
            }
            return weeks;
        });
        /**
         * Store the embedded view refs of each rendered row.
         */
        this.viewRefs = [];
        // re-render the rows when the month changes.
        onChange(this.datePicker.focusedDate, (date, previousDate) => {
            if (!date || !previousDate || !this.dateAdapter.isSameMonth(date, previousDate)) {
                this.renderRows();
            }
        });
    }
    ngOnDestroy() {
        this.destroyRows();
    }
    /**
     * Render the row.
     */
    renderRows() {
        const weeks = this.weeks();
        // clear the view container.
        this.destroyRows();
        // render the weeks.
        for (const week of weeks) {
            const viewRef = this.viewContainerRef.createEmbeddedView(this.templateRef, null, {
                injector: Injector.create({
                    parent: this.viewContainerRef.injector,
                    providers: [{ provide: NgpDatePickerWeekToken, useValue: week }],
                }),
            });
            this.viewRefs.push(viewRef);
        }
    }
    /**
     * Destroy the row.
     */
    destroyRows() {
        for (const viewRef of this.viewRefs) {
            viewRef.destroy();
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: NgpDatePickerRowRender, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "18.2.13", type: NgpDatePickerRowRender, isStandalone: true, selector: "[ngpDatePickerRowRender]", providers: [{ provide: NgpDatePickerRowRenderToken, useExisting: NgpDatePickerRowRender }], exportAs: ["ngpDatePickerRowRender"], ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: NgpDatePickerRowRender, decorators: [{
            type: Directive,
            args: [{
                    standalone: true,
                    selector: '[ngpDatePickerRowRender]',
                    exportAs: 'ngpDatePickerRowRender',
                    providers: [{ provide: NgpDatePickerRowRenderToken, useExisting: NgpDatePickerRowRender }],
                }]
        }], ctorParameters: () => [] });
//# sourceMappingURL=data:application/json;base64,