import { afterNextRender, booleanAttribute, contentChild, contentChildren, Directive, inject, Injector, input, model, } from '@angular/core';
import { injectDateAdapter } from 'ng-primitives/date-time';
import { NgpDatePickerDateButtonToken } from '../date-picker-date-button/date-picker-date-button.token';
import { NgpDatePickerLabelToken } from '../date-picker-label/date-picker-label.token';
import { NgpDatePickerToken } from './date-picker.token';
import * as i0 from "@angular/core";
export class NgpDatePicker {
    constructor() {
        /**
         * Access the date adapter.
         */
        this.dateAdapter = injectDateAdapter();
        /**
         * Access the injector.
         */
        this.injector = inject(Injector);
        /**
         * The minimum date that can be selected.
         */
        this.min = input(undefined, {
            alias: 'ngpDatePickerMin',
        });
        /**
         * The maximum date that can be selected.
         */
        this.max = input(undefined, {
            alias: 'ngpDatePickerMax',
        });
        /**
         * Determine if the date picker is disabled.
         */
        this.disabled = input(false, {
            alias: 'ngpDatePickerDisabled',
            transform: booleanAttribute,
        });
        /**
         * A function that is called to determine if a specific date should be disabled.
         */
        this.dateDisabled = input(() => false, {
            alias: 'ngpDatePickerDateDisabled',
        });
        /**
         * The selected value.
         */
        this.date = model(undefined, {
            alias: 'ngpDatePickerDate',
        });
        /**
         * The focused value.
         */
        this.focusedDate = model(this.dateAdapter.now(), {
            alias: 'ngpDatePickerFocusedDate',
        });
        /**
         * Detect the label element.
         * @internal
         */
        this.label = contentChild(NgpDatePickerLabelToken, { descendants: true });
        /**
         * Access all the date picker buttons
         */
        this.buttons = contentChildren(NgpDatePickerDateButtonToken, { descendants: true });
    }
    /**
     * Set the focused date.
     * @param date The date to focus.
     * @internal
     */
    setFocusedDate(date, origin = 'mouse', direction) {
        if (this.disabled()) {
            return;
        }
        const min = this.min();
        const max = this.max();
        if (min && this.dateAdapter.isBefore(date, min)) {
            date = min;
        }
        if (max && this.dateAdapter.isAfter(date, max)) {
            date = max;
        }
        // if the date is disabled, find the next available date in the specified direction.
        if (this.dateDisabled()(date)) {
            let nextDate = this.dateAdapter.add(date, { days: direction === 'forward' ? 1 : -1 });
            while (this.dateDisabled()(nextDate) ||
                (min && this.dateAdapter.isBefore(nextDate, min)) ||
                (max && this.dateAdapter.isAfter(nextDate, max))) {
                nextDate = this.dateAdapter.add(nextDate, { days: direction === 'forward' ? 1 : -1 });
            }
            date = nextDate;
        }
        this.focusedDate.set(date);
        if (origin === 'keyboard') {
            afterNextRender({
                write: () => {
                    this.buttons().forEach(button => button.focus());
                },
            }, {
                injector: this.injector,
            });
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: NgpDatePicker, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "17.2.0", version: "18.2.13", type: NgpDatePicker, isStandalone: true, selector: "[ngpDatePicker]", inputs: { min: { classPropertyName: "min", publicName: "ngpDatePickerMin", isSignal: true, isRequired: false, transformFunction: null }, max: { classPropertyName: "max", publicName: "ngpDatePickerMax", isSignal: true, isRequired: false, transformFunction: null }, disabled: { classPropertyName: "disabled", publicName: "ngpDatePickerDisabled", isSignal: true, isRequired: false, transformFunction: null }, dateDisabled: { classPropertyName: "dateDisabled", publicName: "ngpDatePickerDateDisabled", isSignal: true, isRequired: false, transformFunction: null }, date: { classPropertyName: "date", publicName: "ngpDatePickerDate", isSignal: true, isRequired: false, transformFunction: null }, focusedDate: { classPropertyName: "focusedDate", publicName: "ngpDatePickerFocusedDate", isSignal: true, isRequired: false, transformFunction: null } }, outputs: { date: "ngpDatePickerDateChange", focusedDate: "ngpDatePickerFocusedDateChange" }, host: { properties: { "attr.data-disabled": "disabled() ? \"\" : null" } }, providers: [{ provide: NgpDatePickerToken, useExisting: NgpDatePicker }], queries: [{ propertyName: "label", first: true, predicate: NgpDatePickerLabelToken, descendants: true, isSignal: true }, { propertyName: "buttons", predicate: NgpDatePickerDateButtonToken, descendants: true, isSignal: true }], exportAs: ["ngpDatePicker"], ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: NgpDatePicker, decorators: [{
            type: Directive,
            args: [{
                    standalone: true,
                    selector: '[ngpDatePicker]',
                    exportAs: 'ngpDatePicker',
                    providers: [{ provide: NgpDatePickerToken, useExisting: NgpDatePicker }],
                    host: {
                        '[attr.data-disabled]': 'disabled() ? "" : null',
                    },
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,