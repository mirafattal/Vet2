/**
 * Copyright © 2024 Angular Primitives.
 * https://github.com/ng-primitives/ng-primitives
 *
 * This source code is licensed under the Apache 2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */
import { FocusMonitor } from '@angular/cdk/a11y';
import { computed, Directive, ElementRef, HostListener, inject } from '@angular/core';
import { NgpButton } from 'ng-primitives/button';
import { injectDateAdapter } from 'ng-primitives/date-time';
import { NgpDisabledToken } from 'ng-primitives/internal';
import { injectDatePickerCellDate } from '../date-picker-cell-render/date-picker-cell-render.token';
import { injectDatePicker } from '../date-picker/date-picker.token';
import { NgpDatePickerDateButtonToken } from './date-picker-date-button.token';
import * as i0 from "@angular/core";
import * as i1 from "ng-primitives/button";
export class NgpDatePickerDateButton {
    constructor() {
        /**
         * Access the element ref.
         */
        this.elementRef = inject(ElementRef);
        /**
         * Access the focus monitor.
         */
        this.focusMonitor = inject(FocusMonitor);
        /**
         * Access the date picker.
         */
        this.datePicker = injectDatePicker();
        /**
         * Access the date adapter.
         */
        this.dateAdapter = injectDateAdapter();
        /**
         * The date this cell represents.
         */
        this.date = injectDatePickerCellDate();
        /**
         * Determine if this is the focused date.
         */
        this.focused = computed(() => this.dateAdapter.isSameDay(this.date, this.datePicker.focusedDate()));
        /**
         * Determine if this is the selected date.
         * @internal
         */
        this.selected = computed(() => {
            const selected = this.datePicker.date();
            return selected && this.dateAdapter.isSameDay(this.date, selected);
        });
        /**
         * Determine if this date is outside the current month.
         */
        this.outside = computed(() => !this.dateAdapter.isSameMonth(this.date, this.datePicker.focusedDate()));
        /**
         * Determine if this date is today.
         */
        this.today = computed(() => this.dateAdapter.isSameDay(this.date, this.dateAdapter.now()));
        /**
         * Determine if this date is disabled.
         * @internal
         */
        this.disabled = computed(() => {
            const min = this.datePicker.min();
            const max = this.datePicker.max();
            if (this.datePicker.disabled() || this.datePicker.dateDisabled()(this.date)) {
                return true;
            }
            if (min && this.dateAdapter.compare(this.dateAdapter.startOfDay(this.date), min) < 0) {
                return true;
            }
            if (max && this.dateAdapter.compare(this.dateAdapter.startOfDay(this.date), max) > 0) {
                return true;
            }
            return false;
        });
        /**
         * Determine if the element is a button.
         */
        this.isButton = this.elementRef.nativeElement.tagName === 'BUTTON';
    }
    /**
     * When the button is clicked, select the date.
     */
    select(event) {
        // if the button is disabled, or is already selected, do nothing.
        if (this.disabled() || this.selected()) {
            return;
        }
        // because this may not be a button, we should stop the event from firing twice due to
        // us listening to both the click and the keydown.enter event.
        if (event) {
            event.preventDefault();
            event.stopPropagation();
        }
        this.datePicker.date.set(this.date);
        this.datePicker.setFocusedDate(this.date, 'mouse', 'forward');
    }
    /**
     * Focus if this is the current focused date.
     * @internal
     */
    focus() {
        if (this.dateAdapter.isSameDay(this.date, this.datePicker.focusedDate())) {
            this.focusMonitor.focusVia(this.elementRef, 'keyboard');
        }
    }
    /**
     * Focus the previous cell.
     */
    focusPrevious(event) {
        event.preventDefault();
        event.stopPropagation();
        // in rtl, the arrow keys are reversed.
        if (this.getDirection() === 'rtl') {
            this.focusDate(this.dateAdapter.add(this.datePicker.focusedDate(), { days: 1 }), 'forward');
        }
        else {
            this.focusDate(this.dateAdapter.subtract(this.datePicker.focusedDate(), { days: 1 }), 'backward');
        }
    }
    /**
     * Focus the next cell.
     */
    focusNext(event) {
        event.preventDefault();
        event.stopPropagation();
        // in rtl, the arrow keys are reversed.
        if (this.getDirection() === 'rtl') {
            this.focusDate(this.dateAdapter.subtract(this.datePicker.focusedDate(), { days: 1 }), 'backward');
        }
        else {
            this.focusDate(this.dateAdapter.add(this.datePicker.focusedDate(), { days: 1 }), 'forward');
        }
    }
    /**
     * Focus the above cell.
     */
    focusAbove(event) {
        event.preventDefault();
        event.stopPropagation();
        this.focusDate(this.dateAdapter.subtract(this.datePicker.focusedDate(), { days: 7 }), 'backward');
    }
    /**
     * Focus the below cell.
     */
    focusBelow(event) {
        event.preventDefault();
        event.stopPropagation();
        this.focusDate(this.dateAdapter.add(this.datePicker.focusedDate(), { days: 7 }), 'forward');
    }
    /**
     * Focus the first date of the month.
     */
    focusFirst(event) {
        event.preventDefault();
        event.stopPropagation();
        this.focusDate(this.dateAdapter.startOfMonth(this.datePicker.focusedDate()), 'forward');
    }
    /**
     * Focus the last date of the month.
     */
    focusLast(event) {
        event.preventDefault();
        event.stopPropagation();
        this.focusDate(this.dateAdapter.endOfMonth(this.datePicker.focusedDate()), 'backward');
    }
    /**
     * Focus the same date in the previous month.
     */
    focusPreviousMonth(event) {
        event.preventDefault();
        event.stopPropagation();
        const date = this.dateAdapter.getDate(this.datePicker.focusedDate());
        let previousMonthTarget = this.dateAdapter.startOfMonth(this.datePicker.focusedDate());
        previousMonthTarget = this.dateAdapter.subtract(previousMonthTarget, { months: 1 });
        const lastDay = this.dateAdapter.endOfMonth(previousMonthTarget);
        // if we are on a date that does not exist in the previous month, we should focus the last day of the month.
        if (date > this.dateAdapter.getDate(lastDay)) {
            this.focusDate(lastDay, 'forward');
            return;
        }
        else {
            this.focusDate(this.dateAdapter.set(previousMonthTarget, { day: date }), 'forward');
        }
    }
    /**
     * Focus the same date in the next month.
     */
    focusNextMonth(event) {
        event.preventDefault();
        event.stopPropagation();
        const date = this.dateAdapter.getDate(this.datePicker.focusedDate());
        let nextMonthTarget = this.dateAdapter.startOfMonth(this.datePicker.focusedDate());
        nextMonthTarget = this.dateAdapter.add(nextMonthTarget, { months: 1 });
        const lastDay = this.dateAdapter.endOfMonth(nextMonthTarget);
        // if we are on a date that does not exist in the next month, we should focus the last day of the month.
        if (date > this.dateAdapter.getDate(lastDay)) {
            this.focusDate(lastDay, 'backward');
            return;
        }
        else {
            this.focusDate(this.dateAdapter.set(nextMonthTarget, { day: date }), 'backward');
        }
    }
    focusDate(date, direction) {
        this.datePicker.setFocusedDate(date, 'keyboard', direction);
    }
    /**
     * Get the direction of the element.
     */
    getDirection() {
        return getComputedStyle(this.elementRef.nativeElement).direction === 'rtl' ? 'rtl' : 'ltr';
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: NgpDatePickerDateButton, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "18.2.13", type: NgpDatePickerDateButton, isStandalone: true, selector: "[ngpDatePickerDateButton]", host: { listeners: { "click": "select()", "keydown.enter": "select($event)", "keydown.space": "select($event)", "keydown.arrowLeft": "focusPrevious($event)", "keydown.arrowRight": "focusNext($event)", "keydown.arrowUp": "focusAbove($event)", "keydown.arrowDown": "focusBelow($event)", "keydown.home": "focusFirst($event)", "keydown.end": "focusLast($event)", "keydown.pageUp": "focusPreviousMonth($event)", "keydown.pageDown": "focusNextMonth($event)" }, properties: { "attr.role": "!isButton ? \"button\" : null", "attr.tabindex": "focused() ? 0 : -1", "attr.data-selected": "selected() ? \"\" : null", "attr.data-disabled": "disabled() ? \"\" : null", "attr.aria-disabled": "disabled()", "attr.data-outside-month": "outside() ? \"\" : null", "attr.data-today": "today() ? \"\" : null" } }, providers: [
            { provide: NgpDatePickerDateButtonToken, useExisting: NgpDatePickerDateButton },
            { provide: NgpDisabledToken, useExisting: NgpDatePickerDateButton },
        ], exportAs: ["ngpDatePickerDateButton"], hostDirectives: [{ directive: i1.NgpButton }], ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: NgpDatePickerDateButton, decorators: [{
            type: Directive,
            args: [{
                    standalone: true,
                    selector: '[ngpDatePickerDateButton]',
                    exportAs: 'ngpDatePickerDateButton',
                    providers: [
                        { provide: NgpDatePickerDateButtonToken, useExisting: NgpDatePickerDateButton },
                        { provide: NgpDisabledToken, useExisting: NgpDatePickerDateButton },
                    ],
                    host: {
                        '[attr.role]': '!isButton ? "button" : null',
                        '[attr.tabindex]': 'focused() ? 0 : -1',
                        '[attr.data-selected]': 'selected() ? "" : null',
                        '[attr.data-disabled]': 'disabled() ? "" : null',
                        '[attr.aria-disabled]': 'disabled()',
                        '[attr.data-outside-month]': 'outside() ? "" : null',
                        '[attr.data-today]': 'today() ? "" : null',
                    },
                    hostDirectives: [NgpButton],
                }]
        }], propDecorators: { select: [{
                type: HostListener,
                args: ['click']
            }, {
                type: HostListener,
                args: ['keydown.enter', ['$event']]
            }, {
                type: HostListener,
                args: ['keydown.space', ['$event']]
            }], focusPrevious: [{
                type: HostListener,
                args: ['keydown.arrowLeft', ['$event']]
            }], focusNext: [{
                type: HostListener,
                args: ['keydown.arrowRight', ['$event']]
            }], focusAbove: [{
                type: HostListener,
                args: ['keydown.arrowUp', ['$event']]
            }], focusBelow: [{
                type: HostListener,
                args: ['keydown.arrowDown', ['$event']]
            }], focusFirst: [{
                type: HostListener,
                args: ['keydown.home', ['$event']]
            }], focusLast: [{
                type: HostListener,
                args: ['keydown.end', ['$event']]
            }], focusPreviousMonth: [{
                type: HostListener,
                args: ['keydown.pageUp', ['$event']]
            }], focusNextMonth: [{
                type: HostListener,
                args: ['keydown.pageDown', ['$event']]
            }] } });
//# sourceMappingURL=data:application/json;base64,