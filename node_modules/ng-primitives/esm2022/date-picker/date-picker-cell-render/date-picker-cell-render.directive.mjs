/**
 * Copyright © 2024 Angular Primitives.
 * https://github.com/ng-primitives/ng-primitives
 *
 * This source code is licensed under the Apache 2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */
import { Directive, inject, Injector, TemplateRef, ViewContainerRef, } from '@angular/core';
import { injectDatePickerWeek } from '../date-picker-row-render/date-picker-row-render.token';
import { NgpDatePickerCellDateToken, NgpDatePickerCellRenderToken, } from './date-picker-cell-render.token';
import * as i0 from "@angular/core";
export class NgpDatePickerCellRender {
    // Make sure the template checker knows the type of the context with which the
    // template of this directive will be rendered
    static ngTemplateContextGuard(_, context) {
        return true;
    }
    constructor() {
        /**
         * Access the template ref for the cell.
         */
        this.templateRef = inject(TemplateRef);
        /**
         * Access the view container ref.
         */
        this.viewContainerRef = inject(ViewContainerRef);
        /**
         * Access the dates in the week.
         */
        this.dates = injectDatePickerWeek();
        /**
         * Store the view refs for the dates.
         */
        this.viewRefs = [];
        this.renderDates();
    }
    /**
     * Render the dates in the week.
     */
    renderDates() {
        this.viewRefs.forEach(viewRef => viewRef.destroy());
        for (const date of this.dates) {
            const viewRef = this.viewContainerRef.createEmbeddedView(this.templateRef, {
                $implicit: date,
            }, {
                injector: Injector.create({
                    parent: this.viewContainerRef.injector,
                    providers: [{ provide: NgpDatePickerCellDateToken, useValue: date }],
                }),
            });
            this.viewRefs.push(viewRef);
        }
    }
    /**
     * Destroy the view refs.
     */
    ngOnDestroy() {
        this.viewRefs.forEach(viewRef => viewRef.destroy());
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: NgpDatePickerCellRender, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "18.2.13", type: NgpDatePickerCellRender, isStandalone: true, selector: "[ngpDatePickerCellRender]", providers: [{ provide: NgpDatePickerCellRenderToken, useExisting: NgpDatePickerCellRender }], exportAs: ["ngpDatePickerCellRender"], ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: NgpDatePickerCellRender, decorators: [{
            type: Directive,
            args: [{
                    standalone: true,
                    selector: '[ngpDatePickerCellRender]',
                    exportAs: 'ngpDatePickerCellRender',
                    providers: [{ provide: NgpDatePickerCellRenderToken, useExisting: NgpDatePickerCellRender }],
                }]
        }], ctorParameters: () => [] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0ZS1waWNrZXItY2VsbC1yZW5kZXIuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvbmctcHJpbWl0aXZlcy9kYXRlLXBpY2tlci9zcmMvZGF0ZS1waWNrZXItY2VsbC1yZW5kZXIvZGF0ZS1waWNrZXItY2VsbC1yZW5kZXIuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7R0FNRztBQUNILE9BQU8sRUFDTCxTQUFTLEVBRVQsTUFBTSxFQUNOLFFBQVEsRUFFUixXQUFXLEVBQ1gsZ0JBQWdCLEdBQ2pCLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLHdEQUF3RCxDQUFDO0FBQzlGLE9BQU8sRUFDTCwwQkFBMEIsRUFDMUIsNEJBQTRCLEdBQzdCLE1BQU0saUNBQWlDLENBQUM7O0FBUXpDLE1BQU0sT0FBTyx1QkFBdUI7SUFxQmxDLDhFQUE4RTtJQUM5RSw4Q0FBOEM7SUFDOUMsTUFBTSxDQUFDLHNCQUFzQixDQUMzQixDQUE2QixFQUM3QixPQUFnQjtRQUVoQixPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7SUFFRDtRQTdCQTs7V0FFRztRQUNjLGdCQUFXLEdBQUcsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBRW5EOztXQUVHO1FBQ2MscUJBQWdCLEdBQUcsTUFBTSxDQUFDLGdCQUFnQixDQUFDLENBQUM7UUFFN0Q7O1dBRUc7UUFDYyxVQUFLLEdBQUcsb0JBQW9CLEVBQUssQ0FBQztRQUVuRDs7V0FFRztRQUNjLGFBQVEsR0FBbUQsRUFBRSxDQUFDO1FBWTdFLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUNyQixDQUFDO0lBRUQ7O09BRUc7SUFDSyxXQUFXO1FBQ2pCLElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUM7UUFFcEQsS0FBSyxNQUFNLElBQUksSUFBSSxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7WUFDOUIsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLGdCQUFnQixDQUFDLGtCQUFrQixDQUN0RCxJQUFJLENBQUMsV0FBVyxFQUNoQjtnQkFDRSxTQUFTLEVBQUUsSUFBSTthQUNoQixFQUNEO2dCQUNFLFFBQVEsRUFBRSxRQUFRLENBQUMsTUFBTSxDQUFDO29CQUN4QixNQUFNLEVBQUUsSUFBSSxDQUFDLGdCQUFnQixDQUFDLFFBQVE7b0JBQ3RDLFNBQVMsRUFBRSxDQUFDLEVBQUUsT0FBTyxFQUFFLDBCQUEwQixFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsQ0FBQztpQkFDckUsQ0FBQzthQUNILENBQ0YsQ0FBQztZQUNGLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQzlCLENBQUM7SUFDSCxDQUFDO0lBRUQ7O09BRUc7SUFDSCxXQUFXO1FBQ1QsSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQztJQUN0RCxDQUFDOytHQTlEVSx1QkFBdUI7bUdBQXZCLHVCQUF1Qix3RUFGdkIsQ0FBQyxFQUFFLE9BQU8sRUFBRSw0QkFBNEIsRUFBRSxXQUFXLEVBQUUsdUJBQXVCLEVBQUUsQ0FBQzs7NEZBRWpGLHVCQUF1QjtrQkFObkMsU0FBUzttQkFBQztvQkFDVCxVQUFVLEVBQUUsSUFBSTtvQkFDaEIsUUFBUSxFQUFFLDJCQUEyQjtvQkFDckMsUUFBUSxFQUFFLHlCQUF5QjtvQkFDbkMsU0FBUyxFQUFFLENBQUMsRUFBRSxPQUFPLEVBQUUsNEJBQTRCLEVBQUUsV0FBVyx5QkFBeUIsRUFBRSxDQUFDO2lCQUM3RiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IMKpIDIwMjQgQW5ndWxhciBQcmltaXRpdmVzLlxuICogaHR0cHM6Ly9naXRodWIuY29tL25nLXByaW1pdGl2ZXMvbmctcHJpbWl0aXZlc1xuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSAyLjAgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuaW1wb3J0IHtcbiAgRGlyZWN0aXZlLFxuICBFbWJlZGRlZFZpZXdSZWYsXG4gIGluamVjdCxcbiAgSW5qZWN0b3IsXG4gIE9uRGVzdHJveSxcbiAgVGVtcGxhdGVSZWYsXG4gIFZpZXdDb250YWluZXJSZWYsXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgaW5qZWN0RGF0ZVBpY2tlcldlZWsgfSBmcm9tICcuLi9kYXRlLXBpY2tlci1yb3ctcmVuZGVyL2RhdGUtcGlja2VyLXJvdy1yZW5kZXIudG9rZW4nO1xuaW1wb3J0IHtcbiAgTmdwRGF0ZVBpY2tlckNlbGxEYXRlVG9rZW4sXG4gIE5ncERhdGVQaWNrZXJDZWxsUmVuZGVyVG9rZW4sXG59IGZyb20gJy4vZGF0ZS1waWNrZXItY2VsbC1yZW5kZXIudG9rZW4nO1xuXG5ARGlyZWN0aXZlKHtcbiAgc3RhbmRhbG9uZTogdHJ1ZSxcbiAgc2VsZWN0b3I6ICdbbmdwRGF0ZVBpY2tlckNlbGxSZW5kZXJdJyxcbiAgZXhwb3J0QXM6ICduZ3BEYXRlUGlja2VyQ2VsbFJlbmRlcicsXG4gIHByb3ZpZGVyczogW3sgcHJvdmlkZTogTmdwRGF0ZVBpY2tlckNlbGxSZW5kZXJUb2tlbiwgdXNlRXhpc3Rpbmc6IE5ncERhdGVQaWNrZXJDZWxsUmVuZGVyIH1dLFxufSlcbmV4cG9ydCBjbGFzcyBOZ3BEYXRlUGlja2VyQ2VsbFJlbmRlcjxUPiBpbXBsZW1lbnRzIE9uRGVzdHJveSB7XG4gIC8qKlxuICAgKiBBY2Nlc3MgdGhlIHRlbXBsYXRlIHJlZiBmb3IgdGhlIGNlbGwuXG4gICAqL1xuICBwcml2YXRlIHJlYWRvbmx5IHRlbXBsYXRlUmVmID0gaW5qZWN0KFRlbXBsYXRlUmVmKTtcblxuICAvKipcbiAgICogQWNjZXNzIHRoZSB2aWV3IGNvbnRhaW5lciByZWYuXG4gICAqL1xuICBwcml2YXRlIHJlYWRvbmx5IHZpZXdDb250YWluZXJSZWYgPSBpbmplY3QoVmlld0NvbnRhaW5lclJlZik7XG5cbiAgLyoqXG4gICAqIEFjY2VzcyB0aGUgZGF0ZXMgaW4gdGhlIHdlZWsuXG4gICAqL1xuICBwcml2YXRlIHJlYWRvbmx5IGRhdGVzID0gaW5qZWN0RGF0ZVBpY2tlcldlZWs8VD4oKTtcblxuICAvKipcbiAgICogU3RvcmUgdGhlIHZpZXcgcmVmcyBmb3IgdGhlIGRhdGVzLlxuICAgKi9cbiAgcHJpdmF0ZSByZWFkb25seSB2aWV3UmVmczogRW1iZWRkZWRWaWV3UmVmPE5ncERhdGVQaWNrZXJDZWxsQ29udGV4dDxUPj5bXSA9IFtdO1xuXG4gIC8vIE1ha2Ugc3VyZSB0aGUgdGVtcGxhdGUgY2hlY2tlciBrbm93cyB0aGUgdHlwZSBvZiB0aGUgY29udGV4dCB3aXRoIHdoaWNoIHRoZVxuICAvLyB0ZW1wbGF0ZSBvZiB0aGlzIGRpcmVjdGl2ZSB3aWxsIGJlIHJlbmRlcmVkXG4gIHN0YXRpYyBuZ1RlbXBsYXRlQ29udGV4dEd1YXJkPFQ+KFxuICAgIF86IE5ncERhdGVQaWNrZXJDZWxsUmVuZGVyPFQ+LFxuICAgIGNvbnRleHQ6IHVua25vd24sXG4gICk6IGNvbnRleHQgaXMgTmdwRGF0ZVBpY2tlckNlbGxDb250ZXh0PFQ+IHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMucmVuZGVyRGF0ZXMoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZW5kZXIgdGhlIGRhdGVzIGluIHRoZSB3ZWVrLlxuICAgKi9cbiAgcHJpdmF0ZSByZW5kZXJEYXRlcygpOiB2b2lkIHtcbiAgICB0aGlzLnZpZXdSZWZzLmZvckVhY2godmlld1JlZiA9PiB2aWV3UmVmLmRlc3Ryb3koKSk7XG5cbiAgICBmb3IgKGNvbnN0IGRhdGUgb2YgdGhpcy5kYXRlcykge1xuICAgICAgY29uc3Qgdmlld1JlZiA9IHRoaXMudmlld0NvbnRhaW5lclJlZi5jcmVhdGVFbWJlZGRlZFZpZXcoXG4gICAgICAgIHRoaXMudGVtcGxhdGVSZWYsXG4gICAgICAgIHtcbiAgICAgICAgICAkaW1wbGljaXQ6IGRhdGUsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBpbmplY3RvcjogSW5qZWN0b3IuY3JlYXRlKHtcbiAgICAgICAgICAgIHBhcmVudDogdGhpcy52aWV3Q29udGFpbmVyUmVmLmluamVjdG9yLFxuICAgICAgICAgICAgcHJvdmlkZXJzOiBbeyBwcm92aWRlOiBOZ3BEYXRlUGlja2VyQ2VsbERhdGVUb2tlbiwgdXNlVmFsdWU6IGRhdGUgfV0sXG4gICAgICAgICAgfSksXG4gICAgICAgIH0sXG4gICAgICApO1xuICAgICAgdGhpcy52aWV3UmVmcy5wdXNoKHZpZXdSZWYpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBEZXN0cm95IHRoZSB2aWV3IHJlZnMuXG4gICAqL1xuICBuZ09uRGVzdHJveSgpOiB2b2lkIHtcbiAgICB0aGlzLnZpZXdSZWZzLmZvckVhY2godmlld1JlZiA9PiB2aWV3UmVmLmRlc3Ryb3koKSk7XG4gIH1cbn1cblxuaW50ZXJmYWNlIE5ncERhdGVQaWNrZXJDZWxsQ29udGV4dDxUPiB7XG4gICRpbXBsaWNpdDogVDtcbn1cbiJdfQ==