/**
 * Copyright © 2024 Angular Primitives.
 * https://github.com/ng-primitives/ng-primitives
 *
 * This source code is licensed under the Apache 2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */
import { computed, Directive, ElementRef, HostListener, inject } from '@angular/core';
import { NgpButton } from 'ng-primitives/button';
import { injectDateAdapter } from 'ng-primitives/date-time';
import { NgpDisabledToken } from 'ng-primitives/internal';
import { injectDatePicker } from '../date-picker/date-picker.token';
import { NgpDatePickerPreviousMonthToken } from './date-picker-previous-month.token';
import * as i0 from "@angular/core";
import * as i1 from "ng-primitives/button";
export class NgpDatePickerPreviousMonth {
    constructor() {
        /**
         * Access the element ref.
         */
        this.elementRef = inject(ElementRef);
        /**
         * Access the date adapter.
         */
        this.dateAdapter = injectDateAdapter();
        /**
         * Access the date picker.
         */
        this.datePicker = injectDatePicker();
        /**
         * Determine if this is a button element
         */
        this.isButton = this.elementRef.nativeElement.tagName.toLowerCase() === 'button';
        /**
         * Determine if the next month is disabled.
         * @internal
         */
        this.disabled = computed(() => {
            if (this.datePicker.disabled()) {
                return true;
            }
            const minDate = this.datePicker.min();
            // if the next month is out of bounds, disable it.
            const firstDay = this.dateAdapter.set(this.dateAdapter.startOfMonth(this.datePicker.focusedDate()), {
                hour: 0,
                minute: 0,
                second: 0,
                millisecond: 0,
            });
            // if there is a min date and it is equal to or after the first day of the month, disable it.
            if (minDate && this.dateAdapter.compare(minDate, firstDay) >= 0) {
                return true;
            }
            return false;
        });
    }
    /**
     * Navigate to the previous month.
     */
    navigateToPreviouMonth() {
        if (this.disabled()) {
            return;
        }
        // move focus to the first day of the previous month.
        let date = this.datePicker.focusedDate();
        date = this.dateAdapter.subtract(date, { months: 1 });
        date = this.dateAdapter.set(date, {
            day: 1,
            hour: 0,
            minute: 0,
            second: 0,
            millisecond: 0,
        });
        this.datePicker.setFocusedDate(date, 'mouse', 'backward');
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: NgpDatePickerPreviousMonth, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "18.2.13", type: NgpDatePickerPreviousMonth, isStandalone: true, selector: "[ngpDatePickerPreviousMonth]", host: { listeners: { "click": "navigateToPreviouMonth()" }, properties: { "attr.data-disabled": "disabled() ? \"\" : null", "attr.aria-disabled": "disabled()", "attr.disabled": "isButton && disabled() ? true : null", "attr.type": "isButton ? \"button\" : null" } }, providers: [
            { provide: NgpDatePickerPreviousMonthToken, useExisting: NgpDatePickerPreviousMonth },
            { provide: NgpDisabledToken, useExisting: NgpDatePickerPreviousMonth },
        ], exportAs: ["ngpDatePickerPreviousMonth"], hostDirectives: [{ directive: i1.NgpButton }], ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: NgpDatePickerPreviousMonth, decorators: [{
            type: Directive,
            args: [{
                    standalone: true,
                    selector: '[ngpDatePickerPreviousMonth]',
                    exportAs: 'ngpDatePickerPreviousMonth',
                    providers: [
                        { provide: NgpDatePickerPreviousMonthToken, useExisting: NgpDatePickerPreviousMonth },
                        { provide: NgpDisabledToken, useExisting: NgpDatePickerPreviousMonth },
                    ],
                    hostDirectives: [NgpButton],
                    host: {
                        '[attr.data-disabled]': 'disabled() ? "" : null',
                        '[attr.aria-disabled]': 'disabled()',
                        '[attr.disabled]': 'isButton && disabled() ? true : null',
                        '[attr.type]': 'isButton ? "button" : null',
                    },
                }]
        }], propDecorators: { navigateToPreviouMonth: [{
                type: HostListener,
                args: ['click']
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0ZS1waWNrZXItcHJldmlvdXMtbW9udGguZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvbmctcHJpbWl0aXZlcy9kYXRlLXBpY2tlci9zcmMvZGF0ZS1waWNrZXItcHJldmlvdXMtbW9udGgvZGF0ZS1waWNrZXItcHJldmlvdXMtbW9udGguZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7R0FNRztBQUNILE9BQU8sRUFBRSxRQUFRLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxZQUFZLEVBQUUsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3RGLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUNqRCxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUM1RCxPQUFPLEVBQWlCLGdCQUFnQixFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDekUsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sa0NBQWtDLENBQUM7QUFDcEUsT0FBTyxFQUFFLCtCQUErQixFQUFFLE1BQU0sb0NBQW9DLENBQUM7OztBQWtCckYsTUFBTSxPQUFPLDBCQUEwQjtJQWhCdkM7UUFpQkU7O1dBRUc7UUFDYyxlQUFVLEdBQUcsTUFBTSxDQUEwQixVQUFVLENBQUMsQ0FBQztRQUUxRTs7V0FFRztRQUNjLGdCQUFXLEdBQUcsaUJBQWlCLEVBQUssQ0FBQztRQUV0RDs7V0FFRztRQUNjLGVBQVUsR0FBRyxnQkFBZ0IsRUFBSyxDQUFDO1FBRXBEOztXQUVHO1FBQ2dCLGFBQVEsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsV0FBVyxFQUFFLEtBQUssUUFBUSxDQUFDO1FBRS9GOzs7V0FHRztRQUNNLGFBQVEsR0FBRyxRQUFRLENBQUMsR0FBRyxFQUFFO1lBQ2hDLElBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQyxRQUFRLEVBQUUsRUFBRSxDQUFDO2dCQUMvQixPQUFPLElBQUksQ0FBQztZQUNkLENBQUM7WUFFRCxNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsRUFBRSxDQUFDO1lBRXRDLGtEQUFrRDtZQUNsRCxNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FDbkMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxFQUM1RDtnQkFDRSxJQUFJLEVBQUUsQ0FBQztnQkFDUCxNQUFNLEVBQUUsQ0FBQztnQkFDVCxNQUFNLEVBQUUsQ0FBQztnQkFDVCxXQUFXLEVBQUUsQ0FBQzthQUNmLENBQ0YsQ0FBQztZQUVGLDZGQUE2RjtZQUM3RixJQUFJLE9BQU8sSUFBSSxJQUFJLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUUsUUFBUSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUM7Z0JBQ2hFLE9BQU8sSUFBSSxDQUFDO1lBQ2QsQ0FBQztZQUVELE9BQU8sS0FBSyxDQUFDO1FBQ2YsQ0FBQyxDQUFDLENBQUM7S0F3Qko7SUF0QkM7O09BRUc7SUFFTyxzQkFBc0I7UUFDOUIsSUFBSSxJQUFJLENBQUMsUUFBUSxFQUFFLEVBQUUsQ0FBQztZQUNwQixPQUFPO1FBQ1QsQ0FBQztRQUVELHFEQUFxRDtRQUNyRCxJQUFJLElBQUksR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBQ3pDLElBQUksR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsRUFBRSxNQUFNLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUN0RCxJQUFJLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFO1lBQ2hDLEdBQUcsRUFBRSxDQUFDO1lBQ04sSUFBSSxFQUFFLENBQUM7WUFDUCxNQUFNLEVBQUUsQ0FBQztZQUNULE1BQU0sRUFBRSxDQUFDO1lBQ1QsV0FBVyxFQUFFLENBQUM7U0FDZixDQUFDLENBQUM7UUFFSCxJQUFJLENBQUMsVUFBVSxDQUFDLGNBQWMsQ0FBQyxJQUFJLEVBQUUsT0FBTyxFQUFFLFVBQVUsQ0FBQyxDQUFDO0lBQzVELENBQUM7K0dBeEVVLDBCQUEwQjttR0FBMUIsMEJBQTBCLHFWQVoxQjtZQUNULEVBQUUsT0FBTyxFQUFFLCtCQUErQixFQUFFLFdBQVcsRUFBRSwwQkFBMEIsRUFBRTtZQUNyRixFQUFFLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxXQUFXLEVBQUUsMEJBQTBCLEVBQUU7U0FDdkU7OzRGQVNVLDBCQUEwQjtrQkFoQnRDLFNBQVM7bUJBQUM7b0JBQ1QsVUFBVSxFQUFFLElBQUk7b0JBQ2hCLFFBQVEsRUFBRSw4QkFBOEI7b0JBQ3hDLFFBQVEsRUFBRSw0QkFBNEI7b0JBQ3RDLFNBQVMsRUFBRTt3QkFDVCxFQUFFLE9BQU8sRUFBRSwrQkFBK0IsRUFBRSxXQUFXLDRCQUE0QixFQUFFO3dCQUNyRixFQUFFLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxXQUFXLDRCQUE0QixFQUFFO3FCQUN2RTtvQkFDRCxjQUFjLEVBQUUsQ0FBQyxTQUFTLENBQUM7b0JBQzNCLElBQUksRUFBRTt3QkFDSixzQkFBc0IsRUFBRSx3QkFBd0I7d0JBQ2hELHNCQUFzQixFQUFFLFlBQVk7d0JBQ3BDLGlCQUFpQixFQUFFLHNDQUFzQzt3QkFDekQsYUFBYSxFQUFFLDRCQUE0QjtxQkFDNUM7aUJBQ0Y7OEJBd0RXLHNCQUFzQjtzQkFEL0IsWUFBWTt1QkFBQyxPQUFPIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgwqkgMjAyNCBBbmd1bGFyIFByaW1pdGl2ZXMuXG4gKiBodHRwczovL2dpdGh1Yi5jb20vbmctcHJpbWl0aXZlcy9uZy1wcmltaXRpdmVzXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIDIuMCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5pbXBvcnQgeyBjb21wdXRlZCwgRGlyZWN0aXZlLCBFbGVtZW50UmVmLCBIb3N0TGlzdGVuZXIsIGluamVjdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTmdwQnV0dG9uIH0gZnJvbSAnbmctcHJpbWl0aXZlcy9idXR0b24nO1xuaW1wb3J0IHsgaW5qZWN0RGF0ZUFkYXB0ZXIgfSBmcm9tICduZy1wcmltaXRpdmVzL2RhdGUtdGltZSc7XG5pbXBvcnQgeyBOZ3BDYW5EaXNhYmxlLCBOZ3BEaXNhYmxlZFRva2VuIH0gZnJvbSAnbmctcHJpbWl0aXZlcy9pbnRlcm5hbCc7XG5pbXBvcnQgeyBpbmplY3REYXRlUGlja2VyIH0gZnJvbSAnLi4vZGF0ZS1waWNrZXIvZGF0ZS1waWNrZXIudG9rZW4nO1xuaW1wb3J0IHsgTmdwRGF0ZVBpY2tlclByZXZpb3VzTW9udGhUb2tlbiB9IGZyb20gJy4vZGF0ZS1waWNrZXItcHJldmlvdXMtbW9udGgudG9rZW4nO1xuXG5ARGlyZWN0aXZlKHtcbiAgc3RhbmRhbG9uZTogdHJ1ZSxcbiAgc2VsZWN0b3I6ICdbbmdwRGF0ZVBpY2tlclByZXZpb3VzTW9udGhdJyxcbiAgZXhwb3J0QXM6ICduZ3BEYXRlUGlja2VyUHJldmlvdXNNb250aCcsXG4gIHByb3ZpZGVyczogW1xuICAgIHsgcHJvdmlkZTogTmdwRGF0ZVBpY2tlclByZXZpb3VzTW9udGhUb2tlbiwgdXNlRXhpc3Rpbmc6IE5ncERhdGVQaWNrZXJQcmV2aW91c01vbnRoIH0sXG4gICAgeyBwcm92aWRlOiBOZ3BEaXNhYmxlZFRva2VuLCB1c2VFeGlzdGluZzogTmdwRGF0ZVBpY2tlclByZXZpb3VzTW9udGggfSxcbiAgXSxcbiAgaG9zdERpcmVjdGl2ZXM6IFtOZ3BCdXR0b25dLFxuICBob3N0OiB7XG4gICAgJ1thdHRyLmRhdGEtZGlzYWJsZWRdJzogJ2Rpc2FibGVkKCkgPyBcIlwiIDogbnVsbCcsXG4gICAgJ1thdHRyLmFyaWEtZGlzYWJsZWRdJzogJ2Rpc2FibGVkKCknLFxuICAgICdbYXR0ci5kaXNhYmxlZF0nOiAnaXNCdXR0b24gJiYgZGlzYWJsZWQoKSA/IHRydWUgOiBudWxsJyxcbiAgICAnW2F0dHIudHlwZV0nOiAnaXNCdXR0b24gPyBcImJ1dHRvblwiIDogbnVsbCcsXG4gIH0sXG59KVxuZXhwb3J0IGNsYXNzIE5ncERhdGVQaWNrZXJQcmV2aW91c01vbnRoPFQ+IGltcGxlbWVudHMgTmdwQ2FuRGlzYWJsZSB7XG4gIC8qKlxuICAgKiBBY2Nlc3MgdGhlIGVsZW1lbnQgcmVmLlxuICAgKi9cbiAgcHJpdmF0ZSByZWFkb25seSBlbGVtZW50UmVmID0gaW5qZWN0PEVsZW1lbnRSZWY8SFRNTEVsZW1lbnQ+PihFbGVtZW50UmVmKTtcblxuICAvKipcbiAgICogQWNjZXNzIHRoZSBkYXRlIGFkYXB0ZXIuXG4gICAqL1xuICBwcml2YXRlIHJlYWRvbmx5IGRhdGVBZGFwdGVyID0gaW5qZWN0RGF0ZUFkYXB0ZXI8VD4oKTtcblxuICAvKipcbiAgICogQWNjZXNzIHRoZSBkYXRlIHBpY2tlci5cbiAgICovXG4gIHByaXZhdGUgcmVhZG9ubHkgZGF0ZVBpY2tlciA9IGluamVjdERhdGVQaWNrZXI8VD4oKTtcblxuICAvKipcbiAgICogRGV0ZXJtaW5lIGlmIHRoaXMgaXMgYSBidXR0b24gZWxlbWVudFxuICAgKi9cbiAgcHJvdGVjdGVkIHJlYWRvbmx5IGlzQnV0dG9uID0gdGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQudGFnTmFtZS50b0xvd2VyQ2FzZSgpID09PSAnYnV0dG9uJztcblxuICAvKipcbiAgICogRGV0ZXJtaW5lIGlmIHRoZSBuZXh0IG1vbnRoIGlzIGRpc2FibGVkLlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIHJlYWRvbmx5IGRpc2FibGVkID0gY29tcHV0ZWQoKCkgPT4ge1xuICAgIGlmICh0aGlzLmRhdGVQaWNrZXIuZGlzYWJsZWQoKSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgY29uc3QgbWluRGF0ZSA9IHRoaXMuZGF0ZVBpY2tlci5taW4oKTtcblxuICAgIC8vIGlmIHRoZSBuZXh0IG1vbnRoIGlzIG91dCBvZiBib3VuZHMsIGRpc2FibGUgaXQuXG4gICAgY29uc3QgZmlyc3REYXkgPSB0aGlzLmRhdGVBZGFwdGVyLnNldChcbiAgICAgIHRoaXMuZGF0ZUFkYXB0ZXIuc3RhcnRPZk1vbnRoKHRoaXMuZGF0ZVBpY2tlci5mb2N1c2VkRGF0ZSgpKSxcbiAgICAgIHtcbiAgICAgICAgaG91cjogMCxcbiAgICAgICAgbWludXRlOiAwLFxuICAgICAgICBzZWNvbmQ6IDAsXG4gICAgICAgIG1pbGxpc2Vjb25kOiAwLFxuICAgICAgfSxcbiAgICApO1xuXG4gICAgLy8gaWYgdGhlcmUgaXMgYSBtaW4gZGF0ZSBhbmQgaXQgaXMgZXF1YWwgdG8gb3IgYWZ0ZXIgdGhlIGZpcnN0IGRheSBvZiB0aGUgbW9udGgsIGRpc2FibGUgaXQuXG4gICAgaWYgKG1pbkRhdGUgJiYgdGhpcy5kYXRlQWRhcHRlci5jb21wYXJlKG1pbkRhdGUsIGZpcnN0RGF5KSA+PSAwKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH0pO1xuXG4gIC8qKlxuICAgKiBOYXZpZ2F0ZSB0byB0aGUgcHJldmlvdXMgbW9udGguXG4gICAqL1xuICBASG9zdExpc3RlbmVyKCdjbGljaycpXG4gIHByb3RlY3RlZCBuYXZpZ2F0ZVRvUHJldmlvdU1vbnRoKCk6IHZvaWQge1xuICAgIGlmICh0aGlzLmRpc2FibGVkKCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBtb3ZlIGZvY3VzIHRvIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHByZXZpb3VzIG1vbnRoLlxuICAgIGxldCBkYXRlID0gdGhpcy5kYXRlUGlja2VyLmZvY3VzZWREYXRlKCk7XG4gICAgZGF0ZSA9IHRoaXMuZGF0ZUFkYXB0ZXIuc3VidHJhY3QoZGF0ZSwgeyBtb250aHM6IDEgfSk7XG4gICAgZGF0ZSA9IHRoaXMuZGF0ZUFkYXB0ZXIuc2V0KGRhdGUsIHtcbiAgICAgIGRheTogMSxcbiAgICAgIGhvdXI6IDAsXG4gICAgICBtaW51dGU6IDAsXG4gICAgICBzZWNvbmQ6IDAsXG4gICAgICBtaWxsaXNlY29uZDogMCxcbiAgICB9KTtcblxuICAgIHRoaXMuZGF0ZVBpY2tlci5zZXRGb2N1c2VkRGF0ZShkYXRlLCAnbW91c2UnLCAnYmFja3dhcmQnKTtcbiAgfVxufVxuIl19