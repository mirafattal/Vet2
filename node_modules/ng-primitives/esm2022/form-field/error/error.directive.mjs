/**
 * Copyright © 2024 Angular Primitives.
 * https://github.com/ng-primitives/ng-primitives
 *
 * This source code is licensed under the Apache 2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */
import { Directive, computed, input } from '@angular/core';
import { onBooleanChange, uniqueId } from 'ng-primitives/utils';
import { injectFormField } from '../form-field/form-field.token';
import { NgpErrorToken } from './error.token';
import * as i0 from "@angular/core";
export class NgpError {
    constructor() {
        /**
         * Access the form field that the description is associated with.
         */
        this.formField = injectFormField();
        /**
         * The id of the error message. If not provided, a unique id will be generated.
         */
        this.id = input(uniqueId('ngp-error'));
        /**
         * The validator associated with the error message.
         */
        this.validator = input(null, {
            alias: 'ngpErrorValidator',
        });
        /**
         * Determine if there is an error message.
         */
        this.hasError = computed(() => {
            const errors = this.formField?.errors() ?? [];
            const validator = this.validator();
            return validator ? errors?.includes(validator) : errors?.length > 0;
        });
        /**
         * Determine whether the validator associated with this error is failing.
         */
        this.state = computed(() => (this.hasError() ? 'fail' : 'pass'));
        // add or remove the error message when the error state changes
        onBooleanChange(this.hasError, () => this.formField?.addDescription(this.id()), () => this.formField?.removeDescription(this.id()));
    }
    ngOnChanges(changes) {
        if ('id' in changes) {
            this.formField?.removeDescription(changes['id'].previousValue);
        }
    }
    ngOnDestroy() {
        this.formField?.removeDescription(this.id());
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: NgpError, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "17.1.0", version: "18.2.13", type: NgpError, isStandalone: true, selector: "[ngpError]", inputs: { id: { classPropertyName: "id", publicName: "id", isSignal: true, isRequired: false, transformFunction: null }, validator: { classPropertyName: "validator", publicName: "ngpErrorValidator", isSignal: true, isRequired: false, transformFunction: null } }, host: { properties: { "attr.id": "id()", "attr.data-invalid": "formField?.invalid() ? \"\" : null", "attr.data-valid": "formField?.valid() ? \"\" : null", "attr.data-touched": "formField?.touched() ? \"\" : null", "attr.data-pristine": "formField?.pristine() ? \"\" : null", "attr.data-dirty": "formField?.dirty() ? \"\" : null", "attr.data-pending": "formField?.pending() ? \"\" : null", "attr.data-disabled": "formField?.disabled() ? \"\" : null", "attr.data-validator": "state()" } }, providers: [{ provide: NgpErrorToken, useExisting: NgpError }], exportAs: ["ngpError"], usesOnChanges: true, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: NgpError, decorators: [{
            type: Directive,
            args: [{
                    standalone: true,
                    selector: '[ngpError]',
                    exportAs: 'ngpError',
                    providers: [{ provide: NgpErrorToken, useExisting: NgpError }],
                    host: {
                        '[attr.id]': 'id()',
                        '[attr.data-invalid]': 'formField?.invalid() ? "" : null',
                        '[attr.data-valid]': 'formField?.valid() ? "" : null',
                        '[attr.data-touched]': 'formField?.touched() ? "" : null',
                        '[attr.data-pristine]': 'formField?.pristine() ? "" : null',
                        '[attr.data-dirty]': 'formField?.dirty() ? "" : null',
                        '[attr.data-pending]': 'formField?.pending() ? "" : null',
                        '[attr.data-disabled]': 'formField?.disabled() ? "" : null',
                        '[attr.data-validator]': 'state()',
                    },
                }]
        }], ctorParameters: () => [] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXJyb3IuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvbmctcHJpbWl0aXZlcy9mb3JtLWZpZWxkL3NyYy9lcnJvci9lcnJvci5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztHQU1HO0FBQ0gsT0FBTyxFQUFFLFNBQVMsRUFBdUMsUUFBUSxFQUFFLEtBQUssRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNoRyxPQUFPLEVBQUUsZUFBZSxFQUFFLFFBQVEsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ2hFLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQUNqRSxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sZUFBZSxDQUFDOztBQW1COUMsTUFBTSxPQUFPLFFBQVE7SUFpQ25CO1FBaENBOztXQUVHO1FBQ2dCLGNBQVMsR0FBRyxlQUFlLEVBQUUsQ0FBQztRQUVqRDs7V0FFRztRQUNNLE9BQUUsR0FBRyxLQUFLLENBQVMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUM7UUFFbkQ7O1dBRUc7UUFDTSxjQUFTLEdBQUcsS0FBSyxDQUFnQixJQUFJLEVBQUU7WUFDOUMsS0FBSyxFQUFFLG1CQUFtQjtTQUMzQixDQUFDLENBQUM7UUFFSDs7V0FFRztRQUNnQixhQUFRLEdBQUcsUUFBUSxDQUFDLEdBQUcsRUFBRTtZQUMxQyxNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsU0FBUyxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsQ0FBQztZQUM5QyxNQUFNLFNBQVMsR0FBRyxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUM7WUFFbkMsT0FBTyxTQUFTLENBQUMsQ0FBQyxDQUFDLE1BQU0sRUFBRSxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sRUFBRSxNQUFNLEdBQUcsQ0FBQyxDQUFDO1FBQ3RFLENBQUMsQ0FBQyxDQUFDO1FBRUg7O1dBRUc7UUFDZ0IsVUFBSyxHQUFHLFFBQVEsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO1FBRzdFLCtEQUErRDtRQUMvRCxlQUFlLENBQ2IsSUFBSSxDQUFDLFFBQVEsRUFDYixHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLGNBQWMsQ0FBQyxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsRUFDL0MsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FDbkQsQ0FBQztJQUNKLENBQUM7SUFFRCxXQUFXLENBQUMsT0FBc0I7UUFDaEMsSUFBSSxJQUFJLElBQUksT0FBTyxFQUFFLENBQUM7WUFDcEIsSUFBSSxDQUFDLFNBQVMsRUFBRSxpQkFBaUIsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsYUFBYSxDQUFDLENBQUM7UUFDakUsQ0FBQztJQUNILENBQUM7SUFFRCxXQUFXO1FBQ1QsSUFBSSxDQUFDLFNBQVMsRUFBRSxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztJQUMvQyxDQUFDOytHQWxEVSxRQUFRO21HQUFSLFFBQVEsd3lCQWJSLENBQUMsRUFBRSxPQUFPLEVBQUUsYUFBYSxFQUFFLFdBQVcsRUFBRSxRQUFRLEVBQUUsQ0FBQzs7NEZBYW5ELFFBQVE7a0JBakJwQixTQUFTO21CQUFDO29CQUNULFVBQVUsRUFBRSxJQUFJO29CQUNoQixRQUFRLEVBQUUsWUFBWTtvQkFDdEIsUUFBUSxFQUFFLFVBQVU7b0JBQ3BCLFNBQVMsRUFBRSxDQUFDLEVBQUUsT0FBTyxFQUFFLGFBQWEsRUFBRSxXQUFXLFVBQVUsRUFBRSxDQUFDO29CQUM5RCxJQUFJLEVBQUU7d0JBQ0osV0FBVyxFQUFFLE1BQU07d0JBQ25CLHFCQUFxQixFQUFFLGtDQUFrQzt3QkFDekQsbUJBQW1CLEVBQUUsZ0NBQWdDO3dCQUNyRCxxQkFBcUIsRUFBRSxrQ0FBa0M7d0JBQ3pELHNCQUFzQixFQUFFLG1DQUFtQzt3QkFDM0QsbUJBQW1CLEVBQUUsZ0NBQWdDO3dCQUNyRCxxQkFBcUIsRUFBRSxrQ0FBa0M7d0JBQ3pELHNCQUFzQixFQUFFLG1DQUFtQzt3QkFDM0QsdUJBQXVCLEVBQUUsU0FBUztxQkFDbkM7aUJBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCDCqSAyMDI0IEFuZ3VsYXIgUHJpbWl0aXZlcy5cbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9uZy1wcmltaXRpdmVzL25nLXByaW1pdGl2ZXNcbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgMi4wIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbmltcG9ydCB7IERpcmVjdGl2ZSwgT25DaGFuZ2VzLCBPbkRlc3Ryb3ksIFNpbXBsZUNoYW5nZXMsIGNvbXB1dGVkLCBpbnB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgb25Cb29sZWFuQ2hhbmdlLCB1bmlxdWVJZCB9IGZyb20gJ25nLXByaW1pdGl2ZXMvdXRpbHMnO1xuaW1wb3J0IHsgaW5qZWN0Rm9ybUZpZWxkIH0gZnJvbSAnLi4vZm9ybS1maWVsZC9mb3JtLWZpZWxkLnRva2VuJztcbmltcG9ydCB7IE5ncEVycm9yVG9rZW4gfSBmcm9tICcuL2Vycm9yLnRva2VuJztcblxuQERpcmVjdGl2ZSh7XG4gIHN0YW5kYWxvbmU6IHRydWUsXG4gIHNlbGVjdG9yOiAnW25ncEVycm9yXScsXG4gIGV4cG9ydEFzOiAnbmdwRXJyb3InLFxuICBwcm92aWRlcnM6IFt7IHByb3ZpZGU6IE5ncEVycm9yVG9rZW4sIHVzZUV4aXN0aW5nOiBOZ3BFcnJvciB9XSxcbiAgaG9zdDoge1xuICAgICdbYXR0ci5pZF0nOiAnaWQoKScsXG4gICAgJ1thdHRyLmRhdGEtaW52YWxpZF0nOiAnZm9ybUZpZWxkPy5pbnZhbGlkKCkgPyBcIlwiIDogbnVsbCcsXG4gICAgJ1thdHRyLmRhdGEtdmFsaWRdJzogJ2Zvcm1GaWVsZD8udmFsaWQoKSA/IFwiXCIgOiBudWxsJyxcbiAgICAnW2F0dHIuZGF0YS10b3VjaGVkXSc6ICdmb3JtRmllbGQ/LnRvdWNoZWQoKSA/IFwiXCIgOiBudWxsJyxcbiAgICAnW2F0dHIuZGF0YS1wcmlzdGluZV0nOiAnZm9ybUZpZWxkPy5wcmlzdGluZSgpID8gXCJcIiA6IG51bGwnLFxuICAgICdbYXR0ci5kYXRhLWRpcnR5XSc6ICdmb3JtRmllbGQ/LmRpcnR5KCkgPyBcIlwiIDogbnVsbCcsXG4gICAgJ1thdHRyLmRhdGEtcGVuZGluZ10nOiAnZm9ybUZpZWxkPy5wZW5kaW5nKCkgPyBcIlwiIDogbnVsbCcsXG4gICAgJ1thdHRyLmRhdGEtZGlzYWJsZWRdJzogJ2Zvcm1GaWVsZD8uZGlzYWJsZWQoKSA/IFwiXCIgOiBudWxsJyxcbiAgICAnW2F0dHIuZGF0YS12YWxpZGF0b3JdJzogJ3N0YXRlKCknLFxuICB9LFxufSlcbmV4cG9ydCBjbGFzcyBOZ3BFcnJvciBpbXBsZW1lbnRzIE9uQ2hhbmdlcywgT25EZXN0cm95IHtcbiAgLyoqXG4gICAqIEFjY2VzcyB0aGUgZm9ybSBmaWVsZCB0aGF0IHRoZSBkZXNjcmlwdGlvbiBpcyBhc3NvY2lhdGVkIHdpdGguXG4gICAqL1xuICBwcm90ZWN0ZWQgcmVhZG9ubHkgZm9ybUZpZWxkID0gaW5qZWN0Rm9ybUZpZWxkKCk7XG5cbiAgLyoqXG4gICAqIFRoZSBpZCBvZiB0aGUgZXJyb3IgbWVzc2FnZS4gSWYgbm90IHByb3ZpZGVkLCBhIHVuaXF1ZSBpZCB3aWxsIGJlIGdlbmVyYXRlZC5cbiAgICovXG4gIHJlYWRvbmx5IGlkID0gaW5wdXQ8c3RyaW5nPih1bmlxdWVJZCgnbmdwLWVycm9yJykpO1xuXG4gIC8qKlxuICAgKiBUaGUgdmFsaWRhdG9yIGFzc29jaWF0ZWQgd2l0aCB0aGUgZXJyb3IgbWVzc2FnZS5cbiAgICovXG4gIHJlYWRvbmx5IHZhbGlkYXRvciA9IGlucHV0PHN0cmluZyB8IG51bGw+KG51bGwsIHtcbiAgICBhbGlhczogJ25ncEVycm9yVmFsaWRhdG9yJyxcbiAgfSk7XG5cbiAgLyoqXG4gICAqIERldGVybWluZSBpZiB0aGVyZSBpcyBhbiBlcnJvciBtZXNzYWdlLlxuICAgKi9cbiAgcHJvdGVjdGVkIHJlYWRvbmx5IGhhc0Vycm9yID0gY29tcHV0ZWQoKCkgPT4ge1xuICAgIGNvbnN0IGVycm9ycyA9IHRoaXMuZm9ybUZpZWxkPy5lcnJvcnMoKSA/PyBbXTtcbiAgICBjb25zdCB2YWxpZGF0b3IgPSB0aGlzLnZhbGlkYXRvcigpO1xuXG4gICAgcmV0dXJuIHZhbGlkYXRvciA/IGVycm9ycz8uaW5jbHVkZXModmFsaWRhdG9yKSA6IGVycm9ycz8ubGVuZ3RoID4gMDtcbiAgfSk7XG5cbiAgLyoqXG4gICAqIERldGVybWluZSB3aGV0aGVyIHRoZSB2YWxpZGF0b3IgYXNzb2NpYXRlZCB3aXRoIHRoaXMgZXJyb3IgaXMgZmFpbGluZy5cbiAgICovXG4gIHByb3RlY3RlZCByZWFkb25seSBzdGF0ZSA9IGNvbXB1dGVkKCgpID0+ICh0aGlzLmhhc0Vycm9yKCkgPyAnZmFpbCcgOiAncGFzcycpKTtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICAvLyBhZGQgb3IgcmVtb3ZlIHRoZSBlcnJvciBtZXNzYWdlIHdoZW4gdGhlIGVycm9yIHN0YXRlIGNoYW5nZXNcbiAgICBvbkJvb2xlYW5DaGFuZ2UoXG4gICAgICB0aGlzLmhhc0Vycm9yLFxuICAgICAgKCkgPT4gdGhpcy5mb3JtRmllbGQ/LmFkZERlc2NyaXB0aW9uKHRoaXMuaWQoKSksXG4gICAgICAoKSA9PiB0aGlzLmZvcm1GaWVsZD8ucmVtb3ZlRGVzY3JpcHRpb24odGhpcy5pZCgpKSxcbiAgICApO1xuICB9XG5cbiAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcyk6IHZvaWQge1xuICAgIGlmICgnaWQnIGluIGNoYW5nZXMpIHtcbiAgICAgIHRoaXMuZm9ybUZpZWxkPy5yZW1vdmVEZXNjcmlwdGlvbihjaGFuZ2VzWydpZCddLnByZXZpb3VzVmFsdWUpO1xuICAgIH1cbiAgfVxuXG4gIG5nT25EZXN0cm95KCk6IHZvaWQge1xuICAgIHRoaXMuZm9ybUZpZWxkPy5yZW1vdmVEZXNjcmlwdGlvbih0aGlzLmlkKCkpO1xuICB9XG59XG4iXX0=