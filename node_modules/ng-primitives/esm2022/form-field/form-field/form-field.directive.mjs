/**
 * Copyright © 2024 Angular Primitives.
 * https://github.com/ng-primitives/ng-primitives
 *
 * This source code is licensed under the Apache 2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */
import { Directive, contentChild, signal } from '@angular/core';
import { NgControl } from '@angular/forms';
import { onChange } from 'ng-primitives/utils';
import { NgpFormFieldToken } from './form-field.token';
import * as i0 from "@angular/core";
export class NgpFormField {
    constructor() {
        /**
         * Store the form label.
         * @internal
         */
        this.labels = signal([]);
        /**
         * Store the form descriptions.
         * @internal
         */
        this.descriptions = signal([]);
        /**
         * Store the id of the associated form control.
         * @internal
         */
        this.formControl = signal(null);
        /**
         * Find any NgControl within the form field.
         * @internal
         */
        this.ngControl = contentChild(NgControl);
        /**
         * Store the validation error messages.
         * @internal
         */
        this.errors = signal([]);
        /**
         * Whether the control is pristine.
         * @internal
         */
        this.pristine = signal(null);
        /**
         * Whether the control is touched.
         * @internal
         */
        this.touched = signal(null);
        /**
         * Whether the control is dirty.
         * @internal
         */
        this.dirty = signal(null);
        /**
         * Whether the control is valid.
         */
        this.valid = signal(null);
        /**
         * Whether the control is invalid.
         * @internal
         */
        this.invalid = signal(null);
        /**
         * Whether the control is pending.
         * @internal
         */
        this.pending = signal(null);
        /**
         * Whether the control is disabled.
         * @internal
         */
        this.disabled = signal(null);
        // any time the ngControl changes, setup the subscriptions.
        onChange(this.ngControl, this.setupSubscriptions.bind(this));
    }
    ngOnDestroy() {
        this.subscription?.unsubscribe();
    }
    /**
     * Setup a listener for the form control status.
     * @param control
     */
    setupSubscriptions(control) {
        // Unsubscribe from the previous subscriptions.
        this.subscription?.unsubscribe();
        // set the initial values
        this.updateStatus();
        // Listen for changes to the form control.
        this.subscription = control?.valueChanges?.subscribe(this.updateStatus.bind(this));
    }
    updateStatus() {
        const control = this.ngControl();
        if (!control) {
            return;
        }
        this.pristine.set(control.pristine);
        this.touched.set(control.touched);
        this.dirty.set(control.dirty);
        this.valid.set(control.valid);
        this.invalid.set(control.invalid);
        this.pending.set(control.pending);
        this.disabled.set(control.disabled);
        this.errors.set(control?.errors ? Object.keys(control.errors) : []);
    }
    /**
     * Register the id of the associated form control.
     * @param id
     * @internal
     */
    setFormControl(id) {
        this.formControl.set(id);
    }
    /**
     * Register a label with the form field.
     * @param label
     * @internal
     */
    addLabel(label) {
        this.labels.update(labels => [...labels, label]);
    }
    /**
     * Register a description with the form field.
     * @param description
     * @internal
     */
    addDescription(description) {
        this.descriptions.update(descriptions => [...descriptions, description]);
    }
    /**
     * Remove the associated form control.
     * @internal
     */
    removeFormControl() {
        this.formControl.set(null);
    }
    /**
     * Remove a label from the form field.
     * @param label
     * @internal
     */
    removeLabel(label) {
        this.labels.update(labels => labels.filter(l => l !== label));
    }
    /**
     * Remove a description from the form field.
     * @param description
     * @internal
     */
    removeDescription(description) {
        this.descriptions.update(descriptions => descriptions.filter(d => d !== description));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: NgpFormField, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "17.2.0", version: "18.2.13", type: NgpFormField, isStandalone: true, selector: "[ngpFormField]", host: { properties: { "attr.data-invalid": "invalid() ? \"\" : null", "attr.data-valid": "valid() ? \"\" : null", "attr.data-touched": "touched() ? \"\" : null", "attr.data-pristine": "pristine() ? \"\" : null", "attr.data-dirty": "dirty() ? \"\" : null", "attr.data-pending": "pending() ? \"\" : null", "attr.data-disabled": "disabled() ? \"\" : null" } }, providers: [{ provide: NgpFormFieldToken, useExisting: NgpFormField }], queries: [{ propertyName: "ngControl", first: true, predicate: NgControl, descendants: true, isSignal: true }], exportAs: ["ngpFormField"], ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: NgpFormField, decorators: [{
            type: Directive,
            args: [{
                    standalone: true,
                    selector: '[ngpFormField]',
                    exportAs: 'ngpFormField',
                    providers: [{ provide: NgpFormFieldToken, useExisting: NgpFormField }],
                    host: {
                        '[attr.data-invalid]': 'invalid() ? "" : null',
                        '[attr.data-valid]': 'valid() ? "" : null',
                        '[attr.data-touched]': 'touched() ? "" : null',
                        '[attr.data-pristine]': 'pristine() ? "" : null',
                        '[attr.data-dirty]': 'dirty() ? "" : null',
                        '[attr.data-pending]': 'pending() ? "" : null',
                        '[attr.data-disabled]': 'disabled() ? "" : null',
                    },
                }]
        }], ctorParameters: () => [] });
//# sourceMappingURL=data:application/json;base64,