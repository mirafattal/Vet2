/**
 * Copyright © 2024 Angular Primitives.
 * https://github.com/ng-primitives/ng-primitives
 *
 * This source code is licensed under the Apache 2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */
import { Directive, ElementRef, HostListener, computed, effect, inject, input, } from '@angular/core';
import { uniqueId } from 'ng-primitives/utils';
import { injectFormField } from '../form-field/form-field.token';
import { NgpLabelToken } from './label.token';
import * as i0 from "@angular/core";
export class NgpLabel {
    constructor() {
        /**
         * Access the element that the label is associated with.
         */
        this.elementRef = inject(ElementRef);
        /**
         * Access the form field that the label is associated with.
         */
        this.formField = injectFormField();
        /**
         * The id of the label. If not provided, a unique id will be generated.
         */
        this.id = input(uniqueId('ngp-label'));
        /**
         * Determine if the label is an HTML label element.
         */
        this.isLabel = this.elementRef.nativeElement instanceof HTMLLabelElement;
        /**
         * Derive the for attribute value if the label is an HTML label element.
         */
        this.htmlFor = computed(() => this.formField?.formControl());
        effect(onCleanup => {
            this.formField?.addLabel(this.id());
            onCleanup(() => this.formField?.removeLabel(this.id()));
        }, { allowSignalWrites: true });
    }
    onClick(event) {
        // by default a label will perform a click on the associated form control, however
        // this only works if the associated form control is an input element which may not always
        // be the case, so we prevent the default behavior and handle the click event ourselves.
        // This was inspired by the HeadlessUI approach:
        // https://github.com/tailwindlabs/headlessui/blob/main/packages/%40headlessui-react/src/components/label/label.tsx#L58
        if (this.isLabel) {
            event.preventDefault();
        }
        // to find the associated form control we can lookup via the known id
        const targetId = this.htmlFor();
        if (!targetId) {
            return;
        }
        const target = document.getElementById(targetId);
        if (!target) {
            return;
        }
        // if the target is disabled then do nothing
        const disabled = target.getAttribute('disabled');
        const ariaDisabled = target.getAttribute('aria-disabled');
        if (disabled === '' || disabled === 'true' || ariaDisabled === 'true') {
            return;
        }
        // radio buttons, checkboxes and switches should all be clicked immediately as they require state changes
        if ((target instanceof HTMLInputElement &&
            (target.type === 'radio' || target.type === 'checkbox')) ||
            target.role === 'radio' ||
            target.role === 'checkbox' ||
            target.role === 'switch') {
            target.click();
        }
        // Move focus to the element, this allows you to start using keyboard shortcuts since the
        // bound element is now focused.
        target.focus({ preventScroll: true });
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: NgpLabel, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "17.1.0", version: "18.2.13", type: NgpLabel, isStandalone: true, selector: "[ngpLabel]", inputs: { id: { classPropertyName: "id", publicName: "id", isSignal: true, isRequired: false, transformFunction: null } }, host: { listeners: { "click": "onClick($event)" }, properties: { "attr.id": "id()", "attr.for": "htmlFor()", "attr.data-invalid": "formField?.invalid() ? \"\" : null", "attr.data-valid": "formField?.valid() ? \"\" : null", "attr.data-touched": "formField?.touched() ? \"\" : null", "attr.data-pristine": "formField?.pristine() ? \"\" : null", "attr.data-dirty": "formField?.dirty() ? \"\" : null", "attr.data-pending": "formField?.pending() ? \"\" : null", "attr.data-disabled": "formField?.disabled() ? \"\" : null" } }, providers: [{ provide: NgpLabelToken, useExisting: NgpLabel }], exportAs: ["ngpLabel"], ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: NgpLabel, decorators: [{
            type: Directive,
            args: [{
                    standalone: true,
                    selector: '[ngpLabel]',
                    exportAs: 'ngpLabel',
                    providers: [{ provide: NgpLabelToken, useExisting: NgpLabel }],
                    host: {
                        '[attr.id]': 'id()',
                        '[attr.for]': 'htmlFor()',
                        '[attr.data-invalid]': 'formField?.invalid() ? "" : null',
                        '[attr.data-valid]': 'formField?.valid() ? "" : null',
                        '[attr.data-touched]': 'formField?.touched() ? "" : null',
                        '[attr.data-pristine]': 'formField?.pristine() ? "" : null',
                        '[attr.data-dirty]': 'formField?.dirty() ? "" : null',
                        '[attr.data-pending]': 'formField?.pending() ? "" : null',
                        '[attr.data-disabled]': 'formField?.disabled() ? "" : null',
                    },
                }]
        }], ctorParameters: () => [], propDecorators: { onClick: [{
                type: HostListener,
                args: ['click', ['$event']]
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGFiZWwuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvbmctcHJpbWl0aXZlcy9mb3JtLWZpZWxkL3NyYy9sYWJlbC9sYWJlbC5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztHQU1HO0FBQ0gsT0FBTyxFQUNMLFNBQVMsRUFDVCxVQUFVLEVBQ1YsWUFBWSxFQUNaLFFBQVEsRUFDUixNQUFNLEVBQ04sTUFBTSxFQUNOLEtBQUssR0FDTixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDL0MsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBQ2pFLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxlQUFlLENBQUM7O0FBbUI5QyxNQUFNLE9BQU8sUUFBUTtJQTBCbkI7UUF6QkE7O1dBRUc7UUFDYyxlQUFVLEdBQUcsTUFBTSxDQUEwQixVQUFVLENBQUMsQ0FBQztRQUUxRTs7V0FFRztRQUNnQixjQUFTLEdBQUcsZUFBZSxFQUFFLENBQUM7UUFFakQ7O1dBRUc7UUFDTSxPQUFFLEdBQUcsS0FBSyxDQUFTLFFBQVEsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDO1FBRW5EOztXQUVHO1FBQ2dCLFlBQU8sR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsWUFBWSxnQkFBZ0IsQ0FBQztRQUV2Rjs7V0FFRztRQUNnQixZQUFPLEdBQUcsUUFBUSxDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsV0FBVyxFQUFFLENBQUMsQ0FBQztRQUd6RSxNQUFNLENBQ0osU0FBUyxDQUFDLEVBQUU7WUFDVixJQUFJLENBQUMsU0FBUyxFQUFFLFFBQVEsQ0FBQyxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztZQUNwQyxTQUFTLENBQUMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxXQUFXLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUMxRCxDQUFDLEVBQ0QsRUFBRSxpQkFBaUIsRUFBRSxJQUFJLEVBQUUsQ0FDNUIsQ0FBQztJQUNKLENBQUM7SUFHUyxPQUFPLENBQUMsS0FBaUI7UUFDakMsa0ZBQWtGO1FBQ2xGLDBGQUEwRjtRQUMxRix3RkFBd0Y7UUFDeEYsZ0RBQWdEO1FBQ2hELHVIQUF1SDtRQUN2SCxJQUFJLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQztZQUNqQixLQUFLLENBQUMsY0FBYyxFQUFFLENBQUM7UUFDekIsQ0FBQztRQUVELHFFQUFxRTtRQUNyRSxNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUM7UUFFaEMsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDO1lBQ2QsT0FBTztRQUNULENBQUM7UUFFRCxNQUFNLE1BQU0sR0FBRyxRQUFRLENBQUMsY0FBYyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBRWpELElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQztZQUNaLE9BQU87UUFDVCxDQUFDO1FBRUQsNENBQTRDO1FBQzVDLE1BQU0sUUFBUSxHQUFHLE1BQU0sQ0FBQyxZQUFZLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDakQsTUFBTSxZQUFZLEdBQUcsTUFBTSxDQUFDLFlBQVksQ0FBQyxlQUFlLENBQUMsQ0FBQztRQUUxRCxJQUFJLFFBQVEsS0FBSyxFQUFFLElBQUksUUFBUSxLQUFLLE1BQU0sSUFBSSxZQUFZLEtBQUssTUFBTSxFQUFFLENBQUM7WUFDdEUsT0FBTztRQUNULENBQUM7UUFFRCx5R0FBeUc7UUFDekcsSUFDRSxDQUFDLE1BQU0sWUFBWSxnQkFBZ0I7WUFDakMsQ0FBQyxNQUFNLENBQUMsSUFBSSxLQUFLLE9BQU8sSUFBSSxNQUFNLENBQUMsSUFBSSxLQUFLLFVBQVUsQ0FBQyxDQUFDO1lBQzFELE1BQU0sQ0FBQyxJQUFJLEtBQUssT0FBTztZQUN2QixNQUFNLENBQUMsSUFBSSxLQUFLLFVBQVU7WUFDMUIsTUFBTSxDQUFDLElBQUksS0FBSyxRQUFRLEVBQ3hCLENBQUM7WUFDRCxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUM7UUFDakIsQ0FBQztRQUVELHlGQUF5RjtRQUN6RixnQ0FBZ0M7UUFDaEMsTUFBTSxDQUFDLEtBQUssQ0FBQyxFQUFFLGFBQWEsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO0lBQ3hDLENBQUM7K0dBbEZVLFFBQVE7bUdBQVIsUUFBUSw4ckJBYlIsQ0FBQyxFQUFFLE9BQU8sRUFBRSxhQUFhLEVBQUUsV0FBVyxFQUFFLFFBQVEsRUFBRSxDQUFDOzs0RkFhbkQsUUFBUTtrQkFqQnBCLFNBQVM7bUJBQUM7b0JBQ1QsVUFBVSxFQUFFLElBQUk7b0JBQ2hCLFFBQVEsRUFBRSxZQUFZO29CQUN0QixRQUFRLEVBQUUsVUFBVTtvQkFDcEIsU0FBUyxFQUFFLENBQUMsRUFBRSxPQUFPLEVBQUUsYUFBYSxFQUFFLFdBQVcsVUFBVSxFQUFFLENBQUM7b0JBQzlELElBQUksRUFBRTt3QkFDSixXQUFXLEVBQUUsTUFBTTt3QkFDbkIsWUFBWSxFQUFFLFdBQVc7d0JBQ3pCLHFCQUFxQixFQUFFLGtDQUFrQzt3QkFDekQsbUJBQW1CLEVBQUUsZ0NBQWdDO3dCQUNyRCxxQkFBcUIsRUFBRSxrQ0FBa0M7d0JBQ3pELHNCQUFzQixFQUFFLG1DQUFtQzt3QkFDM0QsbUJBQW1CLEVBQUUsZ0NBQWdDO3dCQUNyRCxxQkFBcUIsRUFBRSxrQ0FBa0M7d0JBQ3pELHNCQUFzQixFQUFFLG1DQUFtQztxQkFDNUQ7aUJBQ0Y7d0RBc0NXLE9BQU87c0JBRGhCLFlBQVk7dUJBQUMsT0FBTyxFQUFFLENBQUMsUUFBUSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgwqkgMjAyNCBBbmd1bGFyIFByaW1pdGl2ZXMuXG4gKiBodHRwczovL2dpdGh1Yi5jb20vbmctcHJpbWl0aXZlcy9uZy1wcmltaXRpdmVzXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIDIuMCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5pbXBvcnQge1xuICBEaXJlY3RpdmUsXG4gIEVsZW1lbnRSZWYsXG4gIEhvc3RMaXN0ZW5lcixcbiAgY29tcHV0ZWQsXG4gIGVmZmVjdCxcbiAgaW5qZWN0LFxuICBpbnB1dCxcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyB1bmlxdWVJZCB9IGZyb20gJ25nLXByaW1pdGl2ZXMvdXRpbHMnO1xuaW1wb3J0IHsgaW5qZWN0Rm9ybUZpZWxkIH0gZnJvbSAnLi4vZm9ybS1maWVsZC9mb3JtLWZpZWxkLnRva2VuJztcbmltcG9ydCB7IE5ncExhYmVsVG9rZW4gfSBmcm9tICcuL2xhYmVsLnRva2VuJztcblxuQERpcmVjdGl2ZSh7XG4gIHN0YW5kYWxvbmU6IHRydWUsXG4gIHNlbGVjdG9yOiAnW25ncExhYmVsXScsXG4gIGV4cG9ydEFzOiAnbmdwTGFiZWwnLFxuICBwcm92aWRlcnM6IFt7IHByb3ZpZGU6IE5ncExhYmVsVG9rZW4sIHVzZUV4aXN0aW5nOiBOZ3BMYWJlbCB9XSxcbiAgaG9zdDoge1xuICAgICdbYXR0ci5pZF0nOiAnaWQoKScsXG4gICAgJ1thdHRyLmZvcl0nOiAnaHRtbEZvcigpJyxcbiAgICAnW2F0dHIuZGF0YS1pbnZhbGlkXSc6ICdmb3JtRmllbGQ/LmludmFsaWQoKSA/IFwiXCIgOiBudWxsJyxcbiAgICAnW2F0dHIuZGF0YS12YWxpZF0nOiAnZm9ybUZpZWxkPy52YWxpZCgpID8gXCJcIiA6IG51bGwnLFxuICAgICdbYXR0ci5kYXRhLXRvdWNoZWRdJzogJ2Zvcm1GaWVsZD8udG91Y2hlZCgpID8gXCJcIiA6IG51bGwnLFxuICAgICdbYXR0ci5kYXRhLXByaXN0aW5lXSc6ICdmb3JtRmllbGQ/LnByaXN0aW5lKCkgPyBcIlwiIDogbnVsbCcsXG4gICAgJ1thdHRyLmRhdGEtZGlydHldJzogJ2Zvcm1GaWVsZD8uZGlydHkoKSA/IFwiXCIgOiBudWxsJyxcbiAgICAnW2F0dHIuZGF0YS1wZW5kaW5nXSc6ICdmb3JtRmllbGQ/LnBlbmRpbmcoKSA/IFwiXCIgOiBudWxsJyxcbiAgICAnW2F0dHIuZGF0YS1kaXNhYmxlZF0nOiAnZm9ybUZpZWxkPy5kaXNhYmxlZCgpID8gXCJcIiA6IG51bGwnLFxuICB9LFxufSlcbmV4cG9ydCBjbGFzcyBOZ3BMYWJlbCB7XG4gIC8qKlxuICAgKiBBY2Nlc3MgdGhlIGVsZW1lbnQgdGhhdCB0aGUgbGFiZWwgaXMgYXNzb2NpYXRlZCB3aXRoLlxuICAgKi9cbiAgcHJpdmF0ZSByZWFkb25seSBlbGVtZW50UmVmID0gaW5qZWN0PEVsZW1lbnRSZWY8SFRNTEVsZW1lbnQ+PihFbGVtZW50UmVmKTtcblxuICAvKipcbiAgICogQWNjZXNzIHRoZSBmb3JtIGZpZWxkIHRoYXQgdGhlIGxhYmVsIGlzIGFzc29jaWF0ZWQgd2l0aC5cbiAgICovXG4gIHByb3RlY3RlZCByZWFkb25seSBmb3JtRmllbGQgPSBpbmplY3RGb3JtRmllbGQoKTtcblxuICAvKipcbiAgICogVGhlIGlkIG9mIHRoZSBsYWJlbC4gSWYgbm90IHByb3ZpZGVkLCBhIHVuaXF1ZSBpZCB3aWxsIGJlIGdlbmVyYXRlZC5cbiAgICovXG4gIHJlYWRvbmx5IGlkID0gaW5wdXQ8c3RyaW5nPih1bmlxdWVJZCgnbmdwLWxhYmVsJykpO1xuXG4gIC8qKlxuICAgKiBEZXRlcm1pbmUgaWYgdGhlIGxhYmVsIGlzIGFuIEhUTUwgbGFiZWwgZWxlbWVudC5cbiAgICovXG4gIHByb3RlY3RlZCByZWFkb25seSBpc0xhYmVsID0gdGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQgaW5zdGFuY2VvZiBIVE1MTGFiZWxFbGVtZW50O1xuXG4gIC8qKlxuICAgKiBEZXJpdmUgdGhlIGZvciBhdHRyaWJ1dGUgdmFsdWUgaWYgdGhlIGxhYmVsIGlzIGFuIEhUTUwgbGFiZWwgZWxlbWVudC5cbiAgICovXG4gIHByb3RlY3RlZCByZWFkb25seSBodG1sRm9yID0gY29tcHV0ZWQoKCkgPT4gdGhpcy5mb3JtRmllbGQ/LmZvcm1Db250cm9sKCkpO1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIGVmZmVjdChcbiAgICAgIG9uQ2xlYW51cCA9PiB7XG4gICAgICAgIHRoaXMuZm9ybUZpZWxkPy5hZGRMYWJlbCh0aGlzLmlkKCkpO1xuICAgICAgICBvbkNsZWFudXAoKCkgPT4gdGhpcy5mb3JtRmllbGQ/LnJlbW92ZUxhYmVsKHRoaXMuaWQoKSkpO1xuICAgICAgfSxcbiAgICAgIHsgYWxsb3dTaWduYWxXcml0ZXM6IHRydWUgfSxcbiAgICApO1xuICB9XG5cbiAgQEhvc3RMaXN0ZW5lcignY2xpY2snLCBbJyRldmVudCddKVxuICBwcm90ZWN0ZWQgb25DbGljayhldmVudDogTW91c2VFdmVudCk6IHZvaWQge1xuICAgIC8vIGJ5IGRlZmF1bHQgYSBsYWJlbCB3aWxsIHBlcmZvcm0gYSBjbGljayBvbiB0aGUgYXNzb2NpYXRlZCBmb3JtIGNvbnRyb2wsIGhvd2V2ZXJcbiAgICAvLyB0aGlzIG9ubHkgd29ya3MgaWYgdGhlIGFzc29jaWF0ZWQgZm9ybSBjb250cm9sIGlzIGFuIGlucHV0IGVsZW1lbnQgd2hpY2ggbWF5IG5vdCBhbHdheXNcbiAgICAvLyBiZSB0aGUgY2FzZSwgc28gd2UgcHJldmVudCB0aGUgZGVmYXVsdCBiZWhhdmlvciBhbmQgaGFuZGxlIHRoZSBjbGljayBldmVudCBvdXJzZWx2ZXMuXG4gICAgLy8gVGhpcyB3YXMgaW5zcGlyZWQgYnkgdGhlIEhlYWRsZXNzVUkgYXBwcm9hY2g6XG4gICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3RhaWx3aW5kbGFicy9oZWFkbGVzc3VpL2Jsb2IvbWFpbi9wYWNrYWdlcy8lNDBoZWFkbGVzc3VpLXJlYWN0L3NyYy9jb21wb25lbnRzL2xhYmVsL2xhYmVsLnRzeCNMNThcbiAgICBpZiAodGhpcy5pc0xhYmVsKSB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH1cblxuICAgIC8vIHRvIGZpbmQgdGhlIGFzc29jaWF0ZWQgZm9ybSBjb250cm9sIHdlIGNhbiBsb29rdXAgdmlhIHRoZSBrbm93biBpZFxuICAgIGNvbnN0IHRhcmdldElkID0gdGhpcy5odG1sRm9yKCk7XG5cbiAgICBpZiAoIXRhcmdldElkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgdGFyZ2V0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQodGFyZ2V0SWQpO1xuXG4gICAgaWYgKCF0YXJnZXQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBpZiB0aGUgdGFyZ2V0IGlzIGRpc2FibGVkIHRoZW4gZG8gbm90aGluZ1xuICAgIGNvbnN0IGRpc2FibGVkID0gdGFyZ2V0LmdldEF0dHJpYnV0ZSgnZGlzYWJsZWQnKTtcbiAgICBjb25zdCBhcmlhRGlzYWJsZWQgPSB0YXJnZXQuZ2V0QXR0cmlidXRlKCdhcmlhLWRpc2FibGVkJyk7XG5cbiAgICBpZiAoZGlzYWJsZWQgPT09ICcnIHx8IGRpc2FibGVkID09PSAndHJ1ZScgfHwgYXJpYURpc2FibGVkID09PSAndHJ1ZScpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyByYWRpbyBidXR0b25zLCBjaGVja2JveGVzIGFuZCBzd2l0Y2hlcyBzaG91bGQgYWxsIGJlIGNsaWNrZWQgaW1tZWRpYXRlbHkgYXMgdGhleSByZXF1aXJlIHN0YXRlIGNoYW5nZXNcbiAgICBpZiAoXG4gICAgICAodGFyZ2V0IGluc3RhbmNlb2YgSFRNTElucHV0RWxlbWVudCAmJlxuICAgICAgICAodGFyZ2V0LnR5cGUgPT09ICdyYWRpbycgfHwgdGFyZ2V0LnR5cGUgPT09ICdjaGVja2JveCcpKSB8fFxuICAgICAgdGFyZ2V0LnJvbGUgPT09ICdyYWRpbycgfHxcbiAgICAgIHRhcmdldC5yb2xlID09PSAnY2hlY2tib3gnIHx8XG4gICAgICB0YXJnZXQucm9sZSA9PT0gJ3N3aXRjaCdcbiAgICApIHtcbiAgICAgIHRhcmdldC5jbGljaygpO1xuICAgIH1cblxuICAgIC8vIE1vdmUgZm9jdXMgdG8gdGhlIGVsZW1lbnQsIHRoaXMgYWxsb3dzIHlvdSB0byBzdGFydCB1c2luZyBrZXlib2FyZCBzaG9ydGN1dHMgc2luY2UgdGhlXG4gICAgLy8gYm91bmQgZWxlbWVudCBpcyBub3cgZm9jdXNlZC5cbiAgICB0YXJnZXQuZm9jdXMoeyBwcmV2ZW50U2Nyb2xsOiB0cnVlIH0pO1xuICB9XG59XG4iXX0=