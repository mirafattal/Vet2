/**
 * Copyright © 2024 Angular Primitives.
 * https://github.com/ng-primitives/ng-primitives
 *
 * This source code is licensed under the Apache 2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */
import { Directive, computed, effect, input } from '@angular/core';
import { injectDisabled } from 'ng-primitives/internal';
import { uniqueId } from 'ng-primitives/utils';
import { injectFormField } from '../form-field/form-field.token';
import { NgpFormControlToken } from './form-control.token';
import * as i0 from "@angular/core";
export class NgpFormControl {
    constructor() {
        /**
         * Access the form field that the form control is associated with.
         */
        this.formField = injectFormField();
        /**
         * Whether the form control is disabled by a parent.
         */
        this.disabled = injectDisabled();
        /**
         * The id of the form control. If not provided, a unique id will be generated.
         */
        this.id = input(uniqueId('ngp-form-control'));
        /**
         * Determine the aria-labelledby attribute value.
         */
        this.ariaLabelledBy = computed(() => this.formField?.labels().join(' '));
        /**
         * Determine the aria-describedby attribute value.
         */
        this.ariaDescribedBy = computed(() => this.formField?.descriptions().join(' '));
        effect(onCleanup => {
            this.formField?.setFormControl(this.id());
            onCleanup(() => this.formField?.removeFormControl());
        }, { allowSignalWrites: true });
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: NgpFormControl, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "17.1.0", version: "18.2.13", type: NgpFormControl, isStandalone: true, selector: "[ngpFormControl]", inputs: { id: { classPropertyName: "id", publicName: "id", isSignal: true, isRequired: false, transformFunction: null } }, host: { properties: { "id": "id()", "attr.aria-labelledby": "ariaLabelledBy()", "attr.aria-describedby": "ariaDescribedBy()", "attr.data-invalid": "formField?.invalid() ? \"\" : null", "attr.data-valid": "formField?.valid() ? \"\" : null", "attr.data-touched": "formField?.touched() ? \"\" : null", "attr.data-pristine": "formField?.pristine() ? \"\" : null", "attr.data-dirty": "formField?.dirty() ? \"\" : null", "attr.data-pending": "formField?.pending() ? \"\" : null", "attr.data-disabled": "formField?.disabled() || disabled() ? \"\" : null" } }, providers: [{ provide: NgpFormControlToken, useExisting: NgpFormControl }], exportAs: ["ngpFormControl"], ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: NgpFormControl, decorators: [{
            type: Directive,
            args: [{
                    standalone: true,
                    selector: '[ngpFormControl]',
                    exportAs: 'ngpFormControl',
                    providers: [{ provide: NgpFormControlToken, useExisting: NgpFormControl }],
                    host: {
                        '[id]': 'id()',
                        '[attr.aria-labelledby]': 'ariaLabelledBy()',
                        '[attr.aria-describedby]': 'ariaDescribedBy()',
                        '[attr.data-invalid]': 'formField?.invalid() ? "" : null',
                        '[attr.data-valid]': 'formField?.valid() ? "" : null',
                        '[attr.data-touched]': 'formField?.touched() ? "" : null',
                        '[attr.data-pristine]': 'formField?.pristine() ? "" : null',
                        '[attr.data-dirty]': 'formField?.dirty() ? "" : null',
                        '[attr.data-pending]': 'formField?.pending() ? "" : null',
                        '[attr.data-disabled]': 'formField?.disabled() || disabled() ? "" : null',
                    },
                }]
        }], ctorParameters: () => [] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybS1jb250cm9sLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL25nLXByaW1pdGl2ZXMvZm9ybS1maWVsZC9zcmMvZm9ybS1jb250cm9sL2Zvcm0tY29udHJvbC5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztHQU1HO0FBQ0gsT0FBTyxFQUFFLFNBQVMsRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNuRSxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDeEQsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQy9DLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQUNqRSxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQzs7QUFvQjNELE1BQU0sT0FBTyxjQUFjO0lBMEJ6QjtRQXpCQTs7V0FFRztRQUNnQixjQUFTLEdBQUcsZUFBZSxFQUFFLENBQUM7UUFFakQ7O1dBRUc7UUFDZ0IsYUFBUSxHQUFHLGNBQWMsRUFBRSxDQUFDO1FBRS9DOztXQUVHO1FBQ00sT0FBRSxHQUFHLEtBQUssQ0FBUyxRQUFRLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxDQUFDO1FBRTFEOztXQUVHO1FBQ2dCLG1CQUFjLEdBQUcsUUFBUSxDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFFdkY7O1dBRUc7UUFDZ0Isb0JBQWUsR0FBRyxRQUFRLENBQUMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxZQUFZLEVBQUUsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUc1RixNQUFNLENBQ0osU0FBUyxDQUFDLEVBQUU7WUFDVixJQUFJLENBQUMsU0FBUyxFQUFFLGNBQWMsQ0FBQyxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztZQUMxQyxTQUFTLENBQUMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxpQkFBaUIsRUFBRSxDQUFDLENBQUM7UUFDdkQsQ0FBQyxFQUNELEVBQUUsaUJBQWlCLEVBQUUsSUFBSSxFQUFFLENBQzVCLENBQUM7SUFDSixDQUFDOytHQWxDVSxjQUFjO21HQUFkLGNBQWMsbXVCQWRkLENBQUMsRUFBRSxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsV0FBVyxFQUFFLGNBQWMsRUFBRSxDQUFDOzs0RkFjL0QsY0FBYztrQkFsQjFCLFNBQVM7bUJBQUM7b0JBQ1QsVUFBVSxFQUFFLElBQUk7b0JBQ2hCLFFBQVEsRUFBRSxrQkFBa0I7b0JBQzVCLFFBQVEsRUFBRSxnQkFBZ0I7b0JBQzFCLFNBQVMsRUFBRSxDQUFDLEVBQUUsT0FBTyxFQUFFLG1CQUFtQixFQUFFLFdBQVcsZ0JBQWdCLEVBQUUsQ0FBQztvQkFDMUUsSUFBSSxFQUFFO3dCQUNKLE1BQU0sRUFBRSxNQUFNO3dCQUNkLHdCQUF3QixFQUFFLGtCQUFrQjt3QkFDNUMseUJBQXlCLEVBQUUsbUJBQW1CO3dCQUM5QyxxQkFBcUIsRUFBRSxrQ0FBa0M7d0JBQ3pELG1CQUFtQixFQUFFLGdDQUFnQzt3QkFDckQscUJBQXFCLEVBQUUsa0NBQWtDO3dCQUN6RCxzQkFBc0IsRUFBRSxtQ0FBbUM7d0JBQzNELG1CQUFtQixFQUFFLGdDQUFnQzt3QkFDckQscUJBQXFCLEVBQUUsa0NBQWtDO3dCQUN6RCxzQkFBc0IsRUFBRSxpREFBaUQ7cUJBQzFFO2lCQUNGIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgwqkgMjAyNCBBbmd1bGFyIFByaW1pdGl2ZXMuXG4gKiBodHRwczovL2dpdGh1Yi5jb20vbmctcHJpbWl0aXZlcy9uZy1wcmltaXRpdmVzXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIDIuMCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5pbXBvcnQgeyBEaXJlY3RpdmUsIGNvbXB1dGVkLCBlZmZlY3QsIGlucHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBpbmplY3REaXNhYmxlZCB9IGZyb20gJ25nLXByaW1pdGl2ZXMvaW50ZXJuYWwnO1xuaW1wb3J0IHsgdW5pcXVlSWQgfSBmcm9tICduZy1wcmltaXRpdmVzL3V0aWxzJztcbmltcG9ydCB7IGluamVjdEZvcm1GaWVsZCB9IGZyb20gJy4uL2Zvcm0tZmllbGQvZm9ybS1maWVsZC50b2tlbic7XG5pbXBvcnQgeyBOZ3BGb3JtQ29udHJvbFRva2VuIH0gZnJvbSAnLi9mb3JtLWNvbnRyb2wudG9rZW4nO1xuXG5ARGlyZWN0aXZlKHtcbiAgc3RhbmRhbG9uZTogdHJ1ZSxcbiAgc2VsZWN0b3I6ICdbbmdwRm9ybUNvbnRyb2xdJyxcbiAgZXhwb3J0QXM6ICduZ3BGb3JtQ29udHJvbCcsXG4gIHByb3ZpZGVyczogW3sgcHJvdmlkZTogTmdwRm9ybUNvbnRyb2xUb2tlbiwgdXNlRXhpc3Rpbmc6IE5ncEZvcm1Db250cm9sIH1dLFxuICBob3N0OiB7XG4gICAgJ1tpZF0nOiAnaWQoKScsXG4gICAgJ1thdHRyLmFyaWEtbGFiZWxsZWRieV0nOiAnYXJpYUxhYmVsbGVkQnkoKScsXG4gICAgJ1thdHRyLmFyaWEtZGVzY3JpYmVkYnldJzogJ2FyaWFEZXNjcmliZWRCeSgpJyxcbiAgICAnW2F0dHIuZGF0YS1pbnZhbGlkXSc6ICdmb3JtRmllbGQ/LmludmFsaWQoKSA/IFwiXCIgOiBudWxsJyxcbiAgICAnW2F0dHIuZGF0YS12YWxpZF0nOiAnZm9ybUZpZWxkPy52YWxpZCgpID8gXCJcIiA6IG51bGwnLFxuICAgICdbYXR0ci5kYXRhLXRvdWNoZWRdJzogJ2Zvcm1GaWVsZD8udG91Y2hlZCgpID8gXCJcIiA6IG51bGwnLFxuICAgICdbYXR0ci5kYXRhLXByaXN0aW5lXSc6ICdmb3JtRmllbGQ/LnByaXN0aW5lKCkgPyBcIlwiIDogbnVsbCcsXG4gICAgJ1thdHRyLmRhdGEtZGlydHldJzogJ2Zvcm1GaWVsZD8uZGlydHkoKSA/IFwiXCIgOiBudWxsJyxcbiAgICAnW2F0dHIuZGF0YS1wZW5kaW5nXSc6ICdmb3JtRmllbGQ/LnBlbmRpbmcoKSA/IFwiXCIgOiBudWxsJyxcbiAgICAnW2F0dHIuZGF0YS1kaXNhYmxlZF0nOiAnZm9ybUZpZWxkPy5kaXNhYmxlZCgpIHx8IGRpc2FibGVkKCkgPyBcIlwiIDogbnVsbCcsXG4gIH0sXG59KVxuZXhwb3J0IGNsYXNzIE5ncEZvcm1Db250cm9sIHtcbiAgLyoqXG4gICAqIEFjY2VzcyB0aGUgZm9ybSBmaWVsZCB0aGF0IHRoZSBmb3JtIGNvbnRyb2wgaXMgYXNzb2NpYXRlZCB3aXRoLlxuICAgKi9cbiAgcHJvdGVjdGVkIHJlYWRvbmx5IGZvcm1GaWVsZCA9IGluamVjdEZvcm1GaWVsZCgpO1xuXG4gIC8qKlxuICAgKiBXaGV0aGVyIHRoZSBmb3JtIGNvbnRyb2wgaXMgZGlzYWJsZWQgYnkgYSBwYXJlbnQuXG4gICAqL1xuICBwcm90ZWN0ZWQgcmVhZG9ubHkgZGlzYWJsZWQgPSBpbmplY3REaXNhYmxlZCgpO1xuXG4gIC8qKlxuICAgKiBUaGUgaWQgb2YgdGhlIGZvcm0gY29udHJvbC4gSWYgbm90IHByb3ZpZGVkLCBhIHVuaXF1ZSBpZCB3aWxsIGJlIGdlbmVyYXRlZC5cbiAgICovXG4gIHJlYWRvbmx5IGlkID0gaW5wdXQ8c3RyaW5nPih1bmlxdWVJZCgnbmdwLWZvcm0tY29udHJvbCcpKTtcblxuICAvKipcbiAgICogRGV0ZXJtaW5lIHRoZSBhcmlhLWxhYmVsbGVkYnkgYXR0cmlidXRlIHZhbHVlLlxuICAgKi9cbiAgcHJvdGVjdGVkIHJlYWRvbmx5IGFyaWFMYWJlbGxlZEJ5ID0gY29tcHV0ZWQoKCkgPT4gdGhpcy5mb3JtRmllbGQ/LmxhYmVscygpLmpvaW4oJyAnKSk7XG5cbiAgLyoqXG4gICAqIERldGVybWluZSB0aGUgYXJpYS1kZXNjcmliZWRieSBhdHRyaWJ1dGUgdmFsdWUuXG4gICAqL1xuICBwcm90ZWN0ZWQgcmVhZG9ubHkgYXJpYURlc2NyaWJlZEJ5ID0gY29tcHV0ZWQoKCkgPT4gdGhpcy5mb3JtRmllbGQ/LmRlc2NyaXB0aW9ucygpLmpvaW4oJyAnKSk7XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgZWZmZWN0KFxuICAgICAgb25DbGVhbnVwID0+IHtcbiAgICAgICAgdGhpcy5mb3JtRmllbGQ/LnNldEZvcm1Db250cm9sKHRoaXMuaWQoKSk7XG4gICAgICAgIG9uQ2xlYW51cCgoKSA9PiB0aGlzLmZvcm1GaWVsZD8ucmVtb3ZlRm9ybUNvbnRyb2woKSk7XG4gICAgICB9LFxuICAgICAgeyBhbGxvd1NpZ25hbFdyaXRlczogdHJ1ZSB9LFxuICAgICk7XG4gIH1cbn1cbiJdfQ==