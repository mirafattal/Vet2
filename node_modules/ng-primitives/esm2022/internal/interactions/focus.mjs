/**
 * Copyright Â© 2024 Angular Primitives.
 * https://github.com/ng-primitives/ng-primitives
 *
 * This source code is licensed under the Apache 2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */
import { ElementRef, effect, inject, signal } from '@angular/core';
import { injectDisposables } from 'ng-primitives/utils';
export function setupFocus({ focus, blur, disabled = signal(false), }) {
    /**
     * Access the element reference.
     */
    const elementRef = inject(ElementRef);
    /**
     * Access the disposables helper.
     */
    const disposables = injectDisposables();
    /**
     * Whether the element is currently focused.
     */
    const isFocused = signal(false);
    // setup event listeners
    disposables.addEventListener(elementRef.nativeElement, 'focus', onFocus);
    disposables.addEventListener(elementRef.nativeElement, 'blur', onBlur);
    // anytime the focus state changes we want to update the attribute
    effect(() => isFocused()
        ? elementRef.nativeElement.setAttribute('data-focus', '')
        : elementRef.nativeElement.removeAttribute('data-focus'));
    /**
     * Listen for focus events.
     * @param event
     */
    function onFocus(event) {
        if (disabled()) {
            return;
        }
        const ownerDocument = event.target?.ownerDocument ?? document;
        // ensure this element is still focused
        if (ownerDocument.activeElement === event.target && event.currentTarget === event.target) {
            focus?.();
            isFocused.set(true);
        }
    }
    /**
     * Listen for blur events.
     * @param event
     */
    function onBlur(event) {
        if (disabled()) {
            return;
        }
        if (event.currentTarget === event.target) {
            blur?.();
            isFocused.set(false);
        }
    }
    return {
        isFocused,
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9jdXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9uZy1wcmltaXRpdmVzL2ludGVybmFsL3NyYy9pbnRlcmFjdGlvbnMvZm9jdXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztHQU1HO0FBQ0gsT0FBTyxFQUFFLFVBQVUsRUFBVSxNQUFNLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzRSxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQVl4RCxNQUFNLFVBQVUsVUFBVSxDQUFDLEVBQ3pCLEtBQUssRUFDTCxJQUFJLEVBQ0osUUFBUSxHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUMsR0FDUjtJQUNoQjs7T0FFRztJQUNILE1BQU0sVUFBVSxHQUFHLE1BQU0sQ0FBMEIsVUFBVSxDQUFDLENBQUM7SUFFL0Q7O09BRUc7SUFDSCxNQUFNLFdBQVcsR0FBRyxpQkFBaUIsRUFBRSxDQUFDO0lBRXhDOztPQUVHO0lBQ0gsTUFBTSxTQUFTLEdBQUcsTUFBTSxDQUFVLEtBQUssQ0FBQyxDQUFDO0lBRXpDLHdCQUF3QjtJQUN4QixXQUFXLENBQUMsZ0JBQWdCLENBQUMsVUFBVSxDQUFDLGFBQWEsRUFBRSxPQUFPLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDekUsV0FBVyxDQUFDLGdCQUFnQixDQUFDLFVBQVUsQ0FBQyxhQUFhLEVBQUUsTUFBTSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBRXZFLGtFQUFrRTtJQUNsRSxNQUFNLENBQUMsR0FBRyxFQUFFLENBQ1YsU0FBUyxFQUFFO1FBQ1QsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUMsWUFBWSxDQUFDLFlBQVksRUFBRSxFQUFFLENBQUM7UUFDekQsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUMsZUFBZSxDQUFDLFlBQVksQ0FBQyxDQUMzRCxDQUFDO0lBRUY7OztPQUdHO0lBQ0gsU0FBUyxPQUFPLENBQUMsS0FBaUI7UUFDaEMsSUFBSSxRQUFRLEVBQUUsRUFBRSxDQUFDO1lBQ2YsT0FBTztRQUNULENBQUM7UUFFRCxNQUFNLGFBQWEsR0FBSSxLQUFLLENBQUMsTUFBc0IsRUFBRSxhQUFhLElBQUksUUFBUSxDQUFDO1FBRS9FLHVDQUF1QztRQUN2QyxJQUFJLGFBQWEsQ0FBQyxhQUFhLEtBQUssS0FBSyxDQUFDLE1BQU0sSUFBSSxLQUFLLENBQUMsYUFBYSxLQUFLLEtBQUssQ0FBQyxNQUFNLEVBQUUsQ0FBQztZQUN6RixLQUFLLEVBQUUsRUFBRSxDQUFDO1lBQ1YsU0FBUyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUN0QixDQUFDO0lBQ0gsQ0FBQztJQUVEOzs7T0FHRztJQUNILFNBQVMsTUFBTSxDQUFDLEtBQWlCO1FBQy9CLElBQUksUUFBUSxFQUFFLEVBQUUsQ0FBQztZQUNmLE9BQU87UUFDVCxDQUFDO1FBRUQsSUFBSSxLQUFLLENBQUMsYUFBYSxLQUFLLEtBQUssQ0FBQyxNQUFNLEVBQUUsQ0FBQztZQUN6QyxJQUFJLEVBQUUsRUFBRSxDQUFDO1lBQ1QsU0FBUyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUN2QixDQUFDO0lBQ0gsQ0FBQztJQUVELE9BQU87UUFDTCxTQUFTO0tBQ1YsQ0FBQztBQUNKLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCDCqSAyMDI0IEFuZ3VsYXIgUHJpbWl0aXZlcy5cbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9uZy1wcmltaXRpdmVzL25nLXByaW1pdGl2ZXNcbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgMi4wIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbmltcG9ydCB7IEVsZW1lbnRSZWYsIFNpZ25hbCwgZWZmZWN0LCBpbmplY3QsIHNpZ25hbCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgaW5qZWN0RGlzcG9zYWJsZXMgfSBmcm9tICduZy1wcmltaXRpdmVzL3V0aWxzJztcblxuZXhwb3J0IGludGVyZmFjZSBOZ3BGb2N1c09wdGlvbnMge1xuICBkaXNhYmxlZD86IFNpZ25hbDxib29sZWFuPjtcbiAgZm9jdXM/OiAoKSA9PiB2b2lkO1xuICBibHVyPzogKCkgPT4gdm9pZDtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBOZ3BGb2N1c1N0YXRlIHtcbiAgaXNGb2N1c2VkOiBTaWduYWw8Ym9vbGVhbj47XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzZXR1cEZvY3VzKHtcbiAgZm9jdXMsXG4gIGJsdXIsXG4gIGRpc2FibGVkID0gc2lnbmFsKGZhbHNlKSxcbn06IE5ncEZvY3VzT3B0aW9ucyk6IE5ncEZvY3VzU3RhdGUge1xuICAvKipcbiAgICogQWNjZXNzIHRoZSBlbGVtZW50IHJlZmVyZW5jZS5cbiAgICovXG4gIGNvbnN0IGVsZW1lbnRSZWYgPSBpbmplY3Q8RWxlbWVudFJlZjxIVE1MRWxlbWVudD4+KEVsZW1lbnRSZWYpO1xuXG4gIC8qKlxuICAgKiBBY2Nlc3MgdGhlIGRpc3Bvc2FibGVzIGhlbHBlci5cbiAgICovXG4gIGNvbnN0IGRpc3Bvc2FibGVzID0gaW5qZWN0RGlzcG9zYWJsZXMoKTtcblxuICAvKipcbiAgICogV2hldGhlciB0aGUgZWxlbWVudCBpcyBjdXJyZW50bHkgZm9jdXNlZC5cbiAgICovXG4gIGNvbnN0IGlzRm9jdXNlZCA9IHNpZ25hbDxib29sZWFuPihmYWxzZSk7XG5cbiAgLy8gc2V0dXAgZXZlbnQgbGlzdGVuZXJzXG4gIGRpc3Bvc2FibGVzLmFkZEV2ZW50TGlzdGVuZXIoZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LCAnZm9jdXMnLCBvbkZvY3VzKTtcbiAgZGlzcG9zYWJsZXMuYWRkRXZlbnRMaXN0ZW5lcihlbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQsICdibHVyJywgb25CbHVyKTtcblxuICAvLyBhbnl0aW1lIHRoZSBmb2N1cyBzdGF0ZSBjaGFuZ2VzIHdlIHdhbnQgdG8gdXBkYXRlIHRoZSBhdHRyaWJ1dGVcbiAgZWZmZWN0KCgpID0+XG4gICAgaXNGb2N1c2VkKClcbiAgICAgID8gZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LnNldEF0dHJpYnV0ZSgnZGF0YS1mb2N1cycsICcnKVxuICAgICAgOiBlbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKCdkYXRhLWZvY3VzJyksXG4gICk7XG5cbiAgLyoqXG4gICAqIExpc3RlbiBmb3IgZm9jdXMgZXZlbnRzLlxuICAgKiBAcGFyYW0gZXZlbnRcbiAgICovXG4gIGZ1bmN0aW9uIG9uRm9jdXMoZXZlbnQ6IEZvY3VzRXZlbnQpOiB2b2lkIHtcbiAgICBpZiAoZGlzYWJsZWQoKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IG93bmVyRG9jdW1lbnQgPSAoZXZlbnQudGFyZ2V0IGFzIEhUTUxFbGVtZW50KT8ub3duZXJEb2N1bWVudCA/PyBkb2N1bWVudDtcblxuICAgIC8vIGVuc3VyZSB0aGlzIGVsZW1lbnQgaXMgc3RpbGwgZm9jdXNlZFxuICAgIGlmIChvd25lckRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgPT09IGV2ZW50LnRhcmdldCAmJiBldmVudC5jdXJyZW50VGFyZ2V0ID09PSBldmVudC50YXJnZXQpIHtcbiAgICAgIGZvY3VzPy4oKTtcbiAgICAgIGlzRm9jdXNlZC5zZXQodHJ1ZSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIExpc3RlbiBmb3IgYmx1ciBldmVudHMuXG4gICAqIEBwYXJhbSBldmVudFxuICAgKi9cbiAgZnVuY3Rpb24gb25CbHVyKGV2ZW50OiBGb2N1c0V2ZW50KTogdm9pZCB7XG4gICAgaWYgKGRpc2FibGVkKCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoZXZlbnQuY3VycmVudFRhcmdldCA9PT0gZXZlbnQudGFyZ2V0KSB7XG4gICAgICBibHVyPy4oKTtcbiAgICAgIGlzRm9jdXNlZC5zZXQoZmFsc2UpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB7XG4gICAgaXNGb2N1c2VkLFxuICB9O1xufVxuIl19