/**
 * Copyright Â© 2024 Angular Primitives.
 * https://github.com/ng-primitives/ng-primitives
 *
 * This source code is licensed under the Apache 2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */
import { FocusMonitor } from '@angular/cdk/a11y';
import { effect, ElementRef, inject, signal } from '@angular/core';
import { takeUntilDestroyed } from '@angular/core/rxjs-interop';
import { onBooleanChange } from 'ng-primitives/utils';
export function setupFocusVisible({ focusChange, disabled = signal(false), }) {
    /**
     * Access the element that the directive is applied to.
     */
    const elementRef = inject(ElementRef);
    /**
     * Access the focus monitor.
     */
    const focusMonitor = inject(FocusMonitor);
    /**
     * Whether the element is currently focused.
     */
    const isFocused = signal(false);
    // handle focus state
    focusMonitor
        .monitor(elementRef.nativeElement)
        .pipe(takeUntilDestroyed())
        .subscribe(origin => 
    // null indicates the element was blurred
    origin === null ? onBlur() : onFocus(origin));
    // if the component becomes disabled and it is focused, hide the focus
    onBooleanChange(disabled, () => focus(false));
    // anytime the focus state changes we want to update the attribute
    effect(() => isFocused()
        ? elementRef.nativeElement.setAttribute('data-focus-visible', '')
        : elementRef.nativeElement.removeAttribute('data-focus-visible'));
    function onFocus(origin) {
        if (disabled() || isFocused()) {
            return;
        }
        // for some elements the focus visible state should always appear on focus
        if (alwaysShowFocus()) {
            focus(true);
            return;
        }
        // if the focus origin is keyboard or program(focused programmatically), then the focus is visible
        if (origin === 'keyboard' || origin === 'program') {
            focus(true);
            return;
        }
    }
    function onBlur() {
        if (disabled() || !isFocused()) {
            return;
        }
        focus(false);
    }
    /**
     * Trigger the focus signal along with the focusChange event.
     */
    function focus(value) {
        if (isFocused() === value) {
            return;
        }
        isFocused.set(value);
        focusChange?.(value);
    }
    function alwaysShowFocus() {
        const nonTextInputTypes = [
            'checkbox',
            'radio',
            'range',
            'color',
            'file',
            'image',
            'button',
            'submit',
            'reset',
        ];
        // if this is an input element and it is a text input
        if (elementRef.nativeElement instanceof HTMLInputElement &&
            !nonTextInputTypes.includes(elementRef.nativeElement.type)) {
            return true;
        }
        // if this is a textarea
        if (elementRef.nativeElement instanceof HTMLTextAreaElement) {
            return true;
        }
        // if this is an element with contenteditable
        if (elementRef.nativeElement.isContentEditable ||
            elementRef.nativeElement.hasAttribute('contenteditable')) {
            return true;
        }
        return false;
    }
    return {
        isFocused,
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9jdXMtdmlzaWJsZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL25nLXByaW1pdGl2ZXMvaW50ZXJuYWwvc3JjL2ludGVyYWN0aW9ucy9mb2N1cy12aXNpYmxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7R0FNRztBQUNILE9BQU8sRUFBRSxZQUFZLEVBQWUsTUFBTSxtQkFBbUIsQ0FBQztBQUM5RCxPQUFPLEVBQUUsTUFBTSxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQVUsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNFLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBQ2hFLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQVd0RCxNQUFNLFVBQVUsaUJBQWlCLENBQUMsRUFDaEMsV0FBVyxFQUNYLFFBQVEsR0FBRyxNQUFNLENBQUMsS0FBSyxDQUFDLEdBQ0Q7SUFDdkI7O09BRUc7SUFDSCxNQUFNLFVBQVUsR0FBRyxNQUFNLENBQTBCLFVBQVUsQ0FBQyxDQUFDO0lBRS9EOztPQUVHO0lBQ0gsTUFBTSxZQUFZLEdBQUcsTUFBTSxDQUFDLFlBQVksQ0FBQyxDQUFDO0lBRTFDOztPQUVHO0lBQ0gsTUFBTSxTQUFTLEdBQUcsTUFBTSxDQUFVLEtBQUssQ0FBQyxDQUFDO0lBRXpDLHFCQUFxQjtJQUNyQixZQUFZO1NBQ1QsT0FBTyxDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUM7U0FDakMsSUFBSSxDQUFDLGtCQUFrQixFQUFFLENBQUM7U0FDMUIsU0FBUyxDQUFDLE1BQU0sQ0FBQyxFQUFFO0lBQ2xCLHlDQUF5QztJQUN6QyxNQUFNLEtBQUssSUFBSSxDQUFDLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUM3QyxDQUFDO0lBRUosc0VBQXNFO0lBQ3RFLGVBQWUsQ0FBQyxRQUFRLEVBQUUsR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7SUFFOUMsa0VBQWtFO0lBQ2xFLE1BQU0sQ0FBQyxHQUFHLEVBQUUsQ0FDVixTQUFTLEVBQUU7UUFDVCxDQUFDLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQyxZQUFZLENBQUMsb0JBQW9CLEVBQUUsRUFBRSxDQUFDO1FBQ2pFLENBQUMsQ0FBQyxVQUFVLENBQUMsYUFBYSxDQUFDLGVBQWUsQ0FBQyxvQkFBb0IsQ0FBQyxDQUNuRSxDQUFDO0lBRUYsU0FBUyxPQUFPLENBQUMsTUFBbUI7UUFDbEMsSUFBSSxRQUFRLEVBQUUsSUFBSSxTQUFTLEVBQUUsRUFBRSxDQUFDO1lBQzlCLE9BQU87UUFDVCxDQUFDO1FBRUQsMEVBQTBFO1FBQzFFLElBQUksZUFBZSxFQUFFLEVBQUUsQ0FBQztZQUN0QixLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDWixPQUFPO1FBQ1QsQ0FBQztRQUVELGtHQUFrRztRQUNsRyxJQUFJLE1BQU0sS0FBSyxVQUFVLElBQUksTUFBTSxLQUFLLFNBQVMsRUFBRSxDQUFDO1lBQ2xELEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUNaLE9BQU87UUFDVCxDQUFDO0lBQ0gsQ0FBQztJQUVELFNBQVMsTUFBTTtRQUNiLElBQUksUUFBUSxFQUFFLElBQUksQ0FBQyxTQUFTLEVBQUUsRUFBRSxDQUFDO1lBQy9CLE9BQU87UUFDVCxDQUFDO1FBRUQsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ2YsQ0FBQztJQUVEOztPQUVHO0lBQ0gsU0FBUyxLQUFLLENBQUMsS0FBYztRQUMzQixJQUFJLFNBQVMsRUFBRSxLQUFLLEtBQUssRUFBRSxDQUFDO1lBQzFCLE9BQU87UUFDVCxDQUFDO1FBRUQsU0FBUyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNyQixXQUFXLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUN2QixDQUFDO0lBRUQsU0FBUyxlQUFlO1FBQ3RCLE1BQU0saUJBQWlCLEdBQUc7WUFDeEIsVUFBVTtZQUNWLE9BQU87WUFDUCxPQUFPO1lBQ1AsT0FBTztZQUNQLE1BQU07WUFDTixPQUFPO1lBQ1AsUUFBUTtZQUNSLFFBQVE7WUFDUixPQUFPO1NBQ1IsQ0FBQztRQUVGLHFEQUFxRDtRQUNyRCxJQUNFLFVBQVUsQ0FBQyxhQUFhLFlBQVksZ0JBQWdCO1lBQ3BELENBQUMsaUJBQWlCLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLEVBQzFELENBQUM7WUFDRCxPQUFPLElBQUksQ0FBQztRQUNkLENBQUM7UUFFRCx3QkFBd0I7UUFDeEIsSUFBSSxVQUFVLENBQUMsYUFBYSxZQUFZLG1CQUFtQixFQUFFLENBQUM7WUFDNUQsT0FBTyxJQUFJLENBQUM7UUFDZCxDQUFDO1FBRUQsNkNBQTZDO1FBQzdDLElBQ0UsVUFBVSxDQUFDLGFBQWEsQ0FBQyxpQkFBaUI7WUFDMUMsVUFBVSxDQUFDLGFBQWEsQ0FBQyxZQUFZLENBQUMsaUJBQWlCLENBQUMsRUFDeEQsQ0FBQztZQUNELE9BQU8sSUFBSSxDQUFDO1FBQ2QsQ0FBQztRQUVELE9BQU8sS0FBSyxDQUFDO0lBQ2YsQ0FBQztJQUVELE9BQU87UUFDTCxTQUFTO0tBQ1YsQ0FBQztBQUNKLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCDCqSAyMDI0IEFuZ3VsYXIgUHJpbWl0aXZlcy5cbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9uZy1wcmltaXRpdmVzL25nLXByaW1pdGl2ZXNcbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgMi4wIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbmltcG9ydCB7IEZvY3VzTW9uaXRvciwgRm9jdXNPcmlnaW4gfSBmcm9tICdAYW5ndWxhci9jZGsvYTExeSc7XG5pbXBvcnQgeyBlZmZlY3QsIEVsZW1lbnRSZWYsIGluamVjdCwgU2lnbmFsLCBzaWduYWwgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IHRha2VVbnRpbERlc3Ryb3llZCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUvcnhqcy1pbnRlcm9wJztcbmltcG9ydCB7IG9uQm9vbGVhbkNoYW5nZSB9IGZyb20gJ25nLXByaW1pdGl2ZXMvdXRpbHMnO1xuXG5leHBvcnQgaW50ZXJmYWNlIE5ncEZvY3VzVmlzaWJsZU9wdGlvbnMge1xuICBkaXNhYmxlZD86IFNpZ25hbDxib29sZWFuPjtcbiAgZm9jdXNDaGFuZ2U/OiAodmFsdWU6IGJvb2xlYW4pID0+IHZvaWQ7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgTmdwRm9jdXNWaXNpYmxlU3RhdGUge1xuICBpc0ZvY3VzZWQ6IFNpZ25hbDxib29sZWFuPjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNldHVwRm9jdXNWaXNpYmxlKHtcbiAgZm9jdXNDaGFuZ2UsXG4gIGRpc2FibGVkID0gc2lnbmFsKGZhbHNlKSxcbn06IE5ncEZvY3VzVmlzaWJsZU9wdGlvbnMpOiBOZ3BGb2N1c1Zpc2libGVTdGF0ZSB7XG4gIC8qKlxuICAgKiBBY2Nlc3MgdGhlIGVsZW1lbnQgdGhhdCB0aGUgZGlyZWN0aXZlIGlzIGFwcGxpZWQgdG8uXG4gICAqL1xuICBjb25zdCBlbGVtZW50UmVmID0gaW5qZWN0PEVsZW1lbnRSZWY8SFRNTEVsZW1lbnQ+PihFbGVtZW50UmVmKTtcblxuICAvKipcbiAgICogQWNjZXNzIHRoZSBmb2N1cyBtb25pdG9yLlxuICAgKi9cbiAgY29uc3QgZm9jdXNNb25pdG9yID0gaW5qZWN0KEZvY3VzTW9uaXRvcik7XG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgdGhlIGVsZW1lbnQgaXMgY3VycmVudGx5IGZvY3VzZWQuXG4gICAqL1xuICBjb25zdCBpc0ZvY3VzZWQgPSBzaWduYWw8Ym9vbGVhbj4oZmFsc2UpO1xuXG4gIC8vIGhhbmRsZSBmb2N1cyBzdGF0ZVxuICBmb2N1c01vbml0b3JcbiAgICAubW9uaXRvcihlbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQpXG4gICAgLnBpcGUodGFrZVVudGlsRGVzdHJveWVkKCkpXG4gICAgLnN1YnNjcmliZShvcmlnaW4gPT5cbiAgICAgIC8vIG51bGwgaW5kaWNhdGVzIHRoZSBlbGVtZW50IHdhcyBibHVycmVkXG4gICAgICBvcmlnaW4gPT09IG51bGwgPyBvbkJsdXIoKSA6IG9uRm9jdXMob3JpZ2luKSxcbiAgICApO1xuXG4gIC8vIGlmIHRoZSBjb21wb25lbnQgYmVjb21lcyBkaXNhYmxlZCBhbmQgaXQgaXMgZm9jdXNlZCwgaGlkZSB0aGUgZm9jdXNcbiAgb25Cb29sZWFuQ2hhbmdlKGRpc2FibGVkLCAoKSA9PiBmb2N1cyhmYWxzZSkpO1xuXG4gIC8vIGFueXRpbWUgdGhlIGZvY3VzIHN0YXRlIGNoYW5nZXMgd2Ugd2FudCB0byB1cGRhdGUgdGhlIGF0dHJpYnV0ZVxuICBlZmZlY3QoKCkgPT5cbiAgICBpc0ZvY3VzZWQoKVxuICAgICAgPyBlbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQuc2V0QXR0cmlidXRlKCdkYXRhLWZvY3VzLXZpc2libGUnLCAnJylcbiAgICAgIDogZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LnJlbW92ZUF0dHJpYnV0ZSgnZGF0YS1mb2N1cy12aXNpYmxlJyksXG4gICk7XG5cbiAgZnVuY3Rpb24gb25Gb2N1cyhvcmlnaW46IEZvY3VzT3JpZ2luKTogdm9pZCB7XG4gICAgaWYgKGRpc2FibGVkKCkgfHwgaXNGb2N1c2VkKCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBmb3Igc29tZSBlbGVtZW50cyB0aGUgZm9jdXMgdmlzaWJsZSBzdGF0ZSBzaG91bGQgYWx3YXlzIGFwcGVhciBvbiBmb2N1c1xuICAgIGlmIChhbHdheXNTaG93Rm9jdXMoKSkge1xuICAgICAgZm9jdXModHJ1ZSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gaWYgdGhlIGZvY3VzIG9yaWdpbiBpcyBrZXlib2FyZCBvciBwcm9ncmFtKGZvY3VzZWQgcHJvZ3JhbW1hdGljYWxseSksIHRoZW4gdGhlIGZvY3VzIGlzIHZpc2libGVcbiAgICBpZiAob3JpZ2luID09PSAna2V5Ym9hcmQnIHx8IG9yaWdpbiA9PT0gJ3Byb2dyYW0nKSB7XG4gICAgICBmb2N1cyh0cnVlKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBvbkJsdXIoKTogdm9pZCB7XG4gICAgaWYgKGRpc2FibGVkKCkgfHwgIWlzRm9jdXNlZCgpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgZm9jdXMoZmFsc2UpO1xuICB9XG5cbiAgLyoqXG4gICAqIFRyaWdnZXIgdGhlIGZvY3VzIHNpZ25hbCBhbG9uZyB3aXRoIHRoZSBmb2N1c0NoYW5nZSBldmVudC5cbiAgICovXG4gIGZ1bmN0aW9uIGZvY3VzKHZhbHVlOiBib29sZWFuKSB7XG4gICAgaWYgKGlzRm9jdXNlZCgpID09PSB2YWx1ZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlzRm9jdXNlZC5zZXQodmFsdWUpO1xuICAgIGZvY3VzQ2hhbmdlPy4odmFsdWUpO1xuICB9XG5cbiAgZnVuY3Rpb24gYWx3YXlzU2hvd0ZvY3VzKCk6IGJvb2xlYW4ge1xuICAgIGNvbnN0IG5vblRleHRJbnB1dFR5cGVzID0gW1xuICAgICAgJ2NoZWNrYm94JyxcbiAgICAgICdyYWRpbycsXG4gICAgICAncmFuZ2UnLFxuICAgICAgJ2NvbG9yJyxcbiAgICAgICdmaWxlJyxcbiAgICAgICdpbWFnZScsXG4gICAgICAnYnV0dG9uJyxcbiAgICAgICdzdWJtaXQnLFxuICAgICAgJ3Jlc2V0JyxcbiAgICBdO1xuXG4gICAgLy8gaWYgdGhpcyBpcyBhbiBpbnB1dCBlbGVtZW50IGFuZCBpdCBpcyBhIHRleHQgaW5wdXRcbiAgICBpZiAoXG4gICAgICBlbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQgaW5zdGFuY2VvZiBIVE1MSW5wdXRFbGVtZW50ICYmXG4gICAgICAhbm9uVGV4dElucHV0VHlwZXMuaW5jbHVkZXMoZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LnR5cGUpXG4gICAgKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICAvLyBpZiB0aGlzIGlzIGEgdGV4dGFyZWFcbiAgICBpZiAoZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50IGluc3RhbmNlb2YgSFRNTFRleHRBcmVhRWxlbWVudCkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgLy8gaWYgdGhpcyBpcyBhbiBlbGVtZW50IHdpdGggY29udGVudGVkaXRhYmxlXG4gICAgaWYgKFxuICAgICAgZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LmlzQ29udGVudEVkaXRhYmxlIHx8XG4gICAgICBlbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQuaGFzQXR0cmlidXRlKCdjb250ZW50ZWRpdGFibGUnKVxuICAgICkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBpc0ZvY3VzZWQsXG4gIH07XG59XG4iXX0=