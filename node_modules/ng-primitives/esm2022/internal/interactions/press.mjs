/**
 * Copyright Â© 2024 Angular Primitives.
 * https://github.com/ng-primitives/ng-primitives
 *
 * This source code is licensed under the Apache 2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */
import { ElementRef, effect, inject, signal } from '@angular/core';
import { injectDisposables } from 'ng-primitives/utils';
export function setupPress({ pressStart, pressEnd, disabled = signal(false), }) {
    /**
     * Access the element reference.
     */
    const elementRef = inject(ElementRef);
    /**
     * Access the disposables helper.
     */
    const disposables = injectDisposables();
    /**
     * Whether the element is currently pressed.
     */
    const pressed = signal(false);
    // setup event listeners
    disposables.addEventListener(elementRef.nativeElement, 'pointerdown', onPointerDown);
    // anytime the press state changes we want to update the attribute
    effect(() => pressed() && !disabled()
        ? elementRef.nativeElement.setAttribute('data-press', '')
        : elementRef.nativeElement.removeAttribute('data-press'));
    /**
     * Reset the press state.
     */
    function reset() {
        // if we are not pressing, then do nothing
        if (!pressed()) {
            return;
        }
        // clear any existing disposables
        disposableListeners.forEach(dispose => dispose());
        pressed.set(false);
        pressEnd?.();
    }
    /**
     * Store the list of disposables.
     */
    let disposableListeners = [];
    function onPointerDown() {
        if (disabled()) {
            return;
        }
        // clear any existing disposables
        disposableListeners.forEach(dispose => dispose());
        // update the press state
        pressed.set(true);
        pressStart?.();
        // setup global event listeners to catch events on elements outside the directive
        const ownerDocument = elementRef.nativeElement.ownerDocument ?? document;
        // if the pointer up event happens on any elements, then we are no longer pressing on this element
        const pointerUp = disposables.addEventListener(ownerDocument, 'pointerup', () => reset(), false);
        // Instead of relying on the `pointerleave` event, which is not consistently called on iOS Safari,
        // we use the `pointermove` event to determine if we are still "pressing".
        // By checking if the target is still within the element, we can determine if the press is ongoing.
        const pointerMove = disposables.addEventListener(ownerDocument, 'pointermove', () => onPointerMove, false);
        // if the pointer is cancelled, then we are no longer pressing on this element
        const pointerCancel = disposables.addEventListener(ownerDocument, 'pointercancel', () => reset(), false);
        disposableListeners = [pointerUp, pointerMove, pointerCancel];
    }
    function onPointerMove(event) {
        if (elementRef.nativeElement !== event.target &&
            !elementRef.nativeElement.contains(event.target)) {
            reset();
        }
    }
    return { pressed };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJlc3MuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9uZy1wcmltaXRpdmVzL2ludGVybmFsL3NyYy9pbnRlcmFjdGlvbnMvcHJlc3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztHQU1HO0FBQ0gsT0FBTyxFQUFFLFVBQVUsRUFBVSxNQUFNLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzRSxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQVl4RCxNQUFNLFVBQVUsVUFBVSxDQUFDLEVBQ3pCLFVBQVUsRUFDVixRQUFRLEVBQ1IsUUFBUSxHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUMsR0FDUjtJQUNoQjs7T0FFRztJQUNILE1BQU0sVUFBVSxHQUFHLE1BQU0sQ0FBMEIsVUFBVSxDQUFDLENBQUM7SUFFL0Q7O09BRUc7SUFDSCxNQUFNLFdBQVcsR0FBRyxpQkFBaUIsRUFBRSxDQUFDO0lBRXhDOztPQUVHO0lBQ0gsTUFBTSxPQUFPLEdBQUcsTUFBTSxDQUFVLEtBQUssQ0FBQyxDQUFDO0lBRXZDLHdCQUF3QjtJQUN4QixXQUFXLENBQUMsZ0JBQWdCLENBQUMsVUFBVSxDQUFDLGFBQWEsRUFBRSxhQUFhLEVBQUUsYUFBYSxDQUFDLENBQUM7SUFFckYsa0VBQWtFO0lBQ2xFLE1BQU0sQ0FBQyxHQUFHLEVBQUUsQ0FDVixPQUFPLEVBQUUsSUFBSSxDQUFDLFFBQVEsRUFBRTtRQUN0QixDQUFDLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQyxZQUFZLENBQUMsWUFBWSxFQUFFLEVBQUUsQ0FBQztRQUN6RCxDQUFDLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQyxlQUFlLENBQUMsWUFBWSxDQUFDLENBQzNELENBQUM7SUFFRjs7T0FFRztJQUNILFNBQVMsS0FBSztRQUNaLDBDQUEwQztRQUMxQyxJQUFJLENBQUMsT0FBTyxFQUFFLEVBQUUsQ0FBQztZQUNmLE9BQU87UUFDVCxDQUFDO1FBRUQsaUNBQWlDO1FBQ2pDLG1CQUFtQixDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUM7UUFDbEQsT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNuQixRQUFRLEVBQUUsRUFBRSxDQUFDO0lBQ2YsQ0FBQztJQUVEOztPQUVHO0lBQ0gsSUFBSSxtQkFBbUIsR0FBbUIsRUFBRSxDQUFDO0lBRTdDLFNBQVMsYUFBYTtRQUNwQixJQUFJLFFBQVEsRUFBRSxFQUFFLENBQUM7WUFDZixPQUFPO1FBQ1QsQ0FBQztRQUVELGlDQUFpQztRQUNqQyxtQkFBbUIsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDO1FBRWxELHlCQUF5QjtRQUN6QixPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ2xCLFVBQVUsRUFBRSxFQUFFLENBQUM7UUFFZixpRkFBaUY7UUFDakYsTUFBTSxhQUFhLEdBQUcsVUFBVSxDQUFDLGFBQWEsQ0FBQyxhQUFhLElBQUksUUFBUSxDQUFDO1FBRXpFLGtHQUFrRztRQUNsRyxNQUFNLFNBQVMsR0FBRyxXQUFXLENBQUMsZ0JBQWdCLENBQzVDLGFBQWEsRUFDYixXQUFXLEVBQ1gsR0FBRyxFQUFFLENBQUMsS0FBSyxFQUFFLEVBQ2IsS0FBSyxDQUNOLENBQUM7UUFFRixrR0FBa0c7UUFDbEcsMEVBQTBFO1FBQzFFLG1HQUFtRztRQUNuRyxNQUFNLFdBQVcsR0FBRyxXQUFXLENBQUMsZ0JBQWdCLENBQzlDLGFBQWEsRUFDYixhQUFhLEVBQ2IsR0FBRyxFQUFFLENBQUMsYUFBOEIsRUFDcEMsS0FBSyxDQUNOLENBQUM7UUFFRiw4RUFBOEU7UUFDOUUsTUFBTSxhQUFhLEdBQUcsV0FBVyxDQUFDLGdCQUFnQixDQUNoRCxhQUFhLEVBQ2IsZUFBZSxFQUNmLEdBQUcsRUFBRSxDQUFDLEtBQUssRUFBRSxFQUNiLEtBQUssQ0FDTixDQUFDO1FBRUYsbUJBQW1CLEdBQUcsQ0FBQyxTQUFTLEVBQUUsV0FBVyxFQUFFLGFBQWEsQ0FBQyxDQUFDO0lBQ2hFLENBQUM7SUFFRCxTQUFTLGFBQWEsQ0FBQyxLQUFtQjtRQUN4QyxJQUNFLFVBQVUsQ0FBQyxhQUFhLEtBQUssS0FBSyxDQUFDLE1BQU07WUFDekMsQ0FBQyxVQUFVLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsTUFBYyxDQUFDLEVBQ3hELENBQUM7WUFDRCxLQUFLLEVBQUUsQ0FBQztRQUNWLENBQUM7SUFDSCxDQUFDO0lBRUQsT0FBTyxFQUFFLE9BQU8sRUFBRSxDQUFDO0FBQ3JCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCDCqSAyMDI0IEFuZ3VsYXIgUHJpbWl0aXZlcy5cbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9uZy1wcmltaXRpdmVzL25nLXByaW1pdGl2ZXNcbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgMi4wIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbmltcG9ydCB7IEVsZW1lbnRSZWYsIFNpZ25hbCwgZWZmZWN0LCBpbmplY3QsIHNpZ25hbCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgaW5qZWN0RGlzcG9zYWJsZXMgfSBmcm9tICduZy1wcmltaXRpdmVzL3V0aWxzJztcblxuaW50ZXJmYWNlIE5ncFByZXNzU3RhdGUge1xuICBwcmVzc2VkOiBTaWduYWw8Ym9vbGVhbj47XG59XG5cbmludGVyZmFjZSBOZ3BQcmVzc09wdGlvbnMge1xuICBkaXNhYmxlZD86IFNpZ25hbDxib29sZWFuPjtcbiAgcHJlc3NTdGFydD86ICgpID0+IHZvaWQ7XG4gIHByZXNzRW5kPzogKCkgPT4gdm9pZDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNldHVwUHJlc3Moe1xuICBwcmVzc1N0YXJ0LFxuICBwcmVzc0VuZCxcbiAgZGlzYWJsZWQgPSBzaWduYWwoZmFsc2UpLFxufTogTmdwUHJlc3NPcHRpb25zKTogTmdwUHJlc3NTdGF0ZSB7XG4gIC8qKlxuICAgKiBBY2Nlc3MgdGhlIGVsZW1lbnQgcmVmZXJlbmNlLlxuICAgKi9cbiAgY29uc3QgZWxlbWVudFJlZiA9IGluamVjdDxFbGVtZW50UmVmPEhUTUxFbGVtZW50Pj4oRWxlbWVudFJlZik7XG5cbiAgLyoqXG4gICAqIEFjY2VzcyB0aGUgZGlzcG9zYWJsZXMgaGVscGVyLlxuICAgKi9cbiAgY29uc3QgZGlzcG9zYWJsZXMgPSBpbmplY3REaXNwb3NhYmxlcygpO1xuXG4gIC8qKlxuICAgKiBXaGV0aGVyIHRoZSBlbGVtZW50IGlzIGN1cnJlbnRseSBwcmVzc2VkLlxuICAgKi9cbiAgY29uc3QgcHJlc3NlZCA9IHNpZ25hbDxib29sZWFuPihmYWxzZSk7XG5cbiAgLy8gc2V0dXAgZXZlbnQgbGlzdGVuZXJzXG4gIGRpc3Bvc2FibGVzLmFkZEV2ZW50TGlzdGVuZXIoZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LCAncG9pbnRlcmRvd24nLCBvblBvaW50ZXJEb3duKTtcblxuICAvLyBhbnl0aW1lIHRoZSBwcmVzcyBzdGF0ZSBjaGFuZ2VzIHdlIHdhbnQgdG8gdXBkYXRlIHRoZSBhdHRyaWJ1dGVcbiAgZWZmZWN0KCgpID0+XG4gICAgcHJlc3NlZCgpICYmICFkaXNhYmxlZCgpXG4gICAgICA/IGVsZW1lbnRSZWYubmF0aXZlRWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2RhdGEtcHJlc3MnLCAnJylcbiAgICAgIDogZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LnJlbW92ZUF0dHJpYnV0ZSgnZGF0YS1wcmVzcycpLFxuICApO1xuXG4gIC8qKlxuICAgKiBSZXNldCB0aGUgcHJlc3Mgc3RhdGUuXG4gICAqL1xuICBmdW5jdGlvbiByZXNldCgpOiB2b2lkIHtcbiAgICAvLyBpZiB3ZSBhcmUgbm90IHByZXNzaW5nLCB0aGVuIGRvIG5vdGhpbmdcbiAgICBpZiAoIXByZXNzZWQoKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIGNsZWFyIGFueSBleGlzdGluZyBkaXNwb3NhYmxlc1xuICAgIGRpc3Bvc2FibGVMaXN0ZW5lcnMuZm9yRWFjaChkaXNwb3NlID0+IGRpc3Bvc2UoKSk7XG4gICAgcHJlc3NlZC5zZXQoZmFsc2UpO1xuICAgIHByZXNzRW5kPy4oKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTdG9yZSB0aGUgbGlzdCBvZiBkaXNwb3NhYmxlcy5cbiAgICovXG4gIGxldCBkaXNwb3NhYmxlTGlzdGVuZXJzOiAoKCkgPT4gdm9pZClbXSA9IFtdO1xuXG4gIGZ1bmN0aW9uIG9uUG9pbnRlckRvd24oKTogdm9pZCB7XG4gICAgaWYgKGRpc2FibGVkKCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBjbGVhciBhbnkgZXhpc3RpbmcgZGlzcG9zYWJsZXNcbiAgICBkaXNwb3NhYmxlTGlzdGVuZXJzLmZvckVhY2goZGlzcG9zZSA9PiBkaXNwb3NlKCkpO1xuXG4gICAgLy8gdXBkYXRlIHRoZSBwcmVzcyBzdGF0ZVxuICAgIHByZXNzZWQuc2V0KHRydWUpO1xuICAgIHByZXNzU3RhcnQ/LigpO1xuXG4gICAgLy8gc2V0dXAgZ2xvYmFsIGV2ZW50IGxpc3RlbmVycyB0byBjYXRjaCBldmVudHMgb24gZWxlbWVudHMgb3V0c2lkZSB0aGUgZGlyZWN0aXZlXG4gICAgY29uc3Qgb3duZXJEb2N1bWVudCA9IGVsZW1lbnRSZWYubmF0aXZlRWxlbWVudC5vd25lckRvY3VtZW50ID8/IGRvY3VtZW50O1xuXG4gICAgLy8gaWYgdGhlIHBvaW50ZXIgdXAgZXZlbnQgaGFwcGVucyBvbiBhbnkgZWxlbWVudHMsIHRoZW4gd2UgYXJlIG5vIGxvbmdlciBwcmVzc2luZyBvbiB0aGlzIGVsZW1lbnRcbiAgICBjb25zdCBwb2ludGVyVXAgPSBkaXNwb3NhYmxlcy5hZGRFdmVudExpc3RlbmVyKFxuICAgICAgb3duZXJEb2N1bWVudCxcbiAgICAgICdwb2ludGVydXAnLFxuICAgICAgKCkgPT4gcmVzZXQoKSxcbiAgICAgIGZhbHNlLFxuICAgICk7XG5cbiAgICAvLyBJbnN0ZWFkIG9mIHJlbHlpbmcgb24gdGhlIGBwb2ludGVybGVhdmVgIGV2ZW50LCB3aGljaCBpcyBub3QgY29uc2lzdGVudGx5IGNhbGxlZCBvbiBpT1MgU2FmYXJpLFxuICAgIC8vIHdlIHVzZSB0aGUgYHBvaW50ZXJtb3ZlYCBldmVudCB0byBkZXRlcm1pbmUgaWYgd2UgYXJlIHN0aWxsIFwicHJlc3NpbmdcIi5cbiAgICAvLyBCeSBjaGVja2luZyBpZiB0aGUgdGFyZ2V0IGlzIHN0aWxsIHdpdGhpbiB0aGUgZWxlbWVudCwgd2UgY2FuIGRldGVybWluZSBpZiB0aGUgcHJlc3MgaXMgb25nb2luZy5cbiAgICBjb25zdCBwb2ludGVyTW92ZSA9IGRpc3Bvc2FibGVzLmFkZEV2ZW50TGlzdGVuZXIoXG4gICAgICBvd25lckRvY3VtZW50LFxuICAgICAgJ3BvaW50ZXJtb3ZlJyxcbiAgICAgICgpID0+IG9uUG9pbnRlck1vdmUgYXMgRXZlbnRMaXN0ZW5lcixcbiAgICAgIGZhbHNlLFxuICAgICk7XG5cbiAgICAvLyBpZiB0aGUgcG9pbnRlciBpcyBjYW5jZWxsZWQsIHRoZW4gd2UgYXJlIG5vIGxvbmdlciBwcmVzc2luZyBvbiB0aGlzIGVsZW1lbnRcbiAgICBjb25zdCBwb2ludGVyQ2FuY2VsID0gZGlzcG9zYWJsZXMuYWRkRXZlbnRMaXN0ZW5lcihcbiAgICAgIG93bmVyRG9jdW1lbnQsXG4gICAgICAncG9pbnRlcmNhbmNlbCcsXG4gICAgICAoKSA9PiByZXNldCgpLFxuICAgICAgZmFsc2UsXG4gICAgKTtcblxuICAgIGRpc3Bvc2FibGVMaXN0ZW5lcnMgPSBbcG9pbnRlclVwLCBwb2ludGVyTW92ZSwgcG9pbnRlckNhbmNlbF07XG4gIH1cblxuICBmdW5jdGlvbiBvblBvaW50ZXJNb3ZlKGV2ZW50OiBQb2ludGVyRXZlbnQpOiB2b2lkIHtcbiAgICBpZiAoXG4gICAgICBlbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQgIT09IGV2ZW50LnRhcmdldCAmJlxuICAgICAgIWVsZW1lbnRSZWYubmF0aXZlRWxlbWVudC5jb250YWlucyhldmVudC50YXJnZXQgYXMgTm9kZSlcbiAgICApIHtcbiAgICAgIHJlc2V0KCk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHsgcHJlc3NlZCB9O1xufVxuIl19