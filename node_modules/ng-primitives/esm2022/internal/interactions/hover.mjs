/**
 * Copyright © 2024 Angular Primitives.
 * https://github.com/ng-primitives/ng-primitives
 *
 * This source code is licensed under the Apache 2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */
import { DOCUMENT, isPlatformBrowser } from '@angular/common';
import { effect, ElementRef, inject, Injectable, PLATFORM_ID, signal } from '@angular/core';
import { injectDisposables, onBooleanChange } from 'ng-primitives/utils';
import * as i0 from "@angular/core";
/**
 * We use a service here as this value is a singleton
 * and allows us to register the dom events once.
 */
class GlobalPointerEvents {
    constructor() {
        /**
         * Whether global mouse events should be ignored.
         */
        this.ignoreEmulatedMouseEvents = false;
        /**
         * Access the document.
         */
        this.document = inject(DOCUMENT);
        /**
         * Determine the platform id.
         */
        this.platformId = inject(PLATFORM_ID);
        // we only want to setup events on the client
        if (isPlatformBrowser(this.platformId)) {
            this.setupGlobalTouchEvents();
        }
    }
    setupGlobalTouchEvents() {
        this.document.addEventListener('pointerup', this.handleGlobalPointerEvent.bind(this));
        this.document.addEventListener('touchend', this.setGlobalIgnoreEmulatedMouseEvents.bind(this));
    }
    setGlobalIgnoreEmulatedMouseEvents() {
        this.ignoreEmulatedMouseEvents = true;
        // Clear globalIgnoreEmulatedMouseEvents after a short timeout. iOS fires onPointerEnter
        // with pointerType="mouse" immediately after onPointerUp and before onFocus. On other
        // devices that don't have this quirk, we don't want to ignore a mouse hover sometime in
        // the distant future because a user previously touched the element.
        setTimeout(() => (this.ignoreEmulatedMouseEvents = false), 50);
    }
    handleGlobalPointerEvent(event) {
        if (event.pointerType === 'touch') {
            this.setGlobalIgnoreEmulatedMouseEvents();
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: GlobalPointerEvents, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: GlobalPointerEvents, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: GlobalPointerEvents, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: () => [] });
/**
 * Programatically add the hover functionality to an element.
 * This is useful in cases where we can't necessarily use a HostDirective,
 * because there is a chance the directive has already been used.
 */
export function setupHover({ hoverStart, hoverEnd, disabled = signal(false), }) {
    /**
     * Access the element.
     */
    const elementRef = inject(ElementRef);
    /**
     * Access the global pointer events handler.
     */
    const globalPointerEvents = inject(GlobalPointerEvents);
    /**
     * Access the disposable helper.
     */
    const disposables = injectDisposables();
    /**
     * Store the current hover state.
     */
    const hovered = signal(false);
    /**
     * Whether this element should ignore emulated mouse events.
     */
    let ignoreEmulatedMouseEvents = false;
    /**
     * Setup event listeners.
     */
    disposables.addEventListener(elementRef.nativeElement, 'pointerenter', onPointerEnter);
    disposables.addEventListener(elementRef.nativeElement, 'pointerleave', onPointerLeave);
    disposables.addEventListener(elementRef.nativeElement, 'touchstart', onTouchStart);
    disposables.addEventListener(elementRef.nativeElement, 'mouseenter', onMouseEnter);
    disposables.addEventListener(elementRef.nativeElement, 'mouseleave', onMouseLeave);
    // anytime the disabled state changes to true, we must reset the hover state
    if (disabled) {
        onBooleanChange(disabled, reset);
    }
    // anytime the hover state changes we want to update the attribute
    effect(() => hovered()
        ? elementRef.nativeElement.setAttribute('data-hover', '')
        : elementRef.nativeElement.removeAttribute('data-hover'));
    /**
     * Reset the hover state.
     */
    function reset() {
        onHoverEnd('mouse');
    }
    /**
     * Trigger the hover start events.
     * @param event
     * @param pointerType
     */
    function onHoverStart(event, pointerType) {
        if (disabled() ||
            pointerType === 'touch' ||
            hovered() ||
            !event.currentTarget?.contains(event.target)) {
            return;
        }
        hovered.set(true);
        hoverStart?.();
    }
    /**
     * Trigger the hover end events.
     * @param pointerType
     */
    function onHoverEnd(pointerType) {
        if (pointerType === 'touch' || !hovered()) {
            return;
        }
        hovered.set(false);
        hoverEnd?.();
    }
    function onPointerEnter(event) {
        if (globalPointerEvents.ignoreEmulatedMouseEvents && event.pointerType === 'mouse') {
            return;
        }
        onHoverStart(event, event.pointerType);
    }
    function onPointerLeave(event) {
        if (!disabled() && event.currentTarget?.contains(event.target)) {
            onHoverEnd(event.pointerType);
        }
    }
    function onTouchStart() {
        ignoreEmulatedMouseEvents = true;
    }
    function onMouseEnter(event) {
        if (!ignoreEmulatedMouseEvents && !globalPointerEvents.ignoreEmulatedMouseEvents) {
            onHoverStart(event, 'mouse');
        }
        ignoreEmulatedMouseEvents = false;
    }
    function onMouseLeave(event) {
        if (!disabled() && event.currentTarget?.contains(event.target)) {
            onHoverEnd('mouse');
        }
    }
    return { hovered };
}
//# sourceMappingURL=data:application/json;base64,