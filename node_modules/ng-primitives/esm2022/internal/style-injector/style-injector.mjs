/**
 * Copyright © 2024 Angular Primitives.
 * https://github.com/ng-primitives/ng-primitives
 *
 * This source code is licensed under the Apache 2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */
import { DOCUMENT, isPlatformBrowser } from '@angular/common';
import { inject, Injectable, PLATFORM_ID } from '@angular/core';
import * as i0 from "@angular/core";
/**
 * A utility service for injecting styles into the document.
 * Angular doesn't allow directives to specify styles, only components.
 * As we ship directives, occasionally we need to associate styles with them.
 * This service allows us to programmatically inject styles into the document.
 */
export class StyleInjector {
    constructor() {
        /**
         * Access the document.
         */
        this.document = inject(DOCUMENT);
        /**
         * Detect the platform.
         */
        this.platformId = inject(PLATFORM_ID);
        /**
         * Store the map of style elements with their unique identifiers.
         */
        this.styleElements = new Map();
        if (isPlatformBrowser(this.platformId)) {
            this.collectServerStyles();
        }
    }
    /**
     * Inject a style into the document.
     * @param id The unique identifier for the style.
     * @param style The style to inject.
     */
    add(id, style) {
        if (this.styleElements.has(id)) {
            return;
        }
        const styleElement = this.document.createElement('style');
        styleElement.setAttribute('data-ngp-style', id);
        styleElement.textContent = style;
        this.document.head.appendChild(styleElement);
        this.styleElements.set(id, styleElement);
    }
    /**
     * Remove a style from the document.
     * @param id The unique identifier for the style.
     */
    remove(id) {
        const styleElement = this.styleElements.get(id);
        if (styleElement) {
            this.document.head.removeChild(styleElement);
            this.styleElements.delete(id);
        }
    }
    /**
     * Collect any styles that were rendered by the server.
     */
    collectServerStyles() {
        const styleElements = this.document.querySelectorAll('style[data-ngp-style]');
        styleElements.forEach(styleElement => {
            const id = styleElement.getAttribute('data-ngp-style');
            if (id) {
                this.styleElements.set(id, styleElement);
            }
        });
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: StyleInjector, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: StyleInjector, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: StyleInjector, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: () => [] });
export function injectStyleInjector() {
    return inject(StyleInjector);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3R5bGUtaW5qZWN0b3IuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9uZy1wcmltaXRpdmVzL2ludGVybmFsL3NyYy9zdHlsZS1pbmplY3Rvci9zdHlsZS1pbmplY3Rvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7O0dBTUc7QUFDSCxPQUFPLEVBQUUsUUFBUSxFQUFFLGlCQUFpQixFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDOUQsT0FBTyxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsV0FBVyxFQUFFLE1BQU0sZUFBZSxDQUFDOztBQUVoRTs7Ozs7R0FLRztBQUlILE1BQU0sT0FBTyxhQUFhO0lBZ0J4QjtRQWZBOztXQUVHO1FBQ2MsYUFBUSxHQUFHLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUU3Qzs7V0FFRztRQUNjLGVBQVUsR0FBRyxNQUFNLENBQUMsV0FBVyxDQUFDLENBQUM7UUFFbEQ7O1dBRUc7UUFDYyxrQkFBYSxHQUFHLElBQUksR0FBRyxFQUE0QixDQUFDO1FBR25FLElBQUksaUJBQWlCLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUM7WUFDdkMsSUFBSSxDQUFDLG1CQUFtQixFQUFFLENBQUM7UUFDN0IsQ0FBQztJQUNILENBQUM7SUFFRDs7OztPQUlHO0lBQ0gsR0FBRyxDQUFDLEVBQVUsRUFBRSxLQUFhO1FBQzNCLElBQUksSUFBSSxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQztZQUMvQixPQUFPO1FBQ1QsQ0FBQztRQUVELE1BQU0sWUFBWSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQzFELFlBQVksQ0FBQyxZQUFZLENBQUMsZ0JBQWdCLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDaEQsWUFBWSxDQUFDLFdBQVcsR0FBRyxLQUFLLENBQUM7UUFFakMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLFlBQVksQ0FBQyxDQUFDO1FBQzdDLElBQUksQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFDLEVBQUUsRUFBRSxZQUFZLENBQUMsQ0FBQztJQUMzQyxDQUFDO0lBRUQ7OztPQUdHO0lBQ0gsTUFBTSxDQUFDLEVBQVU7UUFDZixNQUFNLFlBQVksR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUVoRCxJQUFJLFlBQVksRUFBRSxDQUFDO1lBQ2pCLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxZQUFZLENBQUMsQ0FBQztZQUM3QyxJQUFJLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUNoQyxDQUFDO0lBQ0gsQ0FBQztJQUVEOztPQUVHO0lBQ0ssbUJBQW1CO1FBQ3pCLE1BQU0sYUFBYSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsZ0JBQWdCLENBQW1CLHVCQUF1QixDQUFDLENBQUM7UUFFaEcsYUFBYSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsRUFBRTtZQUNuQyxNQUFNLEVBQUUsR0FBRyxZQUFZLENBQUMsWUFBWSxDQUFDLGdCQUFnQixDQUFDLENBQUM7WUFFdkQsSUFBSSxFQUFFLEVBQUUsQ0FBQztnQkFDUCxJQUFJLENBQUMsYUFBYSxDQUFDLEdBQUcsQ0FBQyxFQUFFLEVBQUUsWUFBWSxDQUFDLENBQUM7WUFDM0MsQ0FBQztRQUNILENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQzsrR0FsRVUsYUFBYTttSEFBYixhQUFhLGNBRlosTUFBTTs7NEZBRVAsYUFBYTtrQkFIekIsVUFBVTttQkFBQztvQkFDVixVQUFVLEVBQUUsTUFBTTtpQkFDbkI7O0FBc0VELE1BQU0sVUFBVSxtQkFBbUI7SUFDakMsT0FBTyxNQUFNLENBQUMsYUFBYSxDQUFDLENBQUM7QUFDL0IsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IMKpIDIwMjQgQW5ndWxhciBQcmltaXRpdmVzLlxuICogaHR0cHM6Ly9naXRodWIuY29tL25nLXByaW1pdGl2ZXMvbmctcHJpbWl0aXZlc1xuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSAyLjAgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuaW1wb3J0IHsgRE9DVU1FTlQsIGlzUGxhdGZvcm1Ccm93c2VyIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7IGluamVjdCwgSW5qZWN0YWJsZSwgUExBVEZPUk1fSUQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuLyoqXG4gKiBBIHV0aWxpdHkgc2VydmljZSBmb3IgaW5qZWN0aW5nIHN0eWxlcyBpbnRvIHRoZSBkb2N1bWVudC5cbiAqIEFuZ3VsYXIgZG9lc24ndCBhbGxvdyBkaXJlY3RpdmVzIHRvIHNwZWNpZnkgc3R5bGVzLCBvbmx5IGNvbXBvbmVudHMuXG4gKiBBcyB3ZSBzaGlwIGRpcmVjdGl2ZXMsIG9jY2FzaW9uYWxseSB3ZSBuZWVkIHRvIGFzc29jaWF0ZSBzdHlsZXMgd2l0aCB0aGVtLlxuICogVGhpcyBzZXJ2aWNlIGFsbG93cyB1cyB0byBwcm9ncmFtbWF0aWNhbGx5IGluamVjdCBzdHlsZXMgaW50byB0aGUgZG9jdW1lbnQuXG4gKi9cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnLFxufSlcbmV4cG9ydCBjbGFzcyBTdHlsZUluamVjdG9yIHtcbiAgLyoqXG4gICAqIEFjY2VzcyB0aGUgZG9jdW1lbnQuXG4gICAqL1xuICBwcml2YXRlIHJlYWRvbmx5IGRvY3VtZW50ID0gaW5qZWN0KERPQ1VNRU5UKTtcblxuICAvKipcbiAgICogRGV0ZWN0IHRoZSBwbGF0Zm9ybS5cbiAgICovXG4gIHByaXZhdGUgcmVhZG9ubHkgcGxhdGZvcm1JZCA9IGluamVjdChQTEFURk9STV9JRCk7XG5cbiAgLyoqXG4gICAqIFN0b3JlIHRoZSBtYXAgb2Ygc3R5bGUgZWxlbWVudHMgd2l0aCB0aGVpciB1bmlxdWUgaWRlbnRpZmllcnMuXG4gICAqL1xuICBwcml2YXRlIHJlYWRvbmx5IHN0eWxlRWxlbWVudHMgPSBuZXcgTWFwPHN0cmluZywgSFRNTFN0eWxlRWxlbWVudD4oKTtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBpZiAoaXNQbGF0Zm9ybUJyb3dzZXIodGhpcy5wbGF0Zm9ybUlkKSkge1xuICAgICAgdGhpcy5jb2xsZWN0U2VydmVyU3R5bGVzKCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEluamVjdCBhIHN0eWxlIGludG8gdGhlIGRvY3VtZW50LlxuICAgKiBAcGFyYW0gaWQgVGhlIHVuaXF1ZSBpZGVudGlmaWVyIGZvciB0aGUgc3R5bGUuXG4gICAqIEBwYXJhbSBzdHlsZSBUaGUgc3R5bGUgdG8gaW5qZWN0LlxuICAgKi9cbiAgYWRkKGlkOiBzdHJpbmcsIHN0eWxlOiBzdHJpbmcpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5zdHlsZUVsZW1lbnRzLmhhcyhpZCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBzdHlsZUVsZW1lbnQgPSB0aGlzLmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyk7XG4gICAgc3R5bGVFbGVtZW50LnNldEF0dHJpYnV0ZSgnZGF0YS1uZ3Atc3R5bGUnLCBpZCk7XG4gICAgc3R5bGVFbGVtZW50LnRleHRDb250ZW50ID0gc3R5bGU7XG5cbiAgICB0aGlzLmRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQoc3R5bGVFbGVtZW50KTtcbiAgICB0aGlzLnN0eWxlRWxlbWVudHMuc2V0KGlkLCBzdHlsZUVsZW1lbnQpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlbW92ZSBhIHN0eWxlIGZyb20gdGhlIGRvY3VtZW50LlxuICAgKiBAcGFyYW0gaWQgVGhlIHVuaXF1ZSBpZGVudGlmaWVyIGZvciB0aGUgc3R5bGUuXG4gICAqL1xuICByZW1vdmUoaWQ6IHN0cmluZyk6IHZvaWQge1xuICAgIGNvbnN0IHN0eWxlRWxlbWVudCA9IHRoaXMuc3R5bGVFbGVtZW50cy5nZXQoaWQpO1xuXG4gICAgaWYgKHN0eWxlRWxlbWVudCkge1xuICAgICAgdGhpcy5kb2N1bWVudC5oZWFkLnJlbW92ZUNoaWxkKHN0eWxlRWxlbWVudCk7XG4gICAgICB0aGlzLnN0eWxlRWxlbWVudHMuZGVsZXRlKGlkKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQ29sbGVjdCBhbnkgc3R5bGVzIHRoYXQgd2VyZSByZW5kZXJlZCBieSB0aGUgc2VydmVyLlxuICAgKi9cbiAgcHJpdmF0ZSBjb2xsZWN0U2VydmVyU3R5bGVzKCk6IHZvaWQge1xuICAgIGNvbnN0IHN0eWxlRWxlbWVudHMgPSB0aGlzLmRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGw8SFRNTFN0eWxlRWxlbWVudD4oJ3N0eWxlW2RhdGEtbmdwLXN0eWxlXScpO1xuXG4gICAgc3R5bGVFbGVtZW50cy5mb3JFYWNoKHN0eWxlRWxlbWVudCA9PiB7XG4gICAgICBjb25zdCBpZCA9IHN0eWxlRWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2RhdGEtbmdwLXN0eWxlJyk7XG5cbiAgICAgIGlmIChpZCkge1xuICAgICAgICB0aGlzLnN0eWxlRWxlbWVudHMuc2V0KGlkLCBzdHlsZUVsZW1lbnQpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpbmplY3RTdHlsZUluamVjdG9yKCk6IFN0eWxlSW5qZWN0b3Ige1xuICByZXR1cm4gaW5qZWN0KFN0eWxlSW5qZWN0b3IpO1xufVxuIl19