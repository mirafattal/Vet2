import { DomPortalOutlet, TemplatePortal } from '@angular/cdk/portal';
import { DOCUMENT } from '@angular/common';
import { Directive, ElementRef, Injector, ViewContainerRef, booleanAttribute, computed, inject, input, model, numberAttribute, signal, } from '@angular/core';
import { autoUpdate, computePosition, flip, offset, shift, } from '@floating-ui/dom';
import { injectDisposables, onBooleanChange } from 'ng-primitives/utils';
import { injectTooltipConfig } from '../config/tooltip.config';
import { NgpTooltipTriggerToken, provideTooltipTrigger } from './tooltip-trigger.token';
import * as i0 from "@angular/core";
export class NgpTooltipTrigger {
    constructor() {
        /**
         * Access the trigger element
         */
        this.trigger = inject((ElementRef));
        /**
         * Access the view container ref.
         */
        this.viewContainerRef = inject(ViewContainerRef);
        /**
         * Access the document.
         */
        this.document = inject(DOCUMENT);
        /**
         * Access the injector.
         */
        this.injector = inject(Injector);
        /**
         * Access the global tooltip configuration.
         */
        this.config = injectTooltipConfig();
        /**
         * Access the disposable utilities
         */
        this.disposables = injectDisposables();
        /**
         * Access the tooltip template ref.
         */
        this.tooltip = input.required({
            alias: 'ngpTooltipTrigger',
        });
        /**
         * The open state of the tooltip.
         * @default false
         */
        this.open = model(false, {
            alias: 'ngpTooltipTriggerOpen',
        });
        /**
         * Define if the trigger should be disabled.
         * @default false
         */
        this.disabled = input(false, {
            alias: 'ngpTooltipTriggerDisabled',
            transform: booleanAttribute,
        });
        /**
         * Define the placement of the tooltip relative to the trigger.
         * @default 'top'
         */
        this.placement = input(this.config.placement, {
            alias: 'ngpTooltipTriggerPlacement',
        });
        /**
         * Define the offset of the tooltip relative to the trigger.
         * @default 0
         */
        this.offset = input(this.config.offset, {
            alias: 'ngpTooltipTriggerOffset',
            transform: numberAttribute,
        });
        /**
         * Define the delay before the tooltip is displayed.
         * @default 0
         */
        this.showDelay = input(this.config.showDelay, {
            alias: 'ngpTooltipTriggerShowDelay',
            transform: numberAttribute,
        });
        /**
         * Define the delay before the tooltip is hidden.
         * @default 0
         */
        this.hideDelay = input(this.config.hideDelay, {
            alias: 'ngpTooltipTriggerHideDelay',
            transform: numberAttribute,
        });
        /**
         * Define whether the tooltip should flip when there is not enough space for the tooltip.
         * @default true
         */
        this.flip = input(this.config.flip, {
            alias: 'ngpTooltipTriggerFlip',
            transform: booleanAttribute,
        });
        /**
         * Define the container in which the tooltip should be attached.
         * @default document.body
         */
        this.container = input(this.config.container, {
            alias: 'ngpTooltipTriggerContainer',
        });
        /**
         * Store the tooltip view ref.
         */
        this.viewRef = null;
        /**
         * Derive the tooltip middleware from the provided configuration.
         */
        this.middleware = computed(() => {
            const middleware = [offset(this.offset()), shift()];
            if (this.flip()) {
                middleware.push(flip());
            }
            return middleware;
        });
        /**
         * Store the computed position of the tooltip.
         * @internal
         */
        this.position = signal({
            x: 0,
            y: 0,
        });
        /**
         * Store the state of the tooltip.
         * @internal
         */
        this.state = signal('closed');
        // any time the open state changes then show or hide the tooltip
        onBooleanChange(this.open, this.show.bind(this), this.hide.bind(this));
    }
    ngOnDestroy() {
        this.destroyTooltip();
    }
    show() {
        // if the trigger is disabled or the tooltip is already open then do not show the tooltip
        if (this.disabled() || this.state() === 'open' || this.state() === 'opening') {
            return;
        }
        this.state.set('opening');
        this.disposables.setTimeout(() => this.createTooltip(), this.showDelay());
    }
    hide() {
        // if the trigger is disabled or the tooltip is already closed then do not hide the tooltip
        if (this.disabled() || this.state() === 'closed' || this.state() === 'closing') {
            return;
        }
        this.state.set('closing');
        this.disposables.setTimeout(() => this.destroyTooltip(), this.hideDelay());
    }
    createTooltip() {
        const portal = new TemplatePortal(this.tooltip(), this.viewContainerRef, undefined, this.injector);
        const domOutlet = new DomPortalOutlet(this.container() ?? this.document.body, undefined, undefined, Injector.create({
            parent: this.injector,
            providers: [provideTooltipTrigger(this)],
        }));
        this.viewRef = domOutlet.attach(portal);
        this.viewRef.detectChanges();
        const outletElement = this.viewRef.rootNodes[0];
        this.dispose = autoUpdate(this.trigger.nativeElement, outletElement, async () => {
            const position = await computePosition(this.trigger.nativeElement, outletElement, {
                placement: this.placement(),
                middleware: this.middleware(),
            });
            this.position.set({ x: position.x, y: position.y });
        });
        this.state.set('open');
    }
    destroyTooltip() {
        this.viewRef?.destroy();
        this.viewRef = null;
        this.dispose?.();
        this.state.set('closed');
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: NgpTooltipTrigger, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "17.1.0", version: "18.2.13", type: NgpTooltipTrigger, isStandalone: true, selector: "[ngpTooltipTrigger]", inputs: { tooltip: { classPropertyName: "tooltip", publicName: "ngpTooltipTrigger", isSignal: true, isRequired: true, transformFunction: null }, open: { classPropertyName: "open", publicName: "ngpTooltipTriggerOpen", isSignal: true, isRequired: false, transformFunction: null }, disabled: { classPropertyName: "disabled", publicName: "ngpTooltipTriggerDisabled", isSignal: true, isRequired: false, transformFunction: null }, placement: { classPropertyName: "placement", publicName: "ngpTooltipTriggerPlacement", isSignal: true, isRequired: false, transformFunction: null }, offset: { classPropertyName: "offset", publicName: "ngpTooltipTriggerOffset", isSignal: true, isRequired: false, transformFunction: null }, showDelay: { classPropertyName: "showDelay", publicName: "ngpTooltipTriggerShowDelay", isSignal: true, isRequired: false, transformFunction: null }, hideDelay: { classPropertyName: "hideDelay", publicName: "ngpTooltipTriggerHideDelay", isSignal: true, isRequired: false, transformFunction: null }, flip: { classPropertyName: "flip", publicName: "ngpTooltipTriggerFlip", isSignal: true, isRequired: false, transformFunction: null }, container: { classPropertyName: "container", publicName: "ngpTooltipTriggerContainer", isSignal: true, isRequired: false, transformFunction: null } }, outputs: { open: "ngpTooltipTriggerOpenChange" }, host: { listeners: { "mouseenter": "open.set(true)", "mouseleave": "open.set(false)", "focus": "open.set(true)", "blur": "open.set(false)" }, properties: { "attr.data-state": "state()", "attr.data-disabled": "disabled() ? \"\" : null" } }, providers: [{ provide: NgpTooltipTriggerToken, useExisting: NgpTooltipTrigger }], exportAs: ["ngpTooltipTrigger"], ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: NgpTooltipTrigger, decorators: [{
            type: Directive,
            args: [{
                    standalone: true,
                    selector: '[ngpTooltipTrigger]',
                    exportAs: 'ngpTooltipTrigger',
                    providers: [{ provide: NgpTooltipTriggerToken, useExisting: NgpTooltipTrigger }],
                    host: {
                        '[attr.data-state]': 'state()',
                        '[attr.data-disabled]': 'disabled() ? "" : null',
                        '(mouseenter)': 'open.set(true)',
                        '(mouseleave)': 'open.set(false)',
                        '(focus)': 'open.set(true)',
                        '(blur)': 'open.set(false)',
                    },
                }]
        }], ctorParameters: () => [] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9vbHRpcC10cmlnZ2VyLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL25nLXByaW1pdGl2ZXMvdG9vbHRpcC9zcmMvdG9vbHRpcC10cmlnZ2VyL3Rvb2x0aXAtdHJpZ2dlci5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBUUEsT0FBTyxFQUFFLGVBQWUsRUFBRSxjQUFjLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUN0RSxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDM0MsT0FBTyxFQUNMLFNBQVMsRUFDVCxVQUFVLEVBRVYsUUFBUSxFQUdSLGdCQUFnQixFQUNoQixnQkFBZ0IsRUFDaEIsUUFBUSxFQUNSLE1BQU0sRUFDTixLQUFLLEVBQ0wsS0FBSyxFQUNMLGVBQWUsRUFDZixNQUFNLEdBQ1AsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUdMLFVBQVUsRUFDVixlQUFlLEVBQ2YsSUFBSSxFQUNKLE1BQU0sRUFDTixLQUFLLEdBQ04sTUFBTSxrQkFBa0IsQ0FBQztBQUMxQixPQUFPLEVBQUUsaUJBQWlCLEVBQUUsZUFBZSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDekUsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDL0QsT0FBTyxFQUFFLHNCQUFzQixFQUFFLHFCQUFxQixFQUFFLE1BQU0seUJBQXlCLENBQUM7O0FBZ0J4RixNQUFNLE9BQU8saUJBQWlCO0lBaUo1QjtRQWhKQTs7V0FFRztRQUNjLFlBQU8sR0FBRyxNQUFNLENBQUMsQ0FBQSxVQUF1QixDQUFBLENBQUMsQ0FBQztRQUUzRDs7V0FFRztRQUNjLHFCQUFnQixHQUFHLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1FBRTdEOztXQUVHO1FBQ2MsYUFBUSxHQUFHLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUU3Qzs7V0FFRztR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Q0FBQzsrR0F0TlUsaUJBQWlCO21HQUFqQixpQkFBaUIscW5EQVZqQixDQUFDLEVBQUUsT0FBTyxFQUFFLHNCQUFzQixFQUFFLFdBQVcsRUFBRSxpQkFBaUIsRUFBRSxDQUFDOzs0RkFVckUsaUJBQWlCO2tCQWQ3QixTQUFTO21CQUFDO29CQUNULFVBQVUsRUFBRSxJQUFJO29CQUNoQixRQUFRLEVBQUUscUJBQXFCO29CQUMvQixRQUFRLEVBQUUsbUJBQW1CO29CQUM3QixTQUFTLEVBQUUsQ0FBQyxFQUFFLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxXQUFXLG1CQUFtQixFQUFFLENBQUM7b0JBQ2hGLElBQUksRUFBRTt3QkFDSixtQkFBbUIsRUFBRSxTQUFTO3dCQUM5QixzQkFBc0IsRUFBRSx3QkFBd0I7d0JBQ2hELGNBQWMsRUFBRSxnQkFBZ0I7d0JBQ2hDLGNBQWMsRUFBRSxpQkFBaUI7d0JBQ2pDLFNBQVMsRUFBRSxnQkFBZ0I7d0JBQzNCLFFBQVEsRUFBRSxpQkFBaUI7cUJBQzVCO2lCQUNGIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgwqkgMjAyNCBBbmd1bGFyIFByaW1pdGl2ZXMuXG4gKiBodHRwczovL2dpdGh1Yi5jb20vbmctcHJpbWl0aXZlcy9uZy1wcmltaXRpdmVzXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIDIuMCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5pbXBvcnQgeyBCb29sZWFuSW5wdXQsIE51bWJlcklucHV0IH0gZnJvbSAnQGFuZ3VsYXIvY2RrL2NvZXJjaW9uJztcbmltcG9ydCB7IERvbVBvcnRhbE91dGxldCwgVGVtcGxhdGVQb3J0YWwgfSBmcm9tICdAYW5ndWxhci9jZGsvcG9ydGFsJztcbmltcG9ydCB7IERPQ1VNRU5UIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7XG4gIERpcmVjdGl2ZSxcbiAgRWxlbWVudFJlZixcbiAgRW1iZWRkZWRWaWV3UmVmLFxuICBJbmplY3RvcixcbiAgT25EZXN0cm95LFxuICBUZW1wbGF0ZVJlZixcbiAgVmlld0NvbnRhaW5lclJlZixcbiAgYm9vbGVhbkF0dHJpYnV0ZSxcbiAgY29tcHV0ZWQsXG4gIGluamVjdCxcbiAgaW5wdXQsXG4gIG1vZGVsLFxuICBudW1iZXJBdHRyaWJ1dGUsXG4gIHNpZ25hbCxcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1xuICBNaWRkbGV3YXJlLFxuICBQbGFjZW1lbnQsXG4gIGF1dG9VcGRhdGUsXG4gIGNvbXB1dGVQb3NpdGlvbixcbiAgZmxpcCxcbiAgb2Zmc2V0LFxuICBzaGlmdCxcbn0gZnJvbSAnQGZsb2F0aW5nLXVpL2RvbSc7XG5pbXBvcnQgeyBpbmplY3REaXNwb3NhYmxlcywgb25Cb29sZWFuQ2hhbmdlIH0gZnJvbSAnbmctcHJpbWl0aXZlcy91dGlscyc7XG5pbXBvcnQgeyBpbmplY3RUb29sdGlwQ29uZmlnIH0gZnJvbSAnLi4vY29uZmlnL3Rvb2x0aXAuY29uZmlnJztcbmltcG9ydCB7IE5ncFRvb2x0aXBUcmlnZ2VyVG9rZW4sIHByb3ZpZGVUb29sdGlwVHJpZ2dlciB9IGZyb20gJy4vdG9vbHRpcC10cmlnZ2VyLnRva2VuJztcblxuQERpcmVjdGl2ZSh7XG4gIHN0YW5kYWxvbmU6IHRydWUsXG4gIHNlbGVjdG9yOiAnW25ncFRvb2x0aXBUcmlnZ2VyXScsXG4gIGV4cG9ydEFzOiAnbmdwVG9vbHRpcFRyaWdnZXInLFxuICBwcm92aWRlcnM6IFt7IHByb3ZpZGU6IE5ncFRvb2x0aXBUcmlnZ2VyVG9rZW4sIHVzZUV4aXN0aW5nOiBOZ3BUb29sdGlwVHJpZ2dlciB9XSxcbiAgaG9zdDoge1xuICAgICdbYXR0ci5kYXRhLXN0YXRlXSc6ICdzdGF0ZSgpJyxcbiAgICAnW2F0dHIuZGF0YS1kaXNhYmxlZF0nOiAnZGlzYWJsZWQoKSA/IFwiXCIgOiBudWxsJyxcbiAgICAnKG1vdXNlZW50ZXIpJzogJ29wZW4uc2V0KHRydWUpJyxcbiAgICAnKG1vdXNlbGVhdmUpJzogJ29wZW4uc2V0KGZhbHNlKScsXG4gICAgJyhmb2N1cyknOiAnb3Blbi5zZXQodHJ1ZSknLFxuICAgICcoYmx1ciknOiAnb3Blbi5zZXQoZmFsc2UpJyxcbiAgfSxcbn0pXG5leHBvcnQgY2xhc3MgTmdwVG9vbHRpcFRyaWdnZXIgaW1wbGVtZW50cyBPbkRlc3Ryb3kge1xuICAvKipcbiAgICogQWNjZXNzIHRoZSB0cmlnZ2VyIGVsZW1lbnRcbiAgICovXG4gIHByaXZhdGUgcmVhZG9ubHkgdHJpZ2dlciA9IGluamVjdChFbGVtZW50UmVmPEhUTUxFbGVtZW50Pik7XG5cbiAgLyoqXG4gICAqIEFjY2VzcyB0aGUgdmlldyBjb250YWluZXIgcmVmLlxuICAgKi9cbiAgcHJpdmF0ZSByZWFkb25seSB2aWV3Q29udGFpbmVyUmVmID0gaW5qZWN0KFZpZXdDb250YWluZXJSZWYpO1xuXG4gIC8qKlxuICAgKiBBY2Nlc3MgdGhlIGRvY3VtZW50LlxuICAgKi9cbiAgcHJpdmF0ZSByZWFkb25seSBkb2N1bWVudCA9IGluamVjdChET0NVTUVOVCk7XG5cbiAgLyoqXG4gICAqIEFjY2VzcyB0aGUgaW5qZWN0b3IuXG4gICAqL1xuICBwcml2YXRlIHJlYWRvbmx5IGluamVjdG9yID0gaW5qZWN0KEluamVjdG9yKTtcblxuICAvKipcbiAgICogQWNjZXNzIHRoZSBnbG9iYWwgdG9vbHRpcCBjb25maWd1cmF0aW9uLlxuICAgKi9cbiAgcHJpdmF0ZSByZWFkb25seSBjb25maWcgPSBpbmplY3RUb29sdGlwQ29uZmlnKCk7XG5cbiAgLyoqXG4gICAqIEFjY2VzcyB0aGUgZGlzcG9zYWJsZSB1dGlsaXRpZXNcbiAgICovXG4gIHByaXZhdGUgcmVhZG9ubHkgZGlzcG9zYWJsZXMgPSBpbmplY3REaXNwb3NhYmxlcygpO1xuXG4gIC8qKlxuICAgKiBBY2Nlc3MgdGhlIHRvb2x0aXAgdGVtcGxhdGUgcmVmLlxuICAgKi9cbiAgcmVhZG9ubHkgdG9vbHRpcCA9IGlucHV0LnJlcXVpcmVkPFRlbXBsYXRlUmVmPHZvaWQ+Pih7XG4gICAgYWxpYXM6ICduZ3BUb29sdGlwVHJpZ2dlcicsXG4gIH0pO1xuXG4gIC8qKlxuICAgKiBUaGUgb3BlbiBzdGF0ZSBvZiB0aGUgdG9vbHRpcC5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIHJlYWRvbmx5IG9wZW4gPSBtb2RlbDxib29sZWFuPihmYWxzZSwge1xuICAgIGFsaWFzOiAnbmdwVG9vbHRpcFRyaWdnZXJPcGVuJyxcbiAgfSk7XG5cbiAgLyoqXG4gICAqIERlZmluZSBpZiB0aGUgdHJpZ2dlciBzaG91bGQgYmUgZGlzYWJsZWQuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICByZWFkb25seSBkaXNhYmxlZCA9IGlucHV0PGJvb2xlYW4sIEJvb2xlYW5JbnB1dD4oZmFsc2UsIHtcbiAgICBhbGlhczogJ25ncFRvb2x0aXBUcmlnZ2VyRGlzYWJsZWQnLFxuICAgIHRyYW5zZm9ybTogYm9vbGVhbkF0dHJpYnV0ZSxcbiAgfSk7XG5cbiAgLyoqXG4gICAqIERlZmluZSB0aGUgcGxhY2VtZW50IG9mIHRoZSB0b29sdGlwIHJlbGF0aXZlIHRvIHRoZSB0cmlnZ2VyLlxuICAgKiBAZGVmYXVsdCAndG9wJ1xuICAgKi9cbiAgcmVhZG9ubHkgcGxhY2VtZW50ID0gaW5wdXQ8UGxhY2VtZW50Pih0aGlzLmNvbmZpZy5wbGFjZW1lbnQsIHtcbiAgICBhbGlhczogJ25ncFRvb2x0aXBUcmlnZ2VyUGxhY2VtZW50JyxcbiAgfSk7XG5cbiAgLyoqXG4gICAqIERlZmluZSB0aGUgb2Zmc2V0IG9mIHRoZSB0b29sdGlwIHJlbGF0aXZlIHRvIHRoZSB0cmlnZ2VyLlxuICAgKiBAZGVmYXVsdCAwXG4gICAqL1xuICByZWFkb25seSBvZmZzZXQgPSBpbnB1dDxudW1iZXIsIE51bWJlcklucHV0Pih0aGlzLmNvbmZpZy5vZmZzZXQsIHtcbiAgICBhbGlhczogJ25ncFRvb2x0aXBUcmlnZ2VyT2Zmc2V0JyxcbiAgICB0cmFuc2Zvcm06IG51bWJlckF0dHJpYnV0ZSxcbiAgfSk7XG5cbiAgLyoqXG4gICAqIERlZmluZSB0aGUgZGVsYXkgYmVmb3JlIHRoZSB0b29sdGlwIGlzIGRpc3BsYXllZC5cbiAgICogQGRlZmF1bHQgMFxuICAgKi9cbiAgcmVhZG9ubHkgc2hvd0RlbGF5ID0gaW5wdXQ8bnVtYmVyLCBOdW1iZXJJbnB1dD4odGhpcy5jb25maWcuc2hvd0RlbGF5LCB7XG4gICAgYWxpYXM6ICduZ3BUb29sdGlwVHJpZ2dlclNob3dEZWxheScsXG4gICAgdHJhbnNmb3JtOiBudW1iZXJBdHRyaWJ1dGUsXG4gIH0pO1xuXG4gIC8qKlxuICAgKiBEZWZpbmUgdGhlIGRlbGF5IGJlZm9yZSB0aGUgdG9vbHRpcCBpcyBoaWRkZW4uXG4gICAqIEBkZWZhdWx0IDBcbiAgICovXG4gIHJlYWRvbmx5IGhpZGVEZWxheSA9IGlucHV0PG51bWJlciwgTnVtYmVySW5wdXQ+KHRoaXMuY29uZmlnLmhpZGVEZWxheSwge1xuICAgIGFsaWFzOiAnbmdwVG9vbHRpcFRyaWdnZXJIaWRlRGVsYXknLFxuICAgIHRyYW5zZm9ybTogbnVtYmVyQXR0cmlidXRlLFxuICB9KTtcblxuICAvKipcbiAgICogRGVmaW5lIHdoZXRoZXIgdGhlIHRvb2x0aXAgc2hvdWxkIGZsaXAgd2hlbiB0aGVyZSBpcyBub3QgZW5vdWdoIHNwYWNlIGZvciB0aGUgdG9vbHRpcC5cbiAgICogQGRlZmF1bHQgdHJ1ZVxuICAgKi9cbiAgcmVhZG9ubHkgZmxpcCA9IGlucHV0PGJvb2xlYW4sIEJvb2xlYW5JbnB1dD4odGhpcy5jb25maWcuZmxpcCwge1xuICAgIGFsaWFzOiAnbmdwVG9vbHRpcFRyaWdnZXJGbGlwJyxcbiAgICB0cmFuc2Zvcm06IGJvb2xlYW5BdHRyaWJ1dGUsXG4gIH0pO1xuXG4gIC8qKlxuICAgKiBEZWZpbmUgdGhlIGNvbnRhaW5lciBpbiB3aGljaCB0aGUgdG9vbHRpcCBzaG91bGQgYmUgYXR0YWNoZWQuXG4gICAqIEBkZWZhdWx0IGRvY3VtZW50LmJvZHlcbiAgICovXG4gIHJlYWRvbmx5IGNvbnRhaW5lciA9IGlucHV0PEhUTUxFbGVtZW50IHwgbnVsbD4odGhpcy5jb25maWcuY29udGFpbmVyLCB7XG4gICAgYWxpYXM6ICduZ3BUb29sdGlwVHJpZ2dlckNvbnRhaW5lcicsXG4gIH0pO1xuXG4gIC8qKlxuICAgKiBTdG9yZSB0aGUgdG9vbHRpcCB2aWV3IHJlZi5cbiAgICovXG4gIHByaXZhdGUgdmlld1JlZjogRW1iZWRkZWRWaWV3UmVmPHZvaWQ+IHwgbnVsbCA9IG51bGw7XG5cbiAgLyoqXG4gICAqIERlcml2ZSB0aGUgdG9vbHRpcCBtaWRkbGV3YXJlIGZyb20gdGhlIHByb3ZpZGVkIGNvbmZpZ3VyYXRpb24uXG4gICAqL1xuICBwcml2YXRlIHJlYWRvbmx5IG1pZGRsZXdhcmUgPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgY29uc3QgbWlkZGxld2FyZTogTWlkZGxld2FyZVtdID0gW29mZnNldCh0aGlzLm9mZnNldCgpKSwgc2hpZnQoKV07XG5cbiAgICBpZiAodGhpcy5mbGlwKCkpIHtcbiAgICAgIG1pZGRsZXdhcmUucHVzaChmbGlwKCkpO1xuICAgIH1cblxuICAgIHJldHVybiBtaWRkbGV3YXJlO1xuICB9KTtcblxuICAvKipcbiAgICogU3RvcmUgdGhlIGNvbXB1dGVkIHBvc2l0aW9uIG9mIHRoZSB0b29sdGlwLlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIHJlYWRvbmx5IHBvc2l0aW9uID0gc2lnbmFsPHsgeDogbnVtYmVyOyB5OiBudW1iZXIgfT4oe1xuICAgIHg6IDAsXG4gICAgeTogMCxcbiAgfSk7XG5cbiAgLyoqXG4gICAqIFN0b3JlIHRoZSBzdGF0ZSBvZiB0aGUgdG9vbHRpcC5cbiAgICogQGludGVybmFsXG4gICAqL1xuICByZWFkb25seSBzdGF0ZSA9IHNpZ25hbDxUb29sdGlwU3RhdGU+KCdjbG9zZWQnKTtcblxuICAvKipcbiAgICogVGhlIGRpc3Bvc2UgZnVuY3Rpb24gdG8gc3RvcCBjb21wdXRpbmcgdGhlIHBvc2l0aW9uIG9mIHRoZSB0b29sdGlwLlxuICAgKi9cbiAgcHJpdmF0ZSBkaXNwb3NlPzogKCkgPT4gdm9pZDtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICAvLyBhbnkgdGltZSB0aGUgb3BlbiBzdGF0ZSBjaGFuZ2VzIHRoZW4gc2hvdyBvciBoaWRlIHRoZSB0b29sdGlwXG4gICAgb25Cb29sZWFuQ2hhbmdlKHRoaXMub3BlbiwgdGhpcy5zaG93LmJpbmQodGhpcyksIHRoaXMuaGlkZS5iaW5kKHRoaXMpKTtcbiAgfVxuXG4gIG5nT25EZXN0cm95KCk6IHZvaWQge1xuICAgIHRoaXMuZGVzdHJveVRvb2x0aXAoKTtcbiAgfVxuXG4gIHByaXZhdGUgc2hvdygpOiB2b2lkIHtcbiAgICAvLyBpZiB0aGUgdHJpZ2dlciBpcyBkaXNhYmxlZCBvciB0aGUgdG9vbHRpcCBpcyBhbHJlYWR5IG9wZW4gdGhlbiBkbyBub3Qgc2hvdyB0aGUgdG9vbHRpcFxuICAgIGlmICh0aGlzLmRpc2FibGVkKCkgfHwgdGhpcy5zdGF0ZSgpID09PSAnb3BlbicgfHwgdGhpcy5zdGF0ZSgpID09PSAnb3BlbmluZycpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLnN0YXRlLnNldCgnb3BlbmluZycpO1xuICAgIHRoaXMuZGlzcG9zYWJsZXMuc2V0VGltZW91dCgoKSA9PiB0aGlzLmNyZWF0ZVRvb2x0aXAoKSwgdGhpcy5zaG93RGVsYXkoKSk7XG4gIH1cblxuICBwcml2YXRlIGhpZGUoKTogdm9pZCB7XG4gICAgLy8gaWYgdGhlIHRyaWdnZXIgaXMgZGlzYWJsZWQgb3IgdGhlIHRvb2x0aXAgaXMgYWxyZWFkeSBjbG9zZWQgdGhlbiBkbyBub3QgaGlkZSB0aGUgdG9vbHRpcFxuICAgIGlmICh0aGlzLmRpc2FibGVkKCkgfHwgdGhpcy5zdGF0ZSgpID09PSAnY2xvc2VkJyB8fCB0aGlzLnN0YXRlKCkgPT09ICdjbG9zaW5nJykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuc3RhdGUuc2V0KCdjbG9zaW5nJyk7XG4gICAgdGhpcy5kaXNwb3NhYmxlcy5zZXRUaW1lb3V0KCgpID0+IHRoaXMuZGVzdHJveVRvb2x0aXAoKSwgdGhpcy5oaWRlRGVsYXkoKSk7XG4gIH1cblxuICBwcml2YXRlIGNyZWF0ZVRvb2x0aXAoKTogdm9pZCB7XG4gICAgY29uc3QgcG9ydGFsID0gbmV3IFRlbXBsYXRlUG9ydGFsKFxuICAgICAgdGhpcy50b29sdGlwKCksXG4gICAgICB0aGlzLnZpZXdDb250YWluZXJSZWYsXG4gICAgICB1bmRlZmluZWQsXG4gICAgICB0aGlzLmluamVjdG9yLFxuICAgICk7XG5cbiAgICBjb25zdCBkb21PdXRsZXQgPSBuZXcgRG9tUG9ydGFsT3V0bGV0KFxuICAgICAgdGhpcy5jb250YWluZXIoKSA/PyB0aGlzLmRvY3VtZW50LmJvZHksXG4gICAgICB1bmRlZmluZWQsXG4gICAgICB1bmRlZmluZWQsXG4gICAgICBJbmplY3Rvci5jcmVhdGUoe1xuICAgICAgICBwYXJlbnQ6IHRoaXMuaW5qZWN0b3IsXG4gICAgICAgIHByb3ZpZGVyczogW3Byb3ZpZGVUb29sdGlwVHJpZ2dlcih0aGlzKV0sXG4gICAgICB9KSxcbiAgICApO1xuXG4gICAgdGhpcy52aWV3UmVmID0gZG9tT3V0bGV0LmF0dGFjaChwb3J0YWwpO1xuICAgIHRoaXMudmlld1JlZi5kZXRlY3RDaGFuZ2VzKCk7XG5cbiAgICBjb25zdCBvdXRsZXRFbGVtZW50ID0gdGhpcy52aWV3UmVmLnJvb3ROb2Rlc1swXTtcblxuICAgIHRoaXMuZGlzcG9zZSA9IGF1dG9VcGRhdGUodGhpcy50cmlnZ2VyLm5hdGl2ZUVsZW1lbnQsIG91dGxldEVsZW1lbnQsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IHBvc2l0aW9uID0gYXdhaXQgY29tcHV0ZVBvc2l0aW9uKHRoaXMudHJpZ2dlci5uYXRpdmVFbGVtZW50LCBvdXRsZXRFbGVtZW50LCB7XG4gICAgICAgIHBsYWNlbWVudDogdGhpcy5wbGFjZW1lbnQoKSxcbiAgICAgICAgbWlkZGxld2FyZTogdGhpcy5taWRkbGV3YXJlKCksXG4gICAgICB9KTtcblxuICAgICAgdGhpcy5wb3NpdGlvbi5zZXQoeyB4OiBwb3NpdGlvbi54LCB5OiBwb3NpdGlvbi55IH0pO1xuICAgIH0pO1xuXG4gICAgdGhpcy5zdGF0ZS5zZXQoJ29wZW4nKTtcbiAgfVxuXG4gIHByaXZhdGUgZGVzdHJveVRvb2x0aXAoKTogdm9pZCB7XG4gICAgdGhpcy52aWV3UmVmPy5kZXN0cm95KCk7XG4gICAgdGhpcy52aWV3UmVmID0gbnVsbDtcbiAgICB0aGlzLmRpc3Bvc2U/LigpO1xuICAgIHRoaXMuc3RhdGUuc2V0KCdjbG9zZWQnKTtcbiAgfVxufVxuXG5leHBvcnQgdHlwZSBUb29sdGlwU3RhdGUgPSAnY2xvc2VkJyB8ICdvcGVuaW5nJyB8ICdvcGVuJyB8ICdjbG9zaW5nJztcbiJdfQ==