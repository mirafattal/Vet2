/**
 * Copyright © 2024 Angular Primitives.
 * https://github.com/ng-primitives/ng-primitives
 *
 * This source code is licensed under the Apache 2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */
import { Directive, HostListener, input } from '@angular/core';
import { uniqueId } from 'ng-primitives/utils';
import { injectAccordionItem } from '../accordion-item/accordion-item.token';
import { injectAccordion } from '../accordion/accordion.token';
import { NgpAccordionTriggerToken } from './accordion-trigger.token';
import * as i0 from "@angular/core";
export class NgpAccordionTrigger {
    constructor() {
        /**
         * Access the parent accordion.
         */
        this.accordion = injectAccordion();
        /**
         * The item instance.
         */
        this.item = injectAccordionItem();
        /**
         * The id of the trigger.
         */
        this.id = input(uniqueId('ngp-accordion-trigger'));
    }
    /**
     * Toggle the accordion item.
     */
    toggle() {
        if (this.item.disabled() || this.accordion.disabled()) {
            return;
        }
        this.accordion.toggle(this.item.value());
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: NgpAccordionTrigger, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "17.1.0", version: "18.2.13", type: NgpAccordionTrigger, isStandalone: true, selector: "[ngpAccordionTrigger]", inputs: { id: { classPropertyName: "id", publicName: "id", isSignal: true, isRequired: false, transformFunction: null } }, host: { listeners: { "click": "toggle()" }, properties: { "id": "id()", "attr.data-orientation": "accordion.orientation()", "attr.data-open": "item.open() ? \"\" : null", "attr.data-disabled": "item.disabled() || accordion.disabled() ? \"\" : null", "attr.aria-controls": "item.contentId()", "attr.aria-expanded": "item.open()" } }, providers: [{ provide: NgpAccordionTriggerToken, useExisting: NgpAccordionTrigger }], exportAs: ["ngpAccordionTrigger"], ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: NgpAccordionTrigger, decorators: [{
            type: Directive,
            args: [{
                    standalone: true,
                    selector: '[ngpAccordionTrigger]',
                    exportAs: 'ngpAccordionTrigger',
                    providers: [{ provide: NgpAccordionTriggerToken, useExisting: NgpAccordionTrigger }],
                    host: {
                        '[id]': 'id()',
                        '[attr.data-orientation]': 'accordion.orientation()',
                        '[attr.data-open]': 'item.open() ? "" : null',
                        '[attr.data-disabled]': 'item.disabled() || accordion.disabled() ? "" : null',
                        '[attr.aria-controls]': 'item.contentId()',
                        '[attr.aria-expanded]': 'item.open()',
                    },
                }]
        }], propDecorators: { toggle: [{
                type: HostListener,
                args: ['click']
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWNjb3JkaW9uLXRyaWdnZXIuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvbmctcHJpbWl0aXZlcy9hY2NvcmRpb24vc3JjL2FjY29yZGlvbi10cmlnZ2VyL2FjY29yZGlvbi10cmlnZ2VyLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7O0dBTUc7QUFDSCxPQUFPLEVBQUUsU0FBUyxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDL0QsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQy9DLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLHdDQUF3QyxDQUFDO0FBQzdFLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQztBQUMvRCxPQUFPLEVBQUUsd0JBQXdCLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQzs7QUFnQnJFLE1BQU0sT0FBTyxtQkFBbUI7SUFkaEM7UUFlRTs7V0FFRztRQUNnQixjQUFTLEdBQUcsZUFBZSxFQUFFLENBQUM7UUFFakQ7O1dBRUc7UUFDZ0IsU0FBSSxHQUFHLG1CQUFtQixFQUFFLENBQUM7UUFFaEQ7O1dBRUc7UUFDTSxPQUFFLEdBQUcsS0FBSyxDQUFTLFFBQVEsQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDLENBQUM7S0FhaEU7SUFYQzs7T0FFRztJQUVILE1BQU07UUFDSixJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLElBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLEVBQUUsRUFBRSxDQUFDO1lBQ3RELE9BQU87UUFDVCxDQUFDO1FBRUQsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDO0lBQzNDLENBQUM7K0dBMUJVLG1CQUFtQjttR0FBbkIsbUJBQW1CLDRnQkFWbkIsQ0FBQyxFQUFFLE9BQU8sRUFBRSx3QkFBd0IsRUFBRSxXQUFXLEVBQUUsbUJBQW1CLEVBQUUsQ0FBQzs7NEZBVXpFLG1CQUFtQjtrQkFkL0IsU0FBUzttQkFBQztvQkFDVCxVQUFVLEVBQUUsSUFBSTtvQkFDaEIsUUFBUSxFQUFFLHVCQUF1QjtvQkFDakMsUUFBUSxFQUFFLHFCQUFxQjtvQkFDL0IsU0FBUyxFQUFFLENBQUMsRUFBRSxPQUFPLEVBQUUsd0JBQXdCLEVBQUUsV0FBVyxxQkFBcUIsRUFBRSxDQUFDO29CQUNwRixJQUFJLEVBQUU7d0JBQ0osTUFBTSxFQUFFLE1BQU07d0JBQ2QseUJBQXlCLEVBQUUseUJBQXlCO3dCQUNwRCxrQkFBa0IsRUFBRSx5QkFBeUI7d0JBQzdDLHNCQUFzQixFQUFFLHFEQUFxRDt3QkFDN0Usc0JBQXNCLEVBQUUsa0JBQWtCO3dCQUMxQyxzQkFBc0IsRUFBRSxhQUFhO3FCQUN0QztpQkFDRjs4QkFxQkMsTUFBTTtzQkFETCxZQUFZO3VCQUFDLE9BQU8iLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCDCqSAyMDI0IEFuZ3VsYXIgUHJpbWl0aXZlcy5cbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9uZy1wcmltaXRpdmVzL25nLXByaW1pdGl2ZXNcbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgMi4wIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbmltcG9ydCB7IERpcmVjdGl2ZSwgSG9zdExpc3RlbmVyLCBpbnB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgdW5pcXVlSWQgfSBmcm9tICduZy1wcmltaXRpdmVzL3V0aWxzJztcbmltcG9ydCB7IGluamVjdEFjY29yZGlvbkl0ZW0gfSBmcm9tICcuLi9hY2NvcmRpb24taXRlbS9hY2NvcmRpb24taXRlbS50b2tlbic7XG5pbXBvcnQgeyBpbmplY3RBY2NvcmRpb24gfSBmcm9tICcuLi9hY2NvcmRpb24vYWNjb3JkaW9uLnRva2VuJztcbmltcG9ydCB7IE5ncEFjY29yZGlvblRyaWdnZXJUb2tlbiB9IGZyb20gJy4vYWNjb3JkaW9uLXRyaWdnZXIudG9rZW4nO1xuXG5ARGlyZWN0aXZlKHtcbiAgc3RhbmRhbG9uZTogdHJ1ZSxcbiAgc2VsZWN0b3I6ICdbbmdwQWNjb3JkaW9uVHJpZ2dlcl0nLFxuICBleHBvcnRBczogJ25ncEFjY29yZGlvblRyaWdnZXInLFxuICBwcm92aWRlcnM6IFt7IHByb3ZpZGU6IE5ncEFjY29yZGlvblRyaWdnZXJUb2tlbiwgdXNlRXhpc3Rpbmc6IE5ncEFjY29yZGlvblRyaWdnZXIgfV0sXG4gIGhvc3Q6IHtcbiAgICAnW2lkXSc6ICdpZCgpJyxcbiAgICAnW2F0dHIuZGF0YS1vcmllbnRhdGlvbl0nOiAnYWNjb3JkaW9uLm9yaWVudGF0aW9uKCknLFxuICAgICdbYXR0ci5kYXRhLW9wZW5dJzogJ2l0ZW0ub3BlbigpID8gXCJcIiA6IG51bGwnLFxuICAgICdbYXR0ci5kYXRhLWRpc2FibGVkXSc6ICdpdGVtLmRpc2FibGVkKCkgfHwgYWNjb3JkaW9uLmRpc2FibGVkKCkgPyBcIlwiIDogbnVsbCcsXG4gICAgJ1thdHRyLmFyaWEtY29udHJvbHNdJzogJ2l0ZW0uY29udGVudElkKCknLFxuICAgICdbYXR0ci5hcmlhLWV4cGFuZGVkXSc6ICdpdGVtLm9wZW4oKScsXG4gIH0sXG59KVxuZXhwb3J0IGNsYXNzIE5ncEFjY29yZGlvblRyaWdnZXIge1xuICAvKipcbiAgICogQWNjZXNzIHRoZSBwYXJlbnQgYWNjb3JkaW9uLlxuICAgKi9cbiAgcHJvdGVjdGVkIHJlYWRvbmx5IGFjY29yZGlvbiA9IGluamVjdEFjY29yZGlvbigpO1xuXG4gIC8qKlxuICAgKiBUaGUgaXRlbSBpbnN0YW5jZS5cbiAgICovXG4gIHByb3RlY3RlZCByZWFkb25seSBpdGVtID0gaW5qZWN0QWNjb3JkaW9uSXRlbSgpO1xuXG4gIC8qKlxuICAgKiBUaGUgaWQgb2YgdGhlIHRyaWdnZXIuXG4gICAqL1xuICByZWFkb25seSBpZCA9IGlucHV0PHN0cmluZz4odW5pcXVlSWQoJ25ncC1hY2NvcmRpb24tdHJpZ2dlcicpKTtcblxuICAvKipcbiAgICogVG9nZ2xlIHRoZSBhY2NvcmRpb24gaXRlbS5cbiAgICovXG4gIEBIb3N0TGlzdGVuZXIoJ2NsaWNrJylcbiAgdG9nZ2xlKCk6IHZvaWQge1xuICAgIGlmICh0aGlzLml0ZW0uZGlzYWJsZWQoKSB8fCB0aGlzLmFjY29yZGlvbi5kaXNhYmxlZCgpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5hY2NvcmRpb24udG9nZ2xlKHRoaXMuaXRlbS52YWx1ZSgpKTtcbiAgfVxufVxuIl19