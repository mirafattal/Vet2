import { Directive, booleanAttribute, computed, contentChild, input } from '@angular/core';
import { NgpAccordionContentToken } from '../accordion-content/accordion-content.token';
import { NgpAccordionTriggerToken } from '../accordion-trigger/accordion-trigger.token';
import { injectAccordion } from '../accordion/accordion.token';
import { NgpAccordionItemToken } from './accordion-item.token';
import * as i0 from "@angular/core";
export class NgpAccordionItem {
    constructor() {
        /**
         * Access the accordion.
         */
        this.accordion = injectAccordion();
        /**
         * The value of the accordion item.
         */
        this.value = input.required({
            alias: 'ngpAccordionItemValue',
        });
        /**
         * Whether the accordion item is disabled.
         */
        this.disabled = input(false, {
            alias: 'ngpAccordionItemDisabled',
            transform: booleanAttribute,
        });
        /**
         * Access the accordion trigger
         */
        this.trigger = contentChild(NgpAccordionTriggerToken);
        /**
         * Access the accordion content
         */
        this.content = contentChild(NgpAccordionContentToken);
        /**
         * Whether the accordion item is expanded.
         */
        this.open = computed(() => this.accordion.isOpen(this.value()));
        /**
         * The trigger id.
         */
        this.triggerId = computed(() => this.trigger()?.id());
        /**
         * The content id.
         */
        this.contentId = computed(() => this.content()?.id());
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: NgpAccordionItem, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "17.2.0", version: "18.2.13", type: NgpAccordionItem, isStandalone: true, selector: "[ngpAccordionItem]", inputs: { value: { classPropertyName: "value", publicName: "ngpAccordionItemValue", isSignal: true, isRequired: true, transformFunction: null }, disabled: { classPropertyName: "disabled", publicName: "ngpAccordionItemDisabled", isSignal: true, isRequired: false, transformFunction: null } }, host: { properties: { "attr.data-orientation": "accordion.orientation()", "attr.data-open": "open() ? \"\" : null", "attr.data-disabled": "disabled() || accordion.disabled() ? \"\" : null" } }, providers: [{ provide: NgpAccordionItemToken, useExisting: NgpAccordionItem }], queries: [{ propertyName: "trigger", first: true, predicate: NgpAccordionTriggerToken, descendants: true, isSignal: true }, { propertyName: "content", first: true, predicate: NgpAccordionContentToken, descendants: true, isSignal: true }], exportAs: ["ngpAccordionItem"], ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: NgpAccordionItem, decorators: [{
            type: Directive,
            args: [{
                    standalone: true,
                    selector: '[ngpAccordionItem]',
                    exportAs: 'ngpAccordionItem',
                    providers: [{ provide: NgpAccordionItemToken, useExisting: NgpAccordionItem }],
                    host: {
                        '[attr.data-orientation]': 'accordion.orientation()',
                        '[attr.data-open]': 'open() ? "" : null',
                        '[attr.data-disabled]': 'disabled() || accordion.disabled() ? "" : null',
                    },
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWNjb3JkaW9uLWl0ZW0uZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvbmctcHJpbWl0aXZlcy9hY2NvcmRpb24vc3JjL2FjY29yZGlvbi1pdGVtL2FjY29yZGlvbi1pdGVtLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFRQSxPQUFPLEVBQUUsU0FBUyxFQUFFLGdCQUFnQixFQUFFLFFBQVEsRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNGLE9BQU8sRUFBRSx3QkFBd0IsRUFBRSxNQUFNLDhDQUE4QyxDQUFDO0FBQ3hGLE9BQU8sRUFBRSx3QkFBd0IsRUFBRSxNQUFNLDhDQUE4QyxDQUFDO0FBQ3hGLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQztBQUMvRCxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQzs7QUFhL0QsTUFBTSxPQUFPLGdCQUFnQjtJQVg3QjtRQVlFOztXQUVHO1FBQ2dCLGNBQVMsR0FBRyxlQUFlLEVBQUUsQ0FBQztRQUVqRDs7V0FFRztRQUNNLFVBQUssR0FBRyxLQUFLLENBQUMsUUFBUSxDQUFJO1lBQ2pDLEtBQUssRUFBRSx1QkFBdUI7U0FDL0IsQ0FBQyxDQUFDO1FBRUg7O1dBRUc7UUFDTSxhQUFRLEdBQUcsS0FBSyxDQUF3QixLQUFLLEVBQUU7WUFDdEQsS0FBSyxFQUFFLDBCQUEwQjtZQUNqQyxTQUFTLEVBQUUsZ0JBQWdCO1NBQzVCLENBQUMsQ0FBQztRQUVIOztXQUVHO1FBQ2MsWUFBTyxHQUFHLFlBQVksQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDO1FBRWxFOztXQUVHO1FBQ2MsWUFBTyxHQUFHLFlBQVksQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDO1FBRWxFOztXQUVHO1FBQ00sU0FBSSxHQUFHLFFBQVEsQ0FBVSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBRTdFOztXQUVHO1FBQ00sY0FBUyxHQUFHLFFBQVEsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztRQUUxRDs7V0FFRztRQUNNLGNBQVMsR0FBRyxRQUFRLENBQUMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7S0FDM0Q7K0dBN0NZLGdCQUFnQjttR0FBaEIsZ0JBQWdCLHVpQkFQaEIsQ0FBQyxFQUFFLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxXQUFXLEVBQUUsZ0JBQWdCLEVBQUUsQ0FBQywrREErQnRDLHdCQUF3QiwwRkFLeEIsd0JBQXdCOzs0RkE3QnJELGdCQUFnQjtrQkFYNUIsU0FBUzttQkFBQztvQkFDVCxVQUFVLEVBQUUsSUFBSTtvQkFDaEIsUUFBUSxFQUFFLG9CQUFvQjtvQkFDOUIsUUFBUSxFQUFFLGtCQUFrQjtvQkFDNUIsU0FBUyxFQUFFLENBQUMsRUFBRSxPQUFPLEVBQUUscUJBQXFCLEVBQUUsV0FBVyxrQkFBa0IsRUFBRSxDQUFDO29CQUM5RSxJQUFJLEVBQUU7d0JBQ0oseUJBQXlCLEVBQUUseUJBQXlCO3dCQUNwRCxrQkFBa0IsRUFBRSxvQkFBb0I7d0JBQ3hDLHNCQUFzQixFQUFFLGdEQUFnRDtxQkFDekU7aUJBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCDCqSAyMDI0IEFuZ3VsYXIgUHJpbWl0aXZlcy5cbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9uZy1wcmltaXRpdmVzL25nLXByaW1pdGl2ZXNcbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgMi4wIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbmltcG9ydCB7IEJvb2xlYW5JbnB1dCB9IGZyb20gJ0Bhbmd1bGFyL2Nkay9jb2VyY2lvbic7XG5pbXBvcnQgeyBEaXJlY3RpdmUsIGJvb2xlYW5BdHRyaWJ1dGUsIGNvbXB1dGVkLCBjb250ZW50Q2hpbGQsIGlucHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBOZ3BBY2NvcmRpb25Db250ZW50VG9rZW4gfSBmcm9tICcuLi9hY2NvcmRpb24tY29udGVudC9hY2NvcmRpb24tY29udGVudC50b2tlbic7XG5pbXBvcnQgeyBOZ3BBY2NvcmRpb25UcmlnZ2VyVG9rZW4gfSBmcm9tICcuLi9hY2NvcmRpb24tdHJpZ2dlci9hY2NvcmRpb24tdHJpZ2dlci50b2tlbic7XG5pbXBvcnQgeyBpbmplY3RBY2NvcmRpb24gfSBmcm9tICcuLi9hY2NvcmRpb24vYWNjb3JkaW9uLnRva2VuJztcbmltcG9ydCB7IE5ncEFjY29yZGlvbkl0ZW1Ub2tlbiB9IGZyb20gJy4vYWNjb3JkaW9uLWl0ZW0udG9rZW4nO1xuXG5ARGlyZWN0aXZlKHtcbiAgc3RhbmRhbG9uZTogdHJ1ZSxcbiAgc2VsZWN0b3I6ICdbbmdwQWNjb3JkaW9uSXRlbV0nLFxuICBleHBvcnRBczogJ25ncEFjY29yZGlvbkl0ZW0nLFxuICBwcm92aWRlcnM6IFt7IHByb3ZpZGU6IE5ncEFjY29yZGlvbkl0ZW1Ub2tlbiwgdXNlRXhpc3Rpbmc6IE5ncEFjY29yZGlvbkl0ZW0gfV0sXG4gIGhvc3Q6IHtcbiAgICAnW2F0dHIuZGF0YS1vcmllbnRhdGlvbl0nOiAnYWNjb3JkaW9uLm9yaWVudGF0aW9uKCknLFxuICAgICdbYXR0ci5kYXRhLW9wZW5dJzogJ29wZW4oKSA/IFwiXCIgOiBudWxsJyxcbiAgICAnW2F0dHIuZGF0YS1kaXNhYmxlZF0nOiAnZGlzYWJsZWQoKSB8fCBhY2NvcmRpb24uZGlzYWJsZWQoKSA/IFwiXCIgOiBudWxsJyxcbiAgfSxcbn0pXG5leHBvcnQgY2xhc3MgTmdwQWNjb3JkaW9uSXRlbTxUPiB7XG4gIC8qKlxuICAgKiBBY2Nlc3MgdGhlIGFjY29yZGlvbi5cbiAgICovXG4gIHByb3RlY3RlZCByZWFkb25seSBhY2NvcmRpb24gPSBpbmplY3RBY2NvcmRpb24oKTtcblxuICAvKipcbiAgICogVGhlIHZhbHVlIG9mIHRoZSBhY2NvcmRpb24gaXRlbS5cbiAgICovXG4gIHJlYWRvbmx5IHZhbHVlID0gaW5wdXQucmVxdWlyZWQ8VD4oe1xuICAgIGFsaWFzOiAnbmdwQWNjb3JkaW9uSXRlbVZhbHVlJyxcbiAgfSk7XG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgdGhlIGFjY29yZGlvbiBpdGVtIGlzIGRpc2FibGVkLlxuICAgKi9cbiAgcmVhZG9ubHkgZGlzYWJsZWQgPSBpbnB1dDxib29sZWFuLCBCb29sZWFuSW5wdXQ+KGZhbHNlLCB7XG4gICAgYWxpYXM6ICduZ3BBY2NvcmRpb25JdGVtRGlzYWJsZWQnLFxuICAgIHRyYW5zZm9ybTogYm9vbGVhbkF0dHJpYnV0ZSxcbiAgfSk7XG5cbiAgLyoqXG4gICAqIEFjY2VzcyB0aGUgYWNjb3JkaW9uIHRyaWdnZXJcbiAgICovXG4gIHByaXZhdGUgcmVhZG9ubHkgdHJpZ2dlciA9IGNvbnRlbnRDaGlsZChOZ3BBY2NvcmRpb25UcmlnZ2VyVG9rZW4pO1xuXG4gIC8qKlxuICAgKiBBY2Nlc3MgdGhlIGFjY29yZGlvbiBjb250ZW50XG4gICAqL1xuICBwcml2YXRlIHJlYWRvbmx5IGNvbnRlbnQgPSBjb250ZW50Q2hpbGQoTmdwQWNjb3JkaW9uQ29udGVudFRva2VuKTtcblxuICAvKipcbiAgICogV2hldGhlciB0aGUgYWNjb3JkaW9uIGl0ZW0gaXMgZXhwYW5kZWQuXG4gICAqL1xuICByZWFkb25seSBvcGVuID0gY29tcHV0ZWQ8Ym9vbGVhbj4oKCkgPT4gdGhpcy5hY2NvcmRpb24uaXNPcGVuKHRoaXMudmFsdWUoKSkpO1xuXG4gIC8qKlxuICAgKiBUaGUgdHJpZ2dlciBpZC5cbiAgICovXG4gIHJlYWRvbmx5IHRyaWdnZXJJZCA9IGNvbXB1dGVkKCgpID0+IHRoaXMudHJpZ2dlcigpPy5pZCgpKTtcblxuICAvKipcbiAgICogVGhlIGNvbnRlbnQgaWQuXG4gICAqL1xuICByZWFkb25seSBjb250ZW50SWQgPSBjb21wdXRlZCgoKSA9PiB0aGlzLmNvbnRlbnQoKT8uaWQoKSk7XG59XG4iXX0=