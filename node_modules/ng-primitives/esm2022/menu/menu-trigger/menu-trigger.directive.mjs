/**
 * Copyright © 2024 Angular Primitives.
 * https://github.com/ng-primitives/ng-primitives
 *
 * This source code is licensed under the Apache 2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */
import { CdkMenuTrigger } from '@angular/cdk/menu';
import { Directive, inject, signal } from '@angular/core';
import { takeUntilDestroyed } from '@angular/core/rxjs-interop';
import { NgpMenuTriggerToken } from './menu-trigger.token';
import * as i0 from "@angular/core";
import * as i1 from "@angular/cdk/menu";
export class NgpMenuTrigger {
    constructor() {
        /**
         * Access to the underlying `CdkMenuTrigger`.
         */
        this.cdkMenuTrigger = inject(CdkMenuTrigger);
        /**
         * Store the open state of the menu.
         */
        this.open = signal(false);
        this.cdkMenuTrigger.opened.pipe(takeUntilDestroyed()).subscribe(() => this.open.set(true));
        this.cdkMenuTrigger.closed.pipe(takeUntilDestroyed()).subscribe(() => this.open.set(false));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: NgpMenuTrigger, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "18.2.13", type: NgpMenuTrigger, isStandalone: true, selector: "[ngpMenuTrigger]", host: { properties: { "attr.data-open": "open() ? \"\" : null" } }, providers: [{ provide: NgpMenuTriggerToken, useExisting: NgpMenuTrigger }], exportAs: ["ngpMenuTrigger"], hostDirectives: [{ directive: i1.CdkMenuTrigger, inputs: ["cdkMenuTriggerFor", "ngpMenuTrigger"] }], ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: NgpMenuTrigger, decorators: [{
            type: Directive,
            args: [{
                    standalone: true,
                    selector: '[ngpMenuTrigger]',
                    exportAs: 'ngpMenuTrigger',
                    providers: [{ provide: NgpMenuTriggerToken, useExisting: NgpMenuTrigger }],
                    hostDirectives: [{ directive: CdkMenuTrigger, inputs: ['cdkMenuTriggerFor: ngpMenuTrigger'] }],
                    host: {
                        '[attr.data-open]': 'open() ? "" : null',
                    },
                }]
        }], ctorParameters: () => [] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWVudS10cmlnZ2VyLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL25nLXByaW1pdGl2ZXMvbWVudS9zcmMvbWVudS10cmlnZ2VyL21lbnUtdHJpZ2dlci5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztHQU1HO0FBQ0gsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ25ELE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMxRCxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUNoRSxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQzs7O0FBWTNELE1BQU0sT0FBTyxjQUFjO0lBV3pCO1FBVkE7O1dBRUc7UUFDYyxtQkFBYyxHQUFHLE1BQU0sQ0FBQyxjQUFjLENBQUMsQ0FBQztRQUV6RDs7V0FFRztRQUNPLFNBQUksR0FBRyxNQUFNLENBQVUsS0FBSyxDQUFDLENBQUM7UUFHdEMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLGtCQUFrQixFQUFFLENBQUMsQ0FBQyxTQUFTLENBQUMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztRQUMzRixJQUFJLENBQUMsY0FBYyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsa0JBQWtCLEVBQUUsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO0lBQzlGLENBQUM7K0dBZFUsY0FBYzttR0FBZCxjQUFjLG1JQU5kLENBQUMsRUFBRSxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsV0FBVyxFQUFFLGNBQWMsRUFBRSxDQUFDOzs0RkFNL0QsY0FBYztrQkFWMUIsU0FBUzttQkFBQztvQkFDVCxVQUFVLEVBQUUsSUFBSTtvQkFDaEIsUUFBUSxFQUFFLGtCQUFrQjtvQkFDNUIsUUFBUSxFQUFFLGdCQUFnQjtvQkFDMUIsU0FBUyxFQUFFLENBQUMsRUFBRSxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsV0FBVyxnQkFBZ0IsRUFBRSxDQUFDO29CQUMxRSxjQUFjLEVBQUUsQ0FBQyxFQUFFLFNBQVMsRUFBRSxjQUFjLEVBQUUsTUFBTSxFQUFFLENBQUMsbUNBQW1DLENBQUMsRUFBRSxDQUFDO29CQUM5RixJQUFJLEVBQUU7d0JBQ0osa0JBQWtCLEVBQUUsb0JBQW9CO3FCQUN6QztpQkFDRiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IMKpIDIwMjQgQW5ndWxhciBQcmltaXRpdmVzLlxuICogaHR0cHM6Ly9naXRodWIuY29tL25nLXByaW1pdGl2ZXMvbmctcHJpbWl0aXZlc1xuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSAyLjAgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuaW1wb3J0IHsgQ2RrTWVudVRyaWdnZXIgfSBmcm9tICdAYW5ndWxhci9jZGsvbWVudSc7XG5pbXBvcnQgeyBEaXJlY3RpdmUsIGluamVjdCwgc2lnbmFsIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyB0YWtlVW50aWxEZXN0cm95ZWQgfSBmcm9tICdAYW5ndWxhci9jb3JlL3J4anMtaW50ZXJvcCc7XG5pbXBvcnQgeyBOZ3BNZW51VHJpZ2dlclRva2VuIH0gZnJvbSAnLi9tZW51LXRyaWdnZXIudG9rZW4nO1xuXG5ARGlyZWN0aXZlKHtcbiAgc3RhbmRhbG9uZTogdHJ1ZSxcbiAgc2VsZWN0b3I6ICdbbmdwTWVudVRyaWdnZXJdJyxcbiAgZXhwb3J0QXM6ICduZ3BNZW51VHJpZ2dlcicsXG4gIHByb3ZpZGVyczogW3sgcHJvdmlkZTogTmdwTWVudVRyaWdnZXJUb2tlbiwgdXNlRXhpc3Rpbmc6IE5ncE1lbnVUcmlnZ2VyIH1dLFxuICBob3N0RGlyZWN0aXZlczogW3sgZGlyZWN0aXZlOiBDZGtNZW51VHJpZ2dlciwgaW5wdXRzOiBbJ2Nka01lbnVUcmlnZ2VyRm9yOiBuZ3BNZW51VHJpZ2dlciddIH1dLFxuICBob3N0OiB7XG4gICAgJ1thdHRyLmRhdGEtb3Blbl0nOiAnb3BlbigpID8gXCJcIiA6IG51bGwnLFxuICB9LFxufSlcbmV4cG9ydCBjbGFzcyBOZ3BNZW51VHJpZ2dlciB7XG4gIC8qKlxuICAgKiBBY2Nlc3MgdG8gdGhlIHVuZGVybHlpbmcgYENka01lbnVUcmlnZ2VyYC5cbiAgICovXG4gIHByaXZhdGUgcmVhZG9ubHkgY2RrTWVudVRyaWdnZXIgPSBpbmplY3QoQ2RrTWVudVRyaWdnZXIpO1xuXG4gIC8qKlxuICAgKiBTdG9yZSB0aGUgb3BlbiBzdGF0ZSBvZiB0aGUgbWVudS5cbiAgICovXG4gIHByb3RlY3RlZCBvcGVuID0gc2lnbmFsPGJvb2xlYW4+KGZhbHNlKTtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLmNka01lbnVUcmlnZ2VyLm9wZW5lZC5waXBlKHRha2VVbnRpbERlc3Ryb3llZCgpKS5zdWJzY3JpYmUoKCkgPT4gdGhpcy5vcGVuLnNldCh0cnVlKSk7XG4gICAgdGhpcy5jZGtNZW51VHJpZ2dlci5jbG9zZWQucGlwZSh0YWtlVW50aWxEZXN0cm95ZWQoKSkuc3Vic2NyaWJlKCgpID0+IHRoaXMub3Blbi5zZXQoZmFsc2UpKTtcbiAgfVxufVxuIl19