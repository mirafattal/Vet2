/**
 * Copyright Â© 2024 Angular Primitives.
 * https://github.com/ng-primitives/ng-primitives
 *
 * This source code is licensed under the Apache 2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */
import { InjectionToken, inject } from '@angular/core';
export const defaultPopoverConfig = {
    offset: 4,
    placement: 'bottom',
    showDelay: 0,
    hideDelay: 0,
    flip: true,
    container: null,
    closeOnOutsideClick: true,
};
export const NgpPopoverConfigToken = new InjectionToken('NgpPopoverConfigToken');
/**
 * Provide the default Popover configuration
 * @param config The Popover configuration
 * @returns The provider
 */
export function providePopoverConfig(config) {
    return [
        {
            provide: NgpPopoverConfigToken,
            useValue: { ...defaultPopoverConfig, ...config },
        },
    ];
}
/**
 * Inject the Popover configuration
 * @returns The global Popover configuration
 */
export function injectPopoverConfig() {
    return inject(NgpPopoverConfigToken, { optional: true }) ?? defaultPopoverConfig;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG9wb3Zlci5jb25maWcuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9uZy1wcmltaXRpdmVzL3BvcG92ZXIvc3JjL2NvbmZpZy9wb3BvdmVyLmNvbmZpZy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7O0dBTUc7QUFDSCxPQUFPLEVBQUUsY0FBYyxFQUFZLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQStDakUsTUFBTSxDQUFDLE1BQU0sb0JBQW9CLEdBQXFCO0lBQ3BELE1BQU0sRUFBRSxDQUFDO0lBQ1QsU0FBUyxFQUFFLFFBQVE7SUFDbkIsU0FBUyxFQUFFLENBQUM7SUFDWixTQUFTLEVBQUUsQ0FBQztJQUNaLElBQUksRUFBRSxJQUFJO0lBQ1YsU0FBUyxFQUFFLElBQUk7SUFDZixtQkFBbUIsRUFBRSxJQUFJO0NBQzFCLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxxQkFBcUIsR0FBRyxJQUFJLGNBQWMsQ0FBbUIsdUJBQXVCLENBQUMsQ0FBQztBQUVuRzs7OztHQUlHO0FBQ0gsTUFBTSxVQUFVLG9CQUFvQixDQUFDLE1BQWlDO0lBQ3BFLE9BQU87UUFDTDtZQUNFLE9BQU8sRUFBRSxxQkFBcUI7WUFDOUIsUUFBUSxFQUFFLEVBQUUsR0FBRyxvQkFBb0IsRUFBRSxHQUFHLE1BQU0sRUFBRTtTQUNqRDtLQUNGLENBQUM7QUFDSixDQUFDO0FBRUQ7OztHQUdHO0FBQ0gsTUFBTSxVQUFVLG1CQUFtQjtJQUNqQyxPQUFPLE1BQU0sQ0FBQyxxQkFBcUIsRUFBRSxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsQ0FBQyxJQUFJLG9CQUFvQixDQUFDO0FBQ25GLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCDCqSAyMDI0IEFuZ3VsYXIgUHJpbWl0aXZlcy5cbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9uZy1wcmltaXRpdmVzL25nLXByaW1pdGl2ZXNcbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgMi4wIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbmltcG9ydCB7IEluamVjdGlvblRva2VuLCBQcm92aWRlciwgaW5qZWN0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyB0eXBlIFBsYWNlbWVudCB9IGZyb20gJ0BmbG9hdGluZy11aS9kb20nO1xuXG5leHBvcnQgaW50ZXJmYWNlIE5ncFBvcG92ZXJDb25maWcge1xuICAvKipcbiAgICogRGVmaW5lIHRoZSBvZmZzZXQgb2YgdGhlIHBvcG92ZXIgcmVsYXRpdmUgdG8gdGhlIHRyaWdnZXIuXG4gICAqIEBkZWZhdWx0IDRcbiAgICovXG4gIG9mZnNldDogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBEZWZpbmUgdGhlIHBsYWNlbWVudCBvZiB0aGUgcG9wb3ZlciByZWxhdGl2ZSB0byB0aGUgdHJpZ2dlci5cbiAgICogQGRlZmF1bHQgJ2JvdHRvbSdcbiAgICovXG4gIHBsYWNlbWVudDogUGxhY2VtZW50O1xuXG4gIC8qKlxuICAgKiBEZWZpbmUgdGhlIGRlbGF5IGJlZm9yZSB0aGUgcG9wb3ZlciBpcyBzaG93bi5cbiAgICogQGRlZmF1bHQgMFxuICAgKi9cbiAgc2hvd0RlbGF5OiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIERlZmluZSB0aGUgZGVsYXkgYmVmb3JlIHRoZSBwb3BvdmVyIGlzIGhpZGRlbi5cbiAgICogQGRlZmF1bHQgMFxuICAgKi9cbiAgaGlkZURlbGF5OiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIERlZmluZSB3aGV0aGVyIHRoZSBwb3BvdmVyIHNob3VsZCBmbGlwIHdoZW4gdGhlcmUgaXMgbm90IGVub3VnaCBzcGFjZSBmb3IgdGhlIHBvcG92ZXIuXG4gICAqIEBkZWZhdWx0IHRydWVcbiAgICovXG4gIGZsaXA6IGJvb2xlYW47XG5cbiAgLyoqXG4gICAqIERlZmluZSB0aGUgY29udGFpbmVyIGluIHRvIHdoaWNoIHRoZSBwb3BvdmVyIHNob3VsZCBiZSBhdHRhY2hlZC5cbiAgICogQGRlZmF1bHQgZG9jdW1lbnQuYm9keVxuICAgKi9cbiAgY29udGFpbmVyOiBIVE1MRWxlbWVudCB8IG51bGw7XG5cbiAgLyoqXG4gICAqIERlZmluZSB3aGV0aGVyIHRoZSBwb3BvdmVyIHNob3VsZCBjbG9zZSB3aGVuIGNsaWNraW5nIG91dHNpZGUgb2YgaXQuXG4gICAqIEBkZWZhdWx0IHRydWVcbiAgICovXG4gIGNsb3NlT25PdXRzaWRlQ2xpY2s6IGJvb2xlYW47XG59XG5cbmV4cG9ydCBjb25zdCBkZWZhdWx0UG9wb3ZlckNvbmZpZzogTmdwUG9wb3ZlckNvbmZpZyA9IHtcbiAgb2Zmc2V0OiA0LFxuICBwbGFjZW1lbnQ6ICdib3R0b20nLFxuICBzaG93RGVsYXk6IDAsXG4gIGhpZGVEZWxheTogMCxcbiAgZmxpcDogdHJ1ZSxcbiAgY29udGFpbmVyOiBudWxsLFxuICBjbG9zZU9uT3V0c2lkZUNsaWNrOiB0cnVlLFxufTtcblxuZXhwb3J0IGNvbnN0IE5ncFBvcG92ZXJDb25maWdUb2tlbiA9IG5ldyBJbmplY3Rpb25Ub2tlbjxOZ3BQb3BvdmVyQ29uZmlnPignTmdwUG9wb3ZlckNvbmZpZ1Rva2VuJyk7XG5cbi8qKlxuICogUHJvdmlkZSB0aGUgZGVmYXVsdCBQb3BvdmVyIGNvbmZpZ3VyYXRpb25cbiAqIEBwYXJhbSBjb25maWcgVGhlIFBvcG92ZXIgY29uZmlndXJhdGlvblxuICogQHJldHVybnMgVGhlIHByb3ZpZGVyXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwcm92aWRlUG9wb3ZlckNvbmZpZyhjb25maWc6IFBhcnRpYWw8TmdwUG9wb3ZlckNvbmZpZz4pOiBQcm92aWRlcltdIHtcbiAgcmV0dXJuIFtcbiAgICB7XG4gICAgICBwcm92aWRlOiBOZ3BQb3BvdmVyQ29uZmlnVG9rZW4sXG4gICAgICB1c2VWYWx1ZTogeyAuLi5kZWZhdWx0UG9wb3ZlckNvbmZpZywgLi4uY29uZmlnIH0sXG4gICAgfSxcbiAgXTtcbn1cblxuLyoqXG4gKiBJbmplY3QgdGhlIFBvcG92ZXIgY29uZmlndXJhdGlvblxuICogQHJldHVybnMgVGhlIGdsb2JhbCBQb3BvdmVyIGNvbmZpZ3VyYXRpb25cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGluamVjdFBvcG92ZXJDb25maWcoKTogTmdwUG9wb3ZlckNvbmZpZyB7XG4gIHJldHVybiBpbmplY3QoTmdwUG9wb3ZlckNvbmZpZ1Rva2VuLCB7IG9wdGlvbmFsOiB0cnVlIH0pID8/IGRlZmF1bHRQb3BvdmVyQ29uZmlnO1xufVxuIl19