/**
 * Copyright © 2024 Angular Primitives.
 * https://github.com/ng-primitives/ng-primitives
 *
 * This source code is licensed under the Apache 2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */
import { Directive, ElementRef, computed, inject, isDevMode } from '@angular/core';
import { NgpFocusTrap } from 'ng-primitives/focus-trap';
import { injectPopoverTrigger } from '../popover-trigger/popover-trigger.token';
import { NgpPopoverToken } from './popover.token';
import * as i0 from "@angular/core";
import * as i1 from "ng-primitives/focus-trap";
export class NgpPopover {
    constructor() {
        /**
         * Access the popover element.
         */
        this.popover = inject((ElementRef));
        /**
         * Access the trigger instance.
         */
        this.trigger = injectPopoverTrigger();
        /**
         * Compute the x position of the popover.
         */
        this.x = computed(() => this.trigger.position().x);
        /**
         * Compute the y position of the popover.
         */
        this.y = computed(() => this.trigger.position().y);
    }
    ngOnInit() {
        // if the element does not have a fixed position then throw a warning in dev mode
        if (isDevMode()) {
            const { position } = getComputedStyle(this.popover.nativeElement);
            if (position !== 'absolute') {
                console.warn(`The popover element must have an absolute position. The current position is ${position}.`);
            }
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: NgpPopover, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "18.2.13", type: NgpPopover, isStandalone: true, selector: "[ngpPopover]", host: { attributes: { "role": "menu" }, properties: { "style.left.px": "x()", "style.top.px": "y()" } }, providers: [{ provide: NgpPopoverToken, useExisting: NgpPopover }], exportAs: ["ngpPopover"], hostDirectives: [{ directive: i1.NgpFocusTrap }], ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: NgpPopover, decorators: [{
            type: Directive,
            args: [{
                    standalone: true,
                    selector: '[ngpPopover]',
                    exportAs: 'ngpPopover',
                    hostDirectives: [NgpFocusTrap],
                    providers: [{ provide: NgpPopoverToken, useExisting: NgpPopover }],
                    host: {
                        role: 'menu',
                        '[style.left.px]': 'x()',
                        '[style.top.px]': 'y()',
                    },
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG9wb3Zlci5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9uZy1wcmltaXRpdmVzL3BvcG92ZXIvc3JjL3BvcG92ZXIvcG9wb3Zlci5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztHQU1HO0FBQ0gsT0FBTyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQVUsUUFBUSxFQUFFLE1BQU0sRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0YsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBQ3hELE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLDBDQUEwQyxDQUFDO0FBQ2hGLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQzs7O0FBY2xELE1BQU0sT0FBTyxVQUFVO0lBWnZCO1FBYUU7O1dBRUc7UUFDYyxZQUFPLEdBQUcsTUFBTSxDQUFDLENBQUEsVUFBdUIsQ0FBQSxDQUFDLENBQUM7UUFFM0Q7O1dBRUc7UUFDYyxZQUFPLEdBQUcsb0JBQW9CLEVBQUUsQ0FBQztRQUVsRDs7V0FFRztRQUNnQixNQUFDLEdBQUcsUUFBUSxDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFFakU7O1dBRUc7UUFDZ0IsTUFBQyxHQUFHLFFBQVEsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO0tBY2xFO0lBWkMsUUFBUTtRQUNOLGlGQUFpRjtRQUNqRixJQUFJLFNBQVMsRUFBRSxFQUFFLENBQUM7WUFDaEIsTUFBTSxFQUFFLFFBQVEsRUFBRSxHQUFHLGdCQUFnQixDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLENBQUM7WUFFbEUsSUFBSSxRQUFRLEtBQUssVUFBVSxFQUFFLENBQUM7Z0JBQzVCLE9BQU8sQ0FBQyxJQUFJLENBQ1YsK0VBQStFLFFBQVEsR0FBRyxDQUMzRixDQUFDO1lBQ0osQ0FBQztRQUNILENBQUM7SUFDSCxDQUFDOytHQWhDVSxVQUFVO21HQUFWLFVBQVUsb0tBUFYsQ0FBQyxFQUFFLE9BQU8sRUFBRSxlQUFlLEVBQUUsV0FBVyxFQUFFLFVBQVUsRUFBRSxDQUFDOzs0RkFPdkQsVUFBVTtrQkFadEIsU0FBUzttQkFBQztvQkFDVCxVQUFVLEVBQUUsSUFBSTtvQkFDaEIsUUFBUSxFQUFFLGNBQWM7b0JBQ3hCLFFBQVEsRUFBRSxZQUFZO29CQUN0QixjQUFjLEVBQUUsQ0FBQyxZQUFZLENBQUM7b0JBQzlCLFNBQVMsRUFBRSxDQUFDLEVBQUUsT0FBTyxFQUFFLGVBQWUsRUFBRSxXQUFXLFlBQVksRUFBRSxDQUFDO29CQUNsRSxJQUFJLEVBQUU7d0JBQ0osSUFBSSxFQUFFLE1BQU07d0JBQ1osaUJBQWlCLEVBQUUsS0FBSzt3QkFDeEIsZ0JBQWdCLEVBQUUsS0FBSztxQkFDeEI7aUJBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCDCqSAyMDI0IEFuZ3VsYXIgUHJpbWl0aXZlcy5cbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9uZy1wcmltaXRpdmVzL25nLXByaW1pdGl2ZXNcbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgMi4wIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbmltcG9ydCB7IERpcmVjdGl2ZSwgRWxlbWVudFJlZiwgT25Jbml0LCBjb21wdXRlZCwgaW5qZWN0LCBpc0Rldk1vZGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE5ncEZvY3VzVHJhcCB9IGZyb20gJ25nLXByaW1pdGl2ZXMvZm9jdXMtdHJhcCc7XG5pbXBvcnQgeyBpbmplY3RQb3BvdmVyVHJpZ2dlciB9IGZyb20gJy4uL3BvcG92ZXItdHJpZ2dlci9wb3BvdmVyLXRyaWdnZXIudG9rZW4nO1xuaW1wb3J0IHsgTmdwUG9wb3ZlclRva2VuIH0gZnJvbSAnLi9wb3BvdmVyLnRva2VuJztcblxuQERpcmVjdGl2ZSh7XG4gIHN0YW5kYWxvbmU6IHRydWUsXG4gIHNlbGVjdG9yOiAnW25ncFBvcG92ZXJdJyxcbiAgZXhwb3J0QXM6ICduZ3BQb3BvdmVyJyxcbiAgaG9zdERpcmVjdGl2ZXM6IFtOZ3BGb2N1c1RyYXBdLFxuICBwcm92aWRlcnM6IFt7IHByb3ZpZGU6IE5ncFBvcG92ZXJUb2tlbiwgdXNlRXhpc3Rpbmc6IE5ncFBvcG92ZXIgfV0sXG4gIGhvc3Q6IHtcbiAgICByb2xlOiAnbWVudScsXG4gICAgJ1tzdHlsZS5sZWZ0LnB4XSc6ICd4KCknLFxuICAgICdbc3R5bGUudG9wLnB4XSc6ICd5KCknLFxuICB9LFxufSlcbmV4cG9ydCBjbGFzcyBOZ3BQb3BvdmVyIGltcGxlbWVudHMgT25Jbml0IHtcbiAgLyoqXG4gICAqIEFjY2VzcyB0aGUgcG9wb3ZlciBlbGVtZW50LlxuICAgKi9cbiAgcHJpdmF0ZSByZWFkb25seSBwb3BvdmVyID0gaW5qZWN0KEVsZW1lbnRSZWY8SFRNTEVsZW1lbnQ+KTtcblxuICAvKipcbiAgICogQWNjZXNzIHRoZSB0cmlnZ2VyIGluc3RhbmNlLlxuICAgKi9cbiAgcHJpdmF0ZSByZWFkb25seSB0cmlnZ2VyID0gaW5qZWN0UG9wb3ZlclRyaWdnZXIoKTtcblxuICAvKipcbiAgICogQ29tcHV0ZSB0aGUgeCBwb3NpdGlvbiBvZiB0aGUgcG9wb3Zlci5cbiAgICovXG4gIHByb3RlY3RlZCByZWFkb25seSB4ID0gY29tcHV0ZWQoKCkgPT4gdGhpcy50cmlnZ2VyLnBvc2l0aW9uKCkueCk7XG5cbiAgLyoqXG4gICAqIENvbXB1dGUgdGhlIHkgcG9zaXRpb24gb2YgdGhlIHBvcG92ZXIuXG4gICAqL1xuICBwcm90ZWN0ZWQgcmVhZG9ubHkgeSA9IGNvbXB1dGVkKCgpID0+IHRoaXMudHJpZ2dlci5wb3NpdGlvbigpLnkpO1xuXG4gIG5nT25Jbml0KCk6IHZvaWQge1xuICAgIC8vIGlmIHRoZSBlbGVtZW50IGRvZXMgbm90IGhhdmUgYSBmaXhlZCBwb3NpdGlvbiB0aGVuIHRocm93IGEgd2FybmluZyBpbiBkZXYgbW9kZVxuICAgIGlmIChpc0Rldk1vZGUoKSkge1xuICAgICAgY29uc3QgeyBwb3NpdGlvbiB9ID0gZ2V0Q29tcHV0ZWRTdHlsZSh0aGlzLnBvcG92ZXIubmF0aXZlRWxlbWVudCk7XG5cbiAgICAgIGlmIChwb3NpdGlvbiAhPT0gJ2Fic29sdXRlJykge1xuICAgICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgICAgYFRoZSBwb3BvdmVyIGVsZW1lbnQgbXVzdCBoYXZlIGFuIGFic29sdXRlIHBvc2l0aW9uLiBUaGUgY3VycmVudCBwb3NpdGlvbiBpcyAke3Bvc2l0aW9ufS5gLFxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuIl19