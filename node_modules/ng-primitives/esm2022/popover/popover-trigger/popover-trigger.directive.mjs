import { DomPortalOutlet, TemplatePortal } from '@angular/cdk/portal';
import { DOCUMENT } from '@angular/common';
import { Directive, ElementRef, Injector, ViewContainerRef, booleanAttribute, computed, inject, input, model, numberAttribute, signal, } from '@angular/core';
import { autoUpdate, computePosition, flip, offset, shift, } from '@floating-ui/dom';
import { injectDisposables, onBooleanChange } from 'ng-primitives/utils';
import { injectPopoverConfig } from '../config/popover.config';
import { NgpPopoverTriggerToken, providePopoverTrigger } from './popover-trigger.token';
import * as i0 from "@angular/core";
export class NgpPopoverTrigger {
    constructor() {
        /**
         * Access the trigger element
         */
        this.trigger = inject((ElementRef));
        /**
         * Access the view container ref.
         */
        this.viewContainerRef = inject(ViewContainerRef);
        /**
         * Access the document.
         */
        this.document = inject(DOCUMENT);
        /**
         * Access the injector.
         */
        this.injector = inject(Injector);
        /**
         * Access the global popover configuration.
         */
        this.config = injectPopoverConfig();
        /**
         * Access the disposable utilities
         */
        this.disposables = injectDisposables();
        /**
         * Access the popover template ref.
         */
        this.popover = input.required({
            alias: 'ngpPopoverTrigger',
        });
        /**
         * The open state of the popover.
         * @default false
         */
        this.open = model(false, {
            alias: 'ngpPopoverTriggerOpen',
        });
        /**
         * Define if the trigger should be disabled.
         * @default false
         */
        this.disabled = input(false, {
            alias: 'ngpPopoverTriggerDisabled',
            transform: booleanAttribute,
        });
        /**
         * Define the placement of the popover relative to the trigger.
         * @default 'top'
         */
        this.placement = input(this.config.placement, {
            alias: 'ngpPopoverTriggerPlacement',
        });
        /**
         * Define the offset of the popover relative to the trigger.
         * @default 0
         */
        this.offset = input(this.config.offset, {
            alias: 'ngpPopoverTriggerOffset',
            transform: numberAttribute,
        });
        /**
         * Define the delay before the popover is displayed.
         * @default 0
         */
        this.showDelay = input(this.config.showDelay, {
            alias: 'ngpPopoverTriggerShowDelay',
            transform: numberAttribute,
        });
        /**
         * Define the delay before the popover is hidden.
         * @default 0
         */
        this.hideDelay = input(this.config.hideDelay, {
            alias: 'ngpPopoverTriggerHideDelay',
            transform: numberAttribute,
        });
        /**
         * Define whether the popover should flip when there is not enough space for the popover.
         * @default true
         */
        this.flip = input(this.config.flip, {
            alias: 'ngpPopoverTriggerFlip',
            transform: booleanAttribute,
        });
        /**
         * Define the container in which the popover should be attached.
         * @default document.body
         */
        this.container = input(this.config.container, {
            alias: 'ngpPopoverTriggerContainer',
        });
        /**
         * Define whether the popover should close when clicking outside of it.
         * @default true
         */
        this.closeOnOutsideClick = input(this.config.closeOnOutsideClick, {
            alias: 'ngpPopoverTriggerCloseOnOutsideClick',
            transform: booleanAttribute,
        });
        /**
         * Store the popover view ref.
         */
        this.viewRef = null;
        /**
         * Derive the popover middleware from the provided configuration.
         */
        this.middleware = computed(() => {
            const middleware = [offset(this.offset()), shift()];
            if (this.flip()) {
                middleware.push(flip());
            }
            return middleware;
        });
        /**
         * Store the computed position of the popover.
         * @internal
         */
        this.position = signal({
            x: 0,
            y: 0,
        });
        /**
         * Store the state of the popover.
         * @internal
         */
        this.state = signal('closed');
        // any time the open state changes then show or hide the popover
        onBooleanChange(this.open, this.show.bind(this), this.hide.bind(this));
    }
    ngOnDestroy() {
        this.destroyPopover();
    }
    toggleOpenState() {
        this.open.update(open => !open);
    }
    show() {
        // if the trigger is disabled or the popover is already open then do not show the popover
        if (this.disabled() || this.state() === 'open' || this.state() === 'opening') {
            return;
        }
        this.state.set('opening');
        this.disposables.setTimeout(() => this.createPopover(), this.showDelay());
        // Add document click listener to detect outside clicks
        if (this.closeOnOutsideClick()) {
            this.documentClickListener = this.onDocumentClick.bind(this);
            this.document.addEventListener('click', this.documentClickListener, true);
        }
    }
    hide() {
        // if the trigger is disabled or the popover is already closed then do not hide the popover
        if (this.disabled() || this.state() === 'closed' || this.state() === 'closing') {
            return;
        }
        this.state.set('closing');
        this.disposables.setTimeout(() => this.destroyPopover(), this.hideDelay());
        // Remove the document click listener when the popover is hidden
        if (this.documentClickListener) {
            this.document.removeEventListener('click', this.documentClickListener, true);
        }
    }
    onDocumentClick(event) {
        const target = event.target;
        // Check if the click is outside the trigger or the popover
        const isOutside = !this.trigger.nativeElement.contains(target) &&
            !(this.viewRef?.rootNodes[0]).contains(target);
        if (isOutside) {
            // Close the popover
            this.open.set(false);
        }
    }
    createPopover() {
        const portal = new TemplatePortal(this.popover(), this.viewContainerRef, undefined, this.injector);
        const domOutlet = new DomPortalOutlet(this.container() ?? this.document.body, undefined, undefined, Injector.create({
            parent: this.injector,
            providers: [providePopoverTrigger(this)],
        }));
        this.viewRef = domOutlet.attach(portal);
        this.viewRef.detectChanges();
        const outletElement = this.viewRef.rootNodes[0];
        this.dispose = autoUpdate(this.trigger.nativeElement, outletElement, async () => {
            const position = await computePosition(this.trigger.nativeElement, outletElement, {
                placement: this.placement(),
                middleware: this.middleware(),
            });
            this.position.set({ x: position.x, y: position.y });
        });
        this.state.set('open');
    }
    destroyPopover() {
        this.viewRef?.destroy();
        this.viewRef = null;
        this.dispose?.();
        this.state.set('closed');
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: NgpPopoverTrigger, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "17.1.0", version: "18.2.13", type: NgpPopoverTrigger, isStandalone: true, selector: "[ngpPopoverTrigger]", inputs: { popover: { classPropertyName: "popover", publicName: "ngpPopoverTrigger", isSignal: true, isRequired: true, transformFunction: null }, open: { classPropertyName: "open", publicName: "ngpPopoverTriggerOpen", isSignal: true, isRequired: false, transformFunction: null }, disabled: { classPropertyName: "disabled", publicName: "ngpPopoverTriggerDisabled", isSignal: true, isRequired: false, transformFunction: null }, placement: { classPropertyName: "placement", publicName: "ngpPopoverTriggerPlacement", isSignal: true, isRequired: false, transformFunction: null }, offset: { classPropertyName: "offset", publicName: "ngpPopoverTriggerOffset", isSignal: true, isRequired: false, transformFunction: null }, showDelay: { classPropertyName: "showDelay", publicName: "ngpPopoverTriggerShowDelay", isSignal: true, isRequired: false, transformFunction: null }, hideDelay: { classPropertyName: "hideDelay", publicName: "ngpPopoverTriggerHideDelay", isSignal: true, isRequired: false, transformFunction: null }, flip: { classPropertyName: "flip", publicName: "ngpPopoverTriggerFlip", isSignal: true, isRequired: false, transformFunction: null }, container: { classPropertyName: "container", publicName: "ngpPopoverTriggerContainer", isSignal: true, isRequired: false, transformFunction: null }, closeOnOutsideClick: { classPropertyName: "closeOnOutsideClick", publicName: "ngpPopoverTriggerCloseOnOutsideClick", isSignal: true, isRequired: false, transformFunction: null } }, outputs: { open: "ngpPopoverTriggerOpenChange" }, host: { listeners: { "click": "toggleOpenState()" }, properties: { "attr.data-state": "state()", "attr.data-disabled": "disabled() ? \"\" : null" } }, providers: [{ provide: NgpPopoverTriggerToken, useExisting: NgpPopoverTrigger }], exportAs: ["ngpPopoverTrigger"], ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: NgpPopoverTrigger, decorators: [{
            type: Directive,
            args: [{
                    standalone: true,
                    selector: '[ngpPopoverTrigger]',
                    exportAs: 'ngpPopoverTrigger',
                    providers: [{ provide: NgpPopoverTriggerToken, useExisting: NgpPopoverTrigger }],
                    host: {
                        '[attr.data-state]': 'state()',
                        '[attr.data-disabled]': 'disabled() ? "" : null',
                        '(click)': 'toggleOpenState()',
                    },
                }]
        }], ctorParameters: () => [] });
//# sourceMappingURL=data:application/json;base64,