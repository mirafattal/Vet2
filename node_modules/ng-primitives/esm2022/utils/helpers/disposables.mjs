/**
 * Copyright Â© 2024 Angular Primitives.
 * https://github.com/ng-primitives/ng-primitives
 *
 * This source code is licensed under the Apache 2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */
import { DestroyRef, inject } from '@angular/core';
/**
 * Disposable functions are a way to manage timers, intervals, and event listeners
 * that should be cleared when a component is destroyed.
 *
 * This is heavily inspired by Headless UI disposables:
 * https://github.com/tailwindlabs/headlessui/blob/main/packages/%40headlessui-react/src/utils/disposables.ts
 */
export function injectDisposables() {
    const destroyRef = inject(DestroyRef);
    return {
        /**
         * Set a timeout that will be cleared when the component is destroyed.
         * @param callback The callback to execute
         * @param delay The delay before the callback is executed
         * @returns A function to clear the timeout
         */
        setTimeout: (callback, delay) => {
            const id = setTimeout(callback, delay);
            const cleanup = () => clearTimeout(id);
            destroyRef.onDestroy(cleanup);
            return cleanup;
        },
        /**
         * Set an interval that will be cleared when the component is destroyed.
         * @param callback The callback to execute
         * @param delay The delay before the callback is executed
         * @param target
         * @param type
         * @param listener
         * @param options
         * @returns A function to clear the interval
         */
        addEventListener: (target, type, listener, options) => {
            target.addEventListener(type, listener, options);
            const cleanup = () => target.removeEventListener(type, listener, options);
            destroyRef.onDestroy(cleanup);
            return cleanup;
        },
        /**
         * Set an interval that will be cleared when the component is destroyed.
         * @param callback The callback to execute
         * @param delay The delay before the callback is executed
         * @returns A function to clear the interval
         */
        setInterval: (callback, delay) => {
            const id = setInterval(callback, delay);
            const cleanup = () => clearInterval(id);
            destroyRef.onDestroy(cleanup);
            return cleanup;
        },
        /**
         * Set a requestAnimationFrame that will be cleared when the component is destroyed.
         * @param callback The callback to execute
         * @returns A function to clear the requestAnimationFrame
         */
        requestAnimationFrame: (callback) => {
            const id = requestAnimationFrame(callback);
            const cleanup = () => cancelAnimationFrame(id);
            destroyRef.onDestroy(cleanup);
            return cleanup;
        },
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlzcG9zYWJsZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9uZy1wcmltaXRpdmVzL3V0aWxzL3NyYy9oZWxwZXJzL2Rpc3Bvc2FibGVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7R0FNRztBQUNILE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRW5EOzs7Ozs7R0FNRztBQUNILE1BQU0sVUFBVSxpQkFBaUI7SUFDL0IsTUFBTSxVQUFVLEdBQUcsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBRXRDLE9BQU87UUFDTDs7Ozs7V0FLRztRQUNILFVBQVUsRUFBRSxDQUFDLFFBQW9CLEVBQUUsS0FBYSxFQUFFLEVBQUU7WUFDbEQsTUFBTSxFQUFFLEdBQUcsVUFBVSxDQUFDLFFBQVEsRUFBRSxLQUFLLENBQUMsQ0FBQztZQUN2QyxNQUFNLE9BQU8sR0FBRyxHQUFHLEVBQUUsQ0FBQyxZQUFZLENBQUMsRUFBRSxDQUFDLENBQUM7WUFDdkMsVUFBVSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUM5QixPQUFPLE9BQU8sQ0FBQztRQUNqQixDQUFDO1FBQ0Q7Ozs7Ozs7OztXQVNHO1FBQ0gsZ0JBQWdCLEVBQUUsQ0FDaEIsTUFBbUIsRUFDbkIsSUFBTyxFQUNQLFFBQWdFLEVBQ2hFLE9BQTJDLEVBQzNDLEVBQUU7WUFDRixNQUFNLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxFQUFFLFFBQThDLEVBQUUsT0FBTyxDQUFDLENBQUM7WUFDdkYsTUFBTSxPQUFPLEdBQUcsR0FBRyxFQUFFLENBQ25CLE1BQU0sQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLEVBQUUsUUFBOEMsRUFBRSxPQUFPLENBQUMsQ0FBQztZQUM1RixVQUFVLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBQzlCLE9BQU8sT0FBTyxDQUFDO1FBQ2pCLENBQUM7UUFDRDs7Ozs7V0FLRztRQUNILFdBQVcsRUFBRSxDQUFDLFFBQW9CLEVBQUUsS0FBYSxFQUFFLEVBQUU7WUFDbkQsTUFBTSxFQUFFLEdBQUcsV0FBVyxDQUFDLFFBQVEsRUFBRSxLQUFLLENBQUMsQ0FBQztZQUN4QyxNQUFNLE9BQU8sR0FBRyxHQUFHLEVBQUUsQ0FBQyxhQUFhLENBQUMsRUFBRSxDQUFDLENBQUM7WUFDeEMsVUFBVSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUM5QixPQUFPLE9BQU8sQ0FBQztRQUNqQixDQUFDO1FBQ0Q7Ozs7V0FJRztRQUNILHFCQUFxQixFQUFFLENBQUMsUUFBOEIsRUFBRSxFQUFFO1lBQ3hELE1BQU0sRUFBRSxHQUFHLHFCQUFxQixDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBQzNDLE1BQU0sT0FBTyxHQUFHLEdBQUcsRUFBRSxDQUFDLG9CQUFvQixDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQy9DLFVBQVUsQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLENBQUM7WUFDOUIsT0FBTyxPQUFPLENBQUM7UUFDakIsQ0FBQztLQUNGLENBQUM7QUFDSixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgwqkgMjAyNCBBbmd1bGFyIFByaW1pdGl2ZXMuXG4gKiBodHRwczovL2dpdGh1Yi5jb20vbmctcHJpbWl0aXZlcy9uZy1wcmltaXRpdmVzXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIDIuMCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5pbXBvcnQgeyBEZXN0cm95UmVmLCBpbmplY3QgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuLyoqXG4gKiBEaXNwb3NhYmxlIGZ1bmN0aW9ucyBhcmUgYSB3YXkgdG8gbWFuYWdlIHRpbWVycywgaW50ZXJ2YWxzLCBhbmQgZXZlbnQgbGlzdGVuZXJzXG4gKiB0aGF0IHNob3VsZCBiZSBjbGVhcmVkIHdoZW4gYSBjb21wb25lbnQgaXMgZGVzdHJveWVkLlxuICpcbiAqIFRoaXMgaXMgaGVhdmlseSBpbnNwaXJlZCBieSBIZWFkbGVzcyBVSSBkaXNwb3NhYmxlczpcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS90YWlsd2luZGxhYnMvaGVhZGxlc3N1aS9ibG9iL21haW4vcGFja2FnZXMvJTQwaGVhZGxlc3N1aS1yZWFjdC9zcmMvdXRpbHMvZGlzcG9zYWJsZXMudHNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGluamVjdERpc3Bvc2FibGVzKCkge1xuICBjb25zdCBkZXN0cm95UmVmID0gaW5qZWN0KERlc3Ryb3lSZWYpO1xuXG4gIHJldHVybiB7XG4gICAgLyoqXG4gICAgICogU2V0IGEgdGltZW91dCB0aGF0IHdpbGwgYmUgY2xlYXJlZCB3aGVuIHRoZSBjb21wb25lbnQgaXMgZGVzdHJveWVkLlxuICAgICAqIEBwYXJhbSBjYWxsYmFjayBUaGUgY2FsbGJhY2sgdG8gZXhlY3V0ZVxuICAgICAqIEBwYXJhbSBkZWxheSBUaGUgZGVsYXkgYmVmb3JlIHRoZSBjYWxsYmFjayBpcyBleGVjdXRlZFxuICAgICAqIEByZXR1cm5zIEEgZnVuY3Rpb24gdG8gY2xlYXIgdGhlIHRpbWVvdXRcbiAgICAgKi9cbiAgICBzZXRUaW1lb3V0OiAoY2FsbGJhY2s6ICgpID0+IHZvaWQsIGRlbGF5OiBudW1iZXIpID0+IHtcbiAgICAgIGNvbnN0IGlkID0gc2V0VGltZW91dChjYWxsYmFjaywgZGVsYXkpO1xuICAgICAgY29uc3QgY2xlYW51cCA9ICgpID0+IGNsZWFyVGltZW91dChpZCk7XG4gICAgICBkZXN0cm95UmVmLm9uRGVzdHJveShjbGVhbnVwKTtcbiAgICAgIHJldHVybiBjbGVhbnVwO1xuICAgIH0sXG4gICAgLyoqXG4gICAgICogU2V0IGFuIGludGVydmFsIHRoYXQgd2lsbCBiZSBjbGVhcmVkIHdoZW4gdGhlIGNvbXBvbmVudCBpcyBkZXN0cm95ZWQuXG4gICAgICogQHBhcmFtIGNhbGxiYWNrIFRoZSBjYWxsYmFjayB0byBleGVjdXRlXG4gICAgICogQHBhcmFtIGRlbGF5IFRoZSBkZWxheSBiZWZvcmUgdGhlIGNhbGxiYWNrIGlzIGV4ZWN1dGVkXG4gICAgICogQHBhcmFtIHRhcmdldFxuICAgICAqIEBwYXJhbSB0eXBlXG4gICAgICogQHBhcmFtIGxpc3RlbmVyXG4gICAgICogQHBhcmFtIG9wdGlvbnNcbiAgICAgKiBAcmV0dXJucyBBIGZ1bmN0aW9uIHRvIGNsZWFyIHRoZSBpbnRlcnZhbFxuICAgICAqL1xuICAgIGFkZEV2ZW50TGlzdGVuZXI6IDxLIGV4dGVuZHMga2V5b2YgSFRNTEVsZW1lbnRFdmVudE1hcD4oXG4gICAgICB0YXJnZXQ6IEV2ZW50VGFyZ2V0LFxuICAgICAgdHlwZTogSyxcbiAgICAgIGxpc3RlbmVyOiAodGhpczogSFRNTEVsZW1lbnQsIGV2OiBIVE1MRWxlbWVudEV2ZW50TWFwW0tdKSA9PiBhbnksXG4gICAgICBvcHRpb25zPzogYm9vbGVhbiB8IEFkZEV2ZW50TGlzdGVuZXJPcHRpb25zLFxuICAgICkgPT4ge1xuICAgICAgdGFyZ2V0LmFkZEV2ZW50TGlzdGVuZXIodHlwZSwgbGlzdGVuZXIgYXMgRXZlbnRMaXN0ZW5lck9yRXZlbnRMaXN0ZW5lck9iamVjdCwgb3B0aW9ucyk7XG4gICAgICBjb25zdCBjbGVhbnVwID0gKCkgPT5cbiAgICAgICAgdGFyZ2V0LnJlbW92ZUV2ZW50TGlzdGVuZXIodHlwZSwgbGlzdGVuZXIgYXMgRXZlbnRMaXN0ZW5lck9yRXZlbnRMaXN0ZW5lck9iamVjdCwgb3B0aW9ucyk7XG4gICAgICBkZXN0cm95UmVmLm9uRGVzdHJveShjbGVhbnVwKTtcbiAgICAgIHJldHVybiBjbGVhbnVwO1xuICAgIH0sXG4gICAgLyoqXG4gICAgICogU2V0IGFuIGludGVydmFsIHRoYXQgd2lsbCBiZSBjbGVhcmVkIHdoZW4gdGhlIGNvbXBvbmVudCBpcyBkZXN0cm95ZWQuXG4gICAgICogQHBhcmFtIGNhbGxiYWNrIFRoZSBjYWxsYmFjayB0byBleGVjdXRlXG4gICAgICogQHBhcmFtIGRlbGF5IFRoZSBkZWxheSBiZWZvcmUgdGhlIGNhbGxiYWNrIGlzIGV4ZWN1dGVkXG4gICAgICogQHJldHVybnMgQSBmdW5jdGlvbiB0byBjbGVhciB0aGUgaW50ZXJ2YWxcbiAgICAgKi9cbiAgICBzZXRJbnRlcnZhbDogKGNhbGxiYWNrOiAoKSA9PiB2b2lkLCBkZWxheTogbnVtYmVyKSA9PiB7XG4gICAgICBjb25zdCBpZCA9IHNldEludGVydmFsKGNhbGxiYWNrLCBkZWxheSk7XG4gICAgICBjb25zdCBjbGVhbnVwID0gKCkgPT4gY2xlYXJJbnRlcnZhbChpZCk7XG4gICAgICBkZXN0cm95UmVmLm9uRGVzdHJveShjbGVhbnVwKTtcbiAgICAgIHJldHVybiBjbGVhbnVwO1xuICAgIH0sXG4gICAgLyoqXG4gICAgICogU2V0IGEgcmVxdWVzdEFuaW1hdGlvbkZyYW1lIHRoYXQgd2lsbCBiZSBjbGVhcmVkIHdoZW4gdGhlIGNvbXBvbmVudCBpcyBkZXN0cm95ZWQuXG4gICAgICogQHBhcmFtIGNhbGxiYWNrIFRoZSBjYWxsYmFjayB0byBleGVjdXRlXG4gICAgICogQHJldHVybnMgQSBmdW5jdGlvbiB0byBjbGVhciB0aGUgcmVxdWVzdEFuaW1hdGlvbkZyYW1lXG4gICAgICovXG4gICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lOiAoY2FsbGJhY2s6IEZyYW1lUmVxdWVzdENhbGxiYWNrKSA9PiB7XG4gICAgICBjb25zdCBpZCA9IHJlcXVlc3RBbmltYXRpb25GcmFtZShjYWxsYmFjayk7XG4gICAgICBjb25zdCBjbGVhbnVwID0gKCkgPT4gY2FuY2VsQW5pbWF0aW9uRnJhbWUoaWQpO1xuICAgICAgZGVzdHJveVJlZi5vbkRlc3Ryb3koY2xlYW51cCk7XG4gICAgICByZXR1cm4gY2xlYW51cDtcbiAgICB9LFxuICB9O1xufVxuIl19