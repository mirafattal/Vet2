/**
 * Copyright Â© 2024 Angular Primitives.
 * https://github.com/ng-primitives/ng-primitives
 *
 * This source code is licensed under the Apache 2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */
import { effect, signal } from '@angular/core';
/**
 * Listen for changes to a signal and call a function when the signal changes.
 * @param source
 * @param fn
 * @param options
 * @param options.injector
 * @internal
 */
export function onChange(source, fn, options) {
    const previousValue = signal(source());
    effect(() => {
        const value = source();
        if (value !== previousValue()) {
            fn(value, previousValue());
            previousValue.set(value);
        }
    }, { allowSignalWrites: true, injector: options?.injector });
    // call the fn with the initial value
    fn(source(), null);
}
/**
 * Listen for changes to a boolean signal and call one of two functions when the signal changes.
 * @param source
 * @param onTrue
 * @param onFalse
 * @param options
 */
export function onBooleanChange(source, onTrue, onFalse, options) {
    onChange(source, value => (value ? onTrue?.() : onFalse?.()), options);
}
/**
 * A utility to sync the value of a signal with the Angular Forms onChange callback.
 * @param source The signal to sync with the onChange callback.
 * @param fn The onChange callback.
 * @param options The options for the effect.
 */
export function onFormControlChange(source, fn, options) {
    const previousValue = signal(source());
    effect(() => {
        const value = source();
        if (value !== previousValue() && value !== undefined && value !== null) {
            fn?.(value);
            previousValue.set(value);
        }
    }, { allowSignalWrites: true, injector: options?.injector });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXN5bmMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9uZy1wcmltaXRpdmVzL3V0aWxzL3NyYy9zaWduYWxzL2FzeW5jLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7R0FNRztBQUNILE9BQU8sRUFBb0IsTUFBTSxFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUVqRTs7Ozs7OztHQU9HO0FBQ0gsTUFBTSxVQUFVLFFBQVEsQ0FDdEIsTUFBb0MsRUFDcEMsRUFBOEUsRUFDOUUsT0FBZ0M7SUFFaEMsTUFBTSxhQUFhLEdBQUcsTUFBTSxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUM7SUFFdkMsTUFBTSxDQUNKLEdBQUcsRUFBRTtRQUNILE1BQU0sS0FBSyxHQUFHLE1BQU0sRUFBRSxDQUFDO1FBQ3ZCLElBQUksS0FBSyxLQUFLLGFBQWEsRUFBRSxFQUFFLENBQUM7WUFDOUIsRUFBRSxDQUFDLEtBQUssRUFBRSxhQUFhLEVBQUUsQ0FBQyxDQUFDO1lBQzNCLGFBQWEsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDM0IsQ0FBQztJQUNILENBQUMsRUFDRCxFQUFFLGlCQUFpQixFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsT0FBTyxFQUFFLFFBQVEsRUFBRSxDQUN6RCxDQUFDO0lBRUYscUNBQXFDO0lBQ3JDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsRUFBRSxJQUFJLENBQUMsQ0FBQztBQUNyQixDQUFDO0FBRUQ7Ozs7OztHQU1HO0FBQ0gsTUFBTSxVQUFVLGVBQWUsQ0FDN0IsTUFBdUIsRUFDdkIsTUFBbUIsRUFDbkIsT0FBb0IsRUFDcEIsT0FBZ0M7SUFFaEMsUUFBUSxDQUFDLE1BQU0sRUFBRSxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUFDLEVBQUUsT0FBTyxDQUFDLENBQUM7QUFDekUsQ0FBQztBQUVEOzs7OztHQUtHO0FBQ0gsTUFBTSxVQUFVLG1CQUFtQixDQUNqQyxNQUFvQyxFQUNwQyxFQUF1QixFQUN2QixPQUFnQztJQUVoQyxNQUFNLGFBQWEsR0FBRyxNQUFNLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQztJQUV2QyxNQUFNLENBQ0osR0FBRyxFQUFFO1FBQ0gsTUFBTSxLQUFLLEdBQUcsTUFBTSxFQUFFLENBQUM7UUFFdkIsSUFBSSxLQUFLLEtBQUssYUFBYSxFQUFFLElBQUksS0FBSyxLQUFLLFNBQVMsSUFBSSxLQUFLLEtBQUssSUFBSSxFQUFFLENBQUM7WUFDdkUsRUFBRSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDWixhQUFhLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQzNCLENBQUM7SUFDSCxDQUFDLEVBQ0QsRUFBRSxpQkFBaUIsRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLE9BQU8sRUFBRSxRQUFRLEVBQUUsQ0FDekQsQ0FBQztBQUNKLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCDCqSAyMDI0IEFuZ3VsYXIgUHJpbWl0aXZlcy5cbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9uZy1wcmltaXRpdmVzL25nLXByaW1pdGl2ZXNcbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgMi4wIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbmltcG9ydCB7IEluamVjdG9yLCBTaWduYWwsIGVmZmVjdCwgc2lnbmFsIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbi8qKlxuICogTGlzdGVuIGZvciBjaGFuZ2VzIHRvIGEgc2lnbmFsIGFuZCBjYWxsIGEgZnVuY3Rpb24gd2hlbiB0aGUgc2lnbmFsIGNoYW5nZXMuXG4gKiBAcGFyYW0gc291cmNlXG4gKiBAcGFyYW0gZm5cbiAqIEBwYXJhbSBvcHRpb25zXG4gKiBAcGFyYW0gb3B0aW9ucy5pbmplY3RvclxuICogQGludGVybmFsXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBvbkNoYW5nZTxUPihcbiAgc291cmNlOiBTaWduYWw8VCB8IG51bGwgfCB1bmRlZmluZWQ+LFxuICBmbjogKHZhbHVlOiBUIHwgbnVsbCB8IHVuZGVmaW5lZCwgcHJldmlvdXNWYWx1ZTogVCB8IG51bGwgfCB1bmRlZmluZWQpID0+IHZvaWQsXG4gIG9wdGlvbnM/OiB7IGluamVjdG9yOiBJbmplY3RvciB9LFxuKTogdm9pZCB7XG4gIGNvbnN0IHByZXZpb3VzVmFsdWUgPSBzaWduYWwoc291cmNlKCkpO1xuXG4gIGVmZmVjdChcbiAgICAoKSA9PiB7XG4gICAgICBjb25zdCB2YWx1ZSA9IHNvdXJjZSgpO1xuICAgICAgaWYgKHZhbHVlICE9PSBwcmV2aW91c1ZhbHVlKCkpIHtcbiAgICAgICAgZm4odmFsdWUsIHByZXZpb3VzVmFsdWUoKSk7XG4gICAgICAgIHByZXZpb3VzVmFsdWUuc2V0KHZhbHVlKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHsgYWxsb3dTaWduYWxXcml0ZXM6IHRydWUsIGluamVjdG9yOiBvcHRpb25zPy5pbmplY3RvciB9LFxuICApO1xuXG4gIC8vIGNhbGwgdGhlIGZuIHdpdGggdGhlIGluaXRpYWwgdmFsdWVcbiAgZm4oc291cmNlKCksIG51bGwpO1xufVxuXG4vKipcbiAqIExpc3RlbiBmb3IgY2hhbmdlcyB0byBhIGJvb2xlYW4gc2lnbmFsIGFuZCBjYWxsIG9uZSBvZiB0d28gZnVuY3Rpb25zIHdoZW4gdGhlIHNpZ25hbCBjaGFuZ2VzLlxuICogQHBhcmFtIHNvdXJjZVxuICogQHBhcmFtIG9uVHJ1ZVxuICogQHBhcmFtIG9uRmFsc2VcbiAqIEBwYXJhbSBvcHRpb25zXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBvbkJvb2xlYW5DaGFuZ2UoXG4gIHNvdXJjZTogU2lnbmFsPGJvb2xlYW4+LFxuICBvblRydWU/OiAoKSA9PiB2b2lkLFxuICBvbkZhbHNlPzogKCkgPT4gdm9pZCxcbiAgb3B0aW9ucz86IHsgaW5qZWN0b3I6IEluamVjdG9yIH0sXG4pOiB2b2lkIHtcbiAgb25DaGFuZ2Uoc291cmNlLCB2YWx1ZSA9PiAodmFsdWUgPyBvblRydWU/LigpIDogb25GYWxzZT8uKCkpLCBvcHRpb25zKTtcbn1cblxuLyoqXG4gKiBBIHV0aWxpdHkgdG8gc3luYyB0aGUgdmFsdWUgb2YgYSBzaWduYWwgd2l0aCB0aGUgQW5ndWxhciBGb3JtcyBvbkNoYW5nZSBjYWxsYmFjay5cbiAqIEBwYXJhbSBzb3VyY2UgVGhlIHNpZ25hbCB0byBzeW5jIHdpdGggdGhlIG9uQ2hhbmdlIGNhbGxiYWNrLlxuICogQHBhcmFtIGZuIFRoZSBvbkNoYW5nZSBjYWxsYmFjay5cbiAqIEBwYXJhbSBvcHRpb25zIFRoZSBvcHRpb25zIGZvciB0aGUgZWZmZWN0LlxuICovXG5leHBvcnQgZnVuY3Rpb24gb25Gb3JtQ29udHJvbENoYW5nZTxUPihcbiAgc291cmNlOiBTaWduYWw8VCB8IG51bGwgfCB1bmRlZmluZWQ+LFxuICBmbj86ICh2YWx1ZTogVCkgPT4gdm9pZCxcbiAgb3B0aW9ucz86IHsgaW5qZWN0b3I6IEluamVjdG9yIH0sXG4pOiB2b2lkIHtcbiAgY29uc3QgcHJldmlvdXNWYWx1ZSA9IHNpZ25hbChzb3VyY2UoKSk7XG5cbiAgZWZmZWN0KFxuICAgICgpID0+IHtcbiAgICAgIGNvbnN0IHZhbHVlID0gc291cmNlKCk7XG5cbiAgICAgIGlmICh2YWx1ZSAhPT0gcHJldmlvdXNWYWx1ZSgpICYmIHZhbHVlICE9PSB1bmRlZmluZWQgJiYgdmFsdWUgIT09IG51bGwpIHtcbiAgICAgICAgZm4/Lih2YWx1ZSk7XG4gICAgICAgIHByZXZpb3VzVmFsdWUuc2V0KHZhbHVlKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHsgYWxsb3dTaWduYWxXcml0ZXM6IHRydWUsIGluamVjdG9yOiBvcHRpb25zPy5pbmplY3RvciB9LFxuICApO1xufVxuIl19