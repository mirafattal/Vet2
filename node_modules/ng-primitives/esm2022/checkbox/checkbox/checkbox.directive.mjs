import { Directive, HostListener, booleanAttribute, input, model } from '@angular/core';
import { NgpFormControl } from 'ng-primitives/form-field';
import { NgpFocusVisible, NgpHover, NgpPress } from 'ng-primitives/interactions';
import { NgpDisabledToken } from 'ng-primitives/internal';
import { uniqueId } from 'ng-primitives/utils';
import { NgpCheckboxToken } from './checkbox.token';
import * as i0 from "@angular/core";
import * as i1 from "ng-primitives/form-field";
import * as i2 from "ng-primitives/interactions";
export class NgpCheckbox {
    constructor() {
        /**
         * The id of the checkbox.
         * @internal
         */
        this.id = input(uniqueId('ngp-checkbox'));
        /**
         * Defines whether the checkbox is checked.
         */
        this.checked = model(false, {
            alias: 'ngpCheckboxChecked',
        });
        /**
         * Defines whether the checkbox is indeterminate.
         */
        this.indeterminate = model(false, {
            alias: 'ngpCheckboxIndeterminate',
        });
        /**
         * Whether the checkbox is required.
         */
        this.required = input(false, {
            alias: 'ngpCheckboxRequired',
            transform: booleanAttribute,
        });
        /**
         * Defines whether the checkbox is disabled.
         */
        this.disabled = input(false, {
            alias: 'ngpCheckboxDisabled',
            transform: booleanAttribute,
        });
    }
    onEnter(event) {
        // According to WAI ARIA, Checkboxes don't activate on enter keypress
        event.preventDefault();
    }
    toggle(event) {
        if (this.disabled()) {
            return;
        }
        // prevent this firing twice in cases where the label is clicked and the checkbox is clicked by the one event
        event?.preventDefault();
        this.checked.set(this.indeterminate() ? true : !this.checked());
        // if the checkbox was indeterminate, it isn't anymore
        if (this.indeterminate()) {
            this.indeterminate.set(false);
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: NgpCheckbox, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "17.1.0", version: "18.2.13", type: NgpCheckbox, isStandalone: true, selector: "[ngpCheckbox]", inputs: { id: { classPropertyName: "id", publicName: "id", isSignal: true, isRequired: false, transformFunction: null }, checked: { classPropertyName: "checked", publicName: "ngpCheckboxChecked", isSignal: true, isRequired: false, transformFunction: null }, indeterminate: { classPropertyName: "indeterminate", publicName: "ngpCheckboxIndeterminate", isSignal: true, isRequired: false, transformFunction: null }, required: { classPropertyName: "required", publicName: "ngpCheckboxRequired", isSignal: true, isRequired: false, transformFunction: null }, disabled: { classPropertyName: "disabled", publicName: "ngpCheckboxDisabled", isSignal: true, isRequired: false, transformFunction: null } }, outputs: { checked: "ngpCheckboxCheckedChange", indeterminate: "ngpCheckboxIndeterminateChange" }, host: { attributes: { "role": "checkbox" }, listeners: { "keydown.enter": "onEnter($event)", "click": "toggle($event)", "keydown.space": "toggle($event)" }, properties: { "attr.aria-checked": "indeterminate() ? \"mixed\" : checked()", "attr.data-checked": "checked() ? \"\" : null", "attr.data-indeterminate": "indeterminate() ? \"\" : null", "tabindex": "disabled() ? -1 : 0" } }, providers: [
            { provide: NgpCheckboxToken, useExisting: NgpCheckbox },
            { provide: NgpDisabledToken, useExisting: NgpCheckbox },
        ], hostDirectives: [{ directive: i1.NgpFormControl }, { directive: i2.NgpHover }, { directive: i2.NgpFocusVisible }, { directive: i2.NgpPress }], ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: NgpCheckbox, decorators: [{
            type: Directive,
            args: [{
                    selector: '[ngpCheckbox]',
                    standalone: true,
                    providers: [
                        { provide: NgpCheckboxToken, useExisting: NgpCheckbox },
                        { provide: NgpDisabledToken, useExisting: NgpCheckbox },
                    ],
                    hostDirectives: [NgpFormControl, NgpHover, NgpFocusVisible, NgpPress],
                    host: {
                        role: 'checkbox',
                        '[attr.aria-checked]': 'indeterminate() ? "mixed" : checked()',
                        '[attr.data-checked]': 'checked() ? "" : null',
                        '[attr.data-indeterminate]': 'indeterminate() ? "" : null',
                        '[tabindex]': 'disabled() ? -1 : 0',
                    },
                }]
        }], propDecorators: { onEnter: [{
                type: HostListener,
                args: ['keydown.enter', ['$event']]
            }], toggle: [{
                type: HostListener,
                args: ['click', ['$event']]
            }, {
                type: HostListener,
                args: ['keydown.space', ['$event']]
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hlY2tib3guZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvbmctcHJpbWl0aXZlcy9jaGVja2JveC9zcmMvY2hlY2tib3gvY2hlY2tib3guZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQVFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsWUFBWSxFQUFFLGdCQUFnQixFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDeEYsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBQzFELE9BQU8sRUFBRSxlQUFlLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBQ2pGLE9BQU8sRUFBaUIsZ0JBQWdCLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUN6RSxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDL0MsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sa0JBQWtCLENBQUM7Ozs7QUFrQnBELE1BQU0sT0FBTyxXQUFXO0lBaEJ4QjtRQWlCRTs7O1dBR0c7UUFDTSxPQUFFLEdBQUcsS0FBSyxDQUFDLFFBQVEsQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDO1FBRTlDOztXQUVHO1FBQ00sWUFBTyxHQUFHLEtBQUssQ0FBVSxLQUFLLEVBQUU7WUFDdkMsS0FBSyxFQUFFLG9CQUFvQjtTQUM1QixDQUFDLENBQUM7UUFFSDs7V0FFRztRQUNNLGtCQUFhLEdBQUcsS0FBSyxDQUFVLEtBQUssRUFBRTtZQUM3QyxLQUFLLEVBQUUsMEJBQTBCO1NBQ2xDLENBQUMsQ0FBQztRQUVIOztXQUVHO1FBQ00sYUFBUSxHQUFHLEtBQUssQ0FBd0IsS0FBSyxFQUFFO1lBQ3RELEtBQUssRUFBRSxxQkFBcUI7WUFDNUIsU0FBUyxFQUFFLGdCQUFnQjtTQUM1QixDQUFDLENBQUM7UUFFSDs7V0FFRztRQUNNLGFBQVEsR0FBRyxLQUFLLENBQXdCLEtBQUssRUFBRTtZQUN0RCxLQUFLLEVBQUUscUJBQXFCO1lBQzVCLFNBQVMsRUFBRSxnQkFBZ0I7U0FDNUIsQ0FBQyxDQUFDO0tBeUJKO0lBdEJXLE9BQU8sQ0FBQyxLQUFvQjtRQUNwQyxxRUFBcUU7UUFDckUsS0FBSyxDQUFDLGNBQWMsRUFBRSxDQUFDO0lBQ3pCLENBQUM7SUFJRCxNQUFNLENBQUMsS0FBYTtRQUNsQixJQUFJLElBQUksQ0FBQyxRQUFRLEVBQUUsRUFBRSxDQUFDO1lBQ3BCLE9BQU87UUFDVCxDQUFDO1FBRUQsNkdBQTZHO1FBQzdHLEtBQUssRUFBRSxjQUFjLEVBQUUsQ0FBQztRQUV4QixJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsYUFBYSxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQztRQUVoRSxzREFBc0Q7UUFDdEQsSUFBSSxJQUFJLENBQUMsYUFBYSxFQUFFLEVBQUUsQ0FBQztZQUN6QixJQUFJLENBQUMsYUFBYSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNoQyxDQUFDO0lBQ0gsQ0FBQzsrR0EzRFUsV0FBVzttR0FBWCxXQUFXLG90Q0FiWDtZQUNULEVBQUUsT0FBTyxFQUFFLGdCQUFnQixFQUFFLFdBQVcsRUFBRSxXQUFXLEVBQUU7WUFDdkQsRUFBRSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsV0FBVyxFQUFFLFdBQVcsRUFBRTtTQUN4RDs7NEZBVVUsV0FBVztrQkFoQnZCLFNBQVM7bUJBQUM7b0JBQ1QsUUFBUSxFQUFFLGVBQWU7b0JBQ3pCLFVBQVUsRUFBRSxJQUFJO29CQUNoQixTQUFTLEVBQUU7d0JBQ1QsRUFBRSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsV0FBVyxhQUFhLEVBQUU7d0JBQ3ZELEVBQUUsT0FBTyxFQUFFLGdCQUFnQixFQUFFLFdBQVcsYUFBYSxFQUFFO3FCQUN4RDtvQkFDRCxjQUFjLEVBQUUsQ0FBQyxjQUFjLEVBQUUsUUFBUSxFQUFFLGVBQWUsRUFBRSxRQUFRLENBQUM7b0JBQ3JFLElBQUksRUFBRTt3QkFDSixJQUFJLEVBQUUsVUFBVTt3QkFDaEIscUJBQXFCLEVBQUUsdUNBQXVDO3dCQUM5RCxxQkFBcUIsRUFBRSx1QkFBdUI7d0JBQzlDLDJCQUEyQixFQUFFLDZCQUE2Qjt3QkFDMUQsWUFBWSxFQUFFLHFCQUFxQjtxQkFDcEM7aUJBQ0Y7OEJBdUNXLE9BQU87c0JBRGhCLFlBQVk7dUJBQUMsZUFBZSxFQUFFLENBQUMsUUFBUSxDQUFDO2dCQVF6QyxNQUFNO3NCQUZMLFlBQVk7dUJBQUMsT0FBTyxFQUFFLENBQUMsUUFBUSxDQUFDOztzQkFDaEMsWUFBWTt1QkFBQyxlQUFlLEVBQUUsQ0FBQyxRQUFRLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCDCqSAyMDI0IEFuZ3VsYXIgUHJpbWl0aXZlcy5cbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9uZy1wcmltaXRpdmVzL25nLXByaW1pdGl2ZXNcbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgMi4wIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbmltcG9ydCB7IEJvb2xlYW5JbnB1dCB9IGZyb20gJ0Bhbmd1bGFyL2Nkay9jb2VyY2lvbic7XG5pbXBvcnQgeyBEaXJlY3RpdmUsIEhvc3RMaXN0ZW5lciwgYm9vbGVhbkF0dHJpYnV0ZSwgaW5wdXQsIG1vZGVsIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBOZ3BGb3JtQ29udHJvbCB9IGZyb20gJ25nLXByaW1pdGl2ZXMvZm9ybS1maWVsZCc7XG5pbXBvcnQgeyBOZ3BGb2N1c1Zpc2libGUsIE5ncEhvdmVyLCBOZ3BQcmVzcyB9IGZyb20gJ25nLXByaW1pdGl2ZXMvaW50ZXJhY3Rpb25zJztcbmltcG9ydCB7IE5ncENhbkRpc2FibGUsIE5ncERpc2FibGVkVG9rZW4gfSBmcm9tICduZy1wcmltaXRpdmVzL2ludGVybmFsJztcbmltcG9ydCB7IHVuaXF1ZUlkIH0gZnJvbSAnbmctcHJpbWl0aXZlcy91dGlscyc7XG5pbXBvcnQgeyBOZ3BDaGVja2JveFRva2VuIH0gZnJvbSAnLi9jaGVja2JveC50b2tlbic7XG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ1tuZ3BDaGVja2JveF0nLFxuICBzdGFuZGFsb25lOiB0cnVlLFxuICBwcm92aWRlcnM6IFtcbiAgICB7IHByb3ZpZGU6IE5ncENoZWNrYm94VG9rZW4sIHVzZUV4aXN0aW5nOiBOZ3BDaGVja2JveCB9LFxuICAgIHsgcHJvdmlkZTogTmdwRGlzYWJsZWRUb2tlbiwgdXNlRXhpc3Rpbmc6IE5ncENoZWNrYm94IH0sXG4gIF0sXG4gIGhvc3REaXJlY3RpdmVzOiBbTmdwRm9ybUNvbnRyb2wsIE5ncEhvdmVyLCBOZ3BGb2N1c1Zpc2libGUsIE5ncFByZXNzXSxcbiAgaG9zdDoge1xuICAgIHJvbGU6ICdjaGVja2JveCcsXG4gICAgJ1thdHRyLmFyaWEtY2hlY2tlZF0nOiAnaW5kZXRlcm1pbmF0ZSgpID8gXCJtaXhlZFwiIDogY2hlY2tlZCgpJyxcbiAgICAnW2F0dHIuZGF0YS1jaGVja2VkXSc6ICdjaGVja2VkKCkgPyBcIlwiIDogbnVsbCcsXG4gICAgJ1thdHRyLmRhdGEtaW5kZXRlcm1pbmF0ZV0nOiAnaW5kZXRlcm1pbmF0ZSgpID8gXCJcIiA6IG51bGwnLFxuICAgICdbdGFiaW5kZXhdJzogJ2Rpc2FibGVkKCkgPyAtMSA6IDAnLFxuICB9LFxufSlcbmV4cG9ydCBjbGFzcyBOZ3BDaGVja2JveCBpbXBsZW1lbnRzIE5ncENhbkRpc2FibGUge1xuICAvKipcbiAgICogVGhlIGlkIG9mIHRoZSBjaGVja2JveC5cbiAgICogQGludGVybmFsXG4gICAqL1xuICByZWFkb25seSBpZCA9IGlucHV0KHVuaXF1ZUlkKCduZ3AtY2hlY2tib3gnKSk7XG5cbiAgLyoqXG4gICAqIERlZmluZXMgd2hldGhlciB0aGUgY2hlY2tib3ggaXMgY2hlY2tlZC5cbiAgICovXG4gIHJlYWRvbmx5IGNoZWNrZWQgPSBtb2RlbDxib29sZWFuPihmYWxzZSwge1xuICAgIGFsaWFzOiAnbmdwQ2hlY2tib3hDaGVja2VkJyxcbiAgfSk7XG5cbiAgLyoqXG4gICAqIERlZmluZXMgd2hldGhlciB0aGUgY2hlY2tib3ggaXMgaW5kZXRlcm1pbmF0ZS5cbiAgICovXG4gIHJlYWRvbmx5IGluZGV0ZXJtaW5hdGUgPSBtb2RlbDxib29sZWFuPihmYWxzZSwge1xuICAgIGFsaWFzOiAnbmdwQ2hlY2tib3hJbmRldGVybWluYXRlJyxcbiAgfSk7XG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgdGhlIGNoZWNrYm94IGlzIHJlcXVpcmVkLlxuICAgKi9cbiAgcmVhZG9ubHkgcmVxdWlyZWQgPSBpbnB1dDxib29sZWFuLCBCb29sZWFuSW5wdXQ+KGZhbHNlLCB7XG4gICAgYWxpYXM6ICduZ3BDaGVja2JveFJlcXVpcmVkJyxcbiAgICB0cmFuc2Zvcm06IGJvb2xlYW5BdHRyaWJ1dGUsXG4gIH0pO1xuXG4gIC8qKlxuICAgKiBEZWZpbmVzIHdoZXRoZXIgdGhlIGNoZWNrYm94IGlzIGRpc2FibGVkLlxuICAgKi9cbiAgcmVhZG9ubHkgZGlzYWJsZWQgPSBpbnB1dDxib29sZWFuLCBCb29sZWFuSW5wdXQ+KGZhbHNlLCB7XG4gICAgYWxpYXM6ICduZ3BDaGVja2JveERpc2FibGVkJyxcbiAgICB0cmFuc2Zvcm06IGJvb2xlYW5BdHRyaWJ1dGUsXG4gIH0pO1xuXG4gIEBIb3N0TGlzdGVuZXIoJ2tleWRvd24uZW50ZXInLCBbJyRldmVudCddKVxuICBwcm90ZWN0ZWQgb25FbnRlcihldmVudDogS2V5Ym9hcmRFdmVudCk6IHZvaWQge1xuICAgIC8vIEFjY29yZGluZyB0byBXQUkgQVJJQSwgQ2hlY2tib3hlcyBkb24ndCBhY3RpdmF0ZSBvbiBlbnRlciBrZXlwcmVzc1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gIH1cblxuICBASG9zdExpc3RlbmVyKCdjbGljaycsIFsnJGV2ZW50J10pXG4gIEBIb3N0TGlzdGVuZXIoJ2tleWRvd24uc3BhY2UnLCBbJyRldmVudCddKVxuICB0b2dnbGUoZXZlbnQ/OiBFdmVudCk6IHZvaWQge1xuICAgIGlmICh0aGlzLmRpc2FibGVkKCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBwcmV2ZW50IHRoaXMgZmlyaW5nIHR3aWNlIGluIGNhc2VzIHdoZXJlIHRoZSBsYWJlbCBpcyBjbGlja2VkIGFuZCB0aGUgY2hlY2tib3ggaXMgY2xpY2tlZCBieSB0aGUgb25lIGV2ZW50XG4gICAgZXZlbnQ/LnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICB0aGlzLmNoZWNrZWQuc2V0KHRoaXMuaW5kZXRlcm1pbmF0ZSgpID8gdHJ1ZSA6ICF0aGlzLmNoZWNrZWQoKSk7XG5cbiAgICAvLyBpZiB0aGUgY2hlY2tib3ggd2FzIGluZGV0ZXJtaW5hdGUsIGl0IGlzbid0IGFueW1vcmVcbiAgICBpZiAodGhpcy5pbmRldGVybWluYXRlKCkpIHtcbiAgICAgIHRoaXMuaW5kZXRlcm1pbmF0ZS5zZXQoZmFsc2UpO1xuICAgIH1cbiAgfVxufVxuIl19