/**
 * Copyright Â© 2024 Angular Primitives.
 * https://github.com/ng-primitives/ng-primitives
 *
 * This source code is licensed under the Apache 2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */
export class NgpToastRef {
    /** Get the toast height */
    get height() {
        return this.toastElement.offsetHeight;
    }
    constructor(
    /** Store the toast element */
    toastElement, 
    /** Store the duration */
    duration, 
    /** The position of the toast */
    position, 
    /** The gravity of the toast */
    gravity, 
    /** Whether we should stop on focus */
    stopOnHover, 
    /** The aria live setting */
    ariaLive, onDismiss) {
        this.toastElement = toastElement;
        this.duration = duration;
        this.position = position;
        this.gravity = gravity;
        this.stopOnHover = stopOnHover;
        this.ariaLive = ariaLive;
        this.onDismiss = onDismiss;
        /** Store the current timeout */
        this.timeoutId = null;
        this.toastElement.setAttribute('data-toast', 'visible');
        this.setPosition(position);
        this.setGravity(gravity);
        this.setAriaLive(ariaLive);
        this.setupTimeouts();
        this.setupListeners();
    }
    dismiss() {
        // determine if there is a transition on the element
        const transitionDuration = parseFloat(getComputedStyle(this.toastElement).transitionDuration);
        // if there is no transition, dismiss immediately
        if (transitionDuration === 0) {
            this.removeElement();
            return;
        }
        // wait for the transition to end
        this.toastElement.addEventListener('transitionend', () => this.removeElement());
        this.toastElement.setAttribute('data-toast', 'hidden');
    }
    removeElement() {
        this.toastElement.parentNode?.removeChild(this.toastElement);
        this.onDismiss();
    }
    /** Setup duration timeouts */
    setupTimeouts() {
        // if the duration is 0 skip
        if (this.duration === 0) {
            return;
        }
        this.timeoutId = window.setTimeout(() => this.dismiss(), this.duration);
    }
    setupListeners() {
        if (!this.stopOnHover) {
            return;
        }
        // setup event listeners if we should stop on focus
        this.toastElement.addEventListener('mouseover', () => {
            window.clearTimeout(this.timeoutId);
            this.timeoutId = null;
        });
        this.toastElement.addEventListener('mouseleave', () => this.setupTimeouts());
    }
    /** Set the position attribute */
    setPosition(position) {
        this.toastElement.setAttribute('data-position', position);
    }
    /** Set the gravity attribute */
    setGravity(gravity) {
        this.toastElement.setAttribute('data-gravity', gravity);
    }
    /** Set the aria live attribute */
    setAriaLive(ariaLive) {
        this.toastElement.setAttribute('aria-live', ariaLive);
    }
    /**
     * @internal
     */
    setInset(property, value) {
        this.toastElement.style[property] = value;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9hc3QtcmVmLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvbmctcHJpbWl0aXZlcy90b2FzdC9zcmMvdG9hc3QvdG9hc3QtcmVmLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7R0FNRztBQUtILE1BQU0sT0FBTyxXQUFXO0lBSXRCLDJCQUEyQjtJQUMzQixJQUFJLE1BQU07UUFDUixPQUFPLElBQUksQ0FBQyxZQUFZLENBQUMsWUFBWSxDQUFDO0lBQ3hDLENBQUM7SUFFRDtJQUNFLDhCQUE4QjtJQUNiLFlBQXlCO0lBQzFDLHlCQUF5QjtJQUNSLFFBQWdCO0lBQ2pDLGdDQUFnQztJQUNoQixRQUEwQjtJQUMxQywrQkFBK0I7SUFDZixPQUF3QjtJQUN4QyxzQ0FBc0M7SUFDckIsV0FBb0I7SUFDckMsNEJBQTRCO0lBQ1gsUUFBZ0IsRUFDaEIsU0FBcUI7UUFYckIsaUJBQVksR0FBWixZQUFZLENBQWE7UUFFekIsYUFBUSxHQUFSLFFBQVEsQ0FBUTtRQUVqQixhQUFRLEdBQVIsUUFBUSxDQUFrQjtRQUUxQixZQUFPLEdBQVAsT0FBTyxDQUFpQjtRQUV2QixnQkFBVyxHQUFYLFdBQVcsQ0FBUztRQUVwQixhQUFRLEdBQVIsUUFBUSxDQUFRO1FBQ2hCLGNBQVMsR0FBVCxTQUFTLENBQVk7UUFyQnhDLGdDQUFnQztRQUN4QixjQUFTLEdBQWtCLElBQUksQ0FBQztRQXNCdEMsSUFBSSxDQUFDLFlBQVksQ0FBQyxZQUFZLENBQUMsWUFBWSxFQUFFLFNBQVMsQ0FBQyxDQUFDO1FBRXhELElBQUksQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDM0IsSUFBSSxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUN6QixJQUFJLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQzNCLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztRQUNyQixJQUFJLENBQUMsY0FBYyxFQUFFLENBQUM7SUFDeEIsQ0FBQztJQUVELE9BQU87UUFDTCxvREFBb0Q7UUFDcEQsTUFBTSxrQkFBa0IsR0FBRyxVQUFVLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDLGtCQUFrQixDQUFDLENBQUM7UUFFOUYsaURBQWlEO1FBQ2pELElBQUksa0JBQWtCLEtBQUssQ0FBQyxFQUFFLENBQUM7WUFDN0IsSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDO1lBQ3JCLE9BQU87UUFDVCxDQUFDO1FBRUQsaUNBQWlDO1FBQ2pDLElBQUksQ0FBQyxZQUFZLENBQUMsZ0JBQWdCLENBQUMsZUFBZSxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQyxDQUFDO1FBRWhGLElBQUksQ0FBQyxZQUFZLENBQUMsWUFBWSxDQUFDLFlBQVksRUFBRSxRQUFRLENBQUMsQ0FBQztJQUN6RCxDQUFDO0lBRU8sYUFBYTtRQUNuQixJQUFJLENBQUMsWUFBWSxDQUFDLFVBQVUsRUFBRSxXQUFXLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO1FBQzdELElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQztJQUNuQixDQUFDO0lBRUQsOEJBQThCO0lBQ3RCLGFBQWE7UUFDbkIsNEJBQTRCO1FBQzVCLElBQUksSUFBSSxDQUFDLFFBQVEsS0FBSyxDQUFDLEVBQUUsQ0FBQztZQUN4QixPQUFPO1FBQ1QsQ0FBQztRQUVELElBQUksQ0FBQyxTQUFTLEdBQUcsTUFBTSxDQUFDLFVBQVUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQzFFLENBQUM7SUFFTyxjQUFjO1FBQ3BCLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7WUFDdEIsT0FBTztRQUNULENBQUM7UUFFRCxtREFBbUQ7UUFDbkQsSUFBSSxDQUFDLFlBQVksQ0FBQyxnQkFBZ0IsQ0FBQyxXQUFXLEVBQUUsR0FBRyxFQUFFO1lBQ25ELE1BQU0sQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLFNBQVUsQ0FBQyxDQUFDO1lBQ3JDLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDO1FBQ3hCLENBQUMsQ0FBQyxDQUFDO1FBRUgsSUFBSSxDQUFDLFlBQVksQ0FBQyxnQkFBZ0IsQ0FBQyxZQUFZLEVBQUUsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDLENBQUM7SUFDL0UsQ0FBQztJQUVELGlDQUFpQztJQUN6QixXQUFXLENBQUMsUUFBMEI7UUFDNUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxZQUFZLENBQUMsZUFBZSxFQUFFLFFBQVEsQ0FBQyxDQUFDO0lBQzVELENBQUM7SUFFRCxnQ0FBZ0M7SUFDeEIsVUFBVSxDQUFDLE9BQXdCO1FBQ3pDLElBQUksQ0FBQyxZQUFZLENBQUMsWUFBWSxDQUFDLGNBQWMsRUFBRSxPQUFPLENBQUMsQ0FBQztJQUMxRCxDQUFDO0lBRUQsa0NBQWtDO0lBQzFCLFdBQVcsQ0FBQyxRQUFnQjtRQUNsQyxJQUFJLENBQUMsWUFBWSxDQUFDLFlBQVksQ0FBQyxXQUFXLEVBQUUsUUFBUSxDQUFDLENBQUM7SUFDeEQsQ0FBQztJQUVEOztPQUVHO0lBQ0gsUUFBUSxDQUFDLFFBQTBCLEVBQUUsS0FBYTtRQUNoRCxJQUFJLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsR0FBRyxLQUFLLENBQUM7SUFDNUMsQ0FBQztDQUNGIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgwqkgMjAyNCBBbmd1bGFyIFByaW1pdGl2ZXMuXG4gKiBodHRwczovL2dpdGh1Yi5jb20vbmctcHJpbWl0aXZlcy9uZy1wcmltaXRpdmVzXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIDIuMCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbmV4cG9ydCB0eXBlIE5ncFRvYXN0UG9zaXRpb24gPSAnc3RhcnQnIHwgJ2NlbnRlcicgfCAnZW5kJztcbmV4cG9ydCB0eXBlIE5ncFRvYXN0R3Jhdml0eSA9ICd0b3AnIHwgJ2JvdHRvbSc7XG5cbmV4cG9ydCBjbGFzcyBOZ3BUb2FzdFJlZiB7XG4gIC8qKiBTdG9yZSB0aGUgY3VycmVudCB0aW1lb3V0ICovXG4gIHByaXZhdGUgdGltZW91dElkOiBudW1iZXIgfCBudWxsID0gbnVsbDtcblxuICAvKiogR2V0IHRoZSB0b2FzdCBoZWlnaHQgKi9cbiAgZ2V0IGhlaWdodCgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLnRvYXN0RWxlbWVudC5vZmZzZXRIZWlnaHQ7XG4gIH1cblxuICBjb25zdHJ1Y3RvcihcbiAgICAvKiogU3RvcmUgdGhlIHRvYXN0IGVsZW1lbnQgKi9cbiAgICBwcml2YXRlIHJlYWRvbmx5IHRvYXN0RWxlbWVudDogSFRNTEVsZW1lbnQsXG4gICAgLyoqIFN0b3JlIHRoZSBkdXJhdGlvbiAqL1xuICAgIHByaXZhdGUgcmVhZG9ubHkgZHVyYXRpb246IG51bWJlcixcbiAgICAvKiogVGhlIHBvc2l0aW9uIG9mIHRoZSB0b2FzdCAqL1xuICAgIHB1YmxpYyByZWFkb25seSBwb3NpdGlvbjogTmdwVG9hc3RQb3NpdGlvbixcbiAgICAvKiogVGhlIGdyYXZpdHkgb2YgdGhlIHRvYXN0ICovXG4gICAgcHVibGljIHJlYWRvbmx5IGdyYXZpdHk6IE5ncFRvYXN0R3Jhdml0eSxcbiAgICAvKiogV2hldGhlciB3ZSBzaG91bGQgc3RvcCBvbiBmb2N1cyAqL1xuICAgIHByaXZhdGUgcmVhZG9ubHkgc3RvcE9uSG92ZXI6IGJvb2xlYW4sXG4gICAgLyoqIFRoZSBhcmlhIGxpdmUgc2V0dGluZyAqL1xuICAgIHByaXZhdGUgcmVhZG9ubHkgYXJpYUxpdmU6IHN0cmluZyxcbiAgICBwcml2YXRlIHJlYWRvbmx5IG9uRGlzbWlzczogKCkgPT4gdm9pZCxcbiAgKSB7XG4gICAgdGhpcy50b2FzdEVsZW1lbnQuc2V0QXR0cmlidXRlKCdkYXRhLXRvYXN0JywgJ3Zpc2libGUnKTtcblxuICAgIHRoaXMuc2V0UG9zaXRpb24ocG9zaXRpb24pO1xuICAgIHRoaXMuc2V0R3Jhdml0eShncmF2aXR5KTtcbiAgICB0aGlzLnNldEFyaWFMaXZlKGFyaWFMaXZlKTtcbiAgICB0aGlzLnNldHVwVGltZW91dHMoKTtcbiAgICB0aGlzLnNldHVwTGlzdGVuZXJzKCk7XG4gIH1cblxuICBkaXNtaXNzKCk6IHZvaWQge1xuICAgIC8vIGRldGVybWluZSBpZiB0aGVyZSBpcyBhIHRyYW5zaXRpb24gb24gdGhlIGVsZW1lbnRcbiAgICBjb25zdCB0cmFuc2l0aW9uRHVyYXRpb24gPSBwYXJzZUZsb2F0KGdldENvbXB1dGVkU3R5bGUodGhpcy50b2FzdEVsZW1lbnQpLnRyYW5zaXRpb25EdXJhdGlvbik7XG5cbiAgICAvLyBpZiB0aGVyZSBpcyBubyB0cmFuc2l0aW9uLCBkaXNtaXNzIGltbWVkaWF0ZWx5XG4gICAgaWYgKHRyYW5zaXRpb25EdXJhdGlvbiA9PT0gMCkge1xuICAgICAgdGhpcy5yZW1vdmVFbGVtZW50KCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gd2FpdCBmb3IgdGhlIHRyYW5zaXRpb24gdG8gZW5kXG4gICAgdGhpcy50b2FzdEVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigndHJhbnNpdGlvbmVuZCcsICgpID0+IHRoaXMucmVtb3ZlRWxlbWVudCgpKTtcblxuICAgIHRoaXMudG9hc3RFbGVtZW50LnNldEF0dHJpYnV0ZSgnZGF0YS10b2FzdCcsICdoaWRkZW4nKTtcbiAgfVxuXG4gIHByaXZhdGUgcmVtb3ZlRWxlbWVudCgpOiB2b2lkIHtcbiAgICB0aGlzLnRvYXN0RWxlbWVudC5wYXJlbnROb2RlPy5yZW1vdmVDaGlsZCh0aGlzLnRvYXN0RWxlbWVudCk7XG4gICAgdGhpcy5vbkRpc21pc3MoKTtcbiAgfVxuXG4gIC8qKiBTZXR1cCBkdXJhdGlvbiB0aW1lb3V0cyAqL1xuICBwcml2YXRlIHNldHVwVGltZW91dHMoKTogdm9pZCB7XG4gICAgLy8gaWYgdGhlIGR1cmF0aW9uIGlzIDAgc2tpcFxuICAgIGlmICh0aGlzLmR1cmF0aW9uID09PSAwKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy50aW1lb3V0SWQgPSB3aW5kb3cuc2V0VGltZW91dCgoKSA9PiB0aGlzLmRpc21pc3MoKSwgdGhpcy5kdXJhdGlvbik7XG4gIH1cblxuICBwcml2YXRlIHNldHVwTGlzdGVuZXJzKCk6IHZvaWQge1xuICAgIGlmICghdGhpcy5zdG9wT25Ib3Zlcikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIHNldHVwIGV2ZW50IGxpc3RlbmVycyBpZiB3ZSBzaG91bGQgc3RvcCBvbiBmb2N1c1xuICAgIHRoaXMudG9hc3RFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlb3ZlcicsICgpID0+IHtcbiAgICAgIHdpbmRvdy5jbGVhclRpbWVvdXQodGhpcy50aW1lb3V0SWQhKTtcbiAgICAgIHRoaXMudGltZW91dElkID0gbnVsbDtcbiAgICB9KTtcblxuICAgIHRoaXMudG9hc3RFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbGVhdmUnLCAoKSA9PiB0aGlzLnNldHVwVGltZW91dHMoKSk7XG4gIH1cblxuICAvKiogU2V0IHRoZSBwb3NpdGlvbiBhdHRyaWJ1dGUgKi9cbiAgcHJpdmF0ZSBzZXRQb3NpdGlvbihwb3NpdGlvbjogTmdwVG9hc3RQb3NpdGlvbik6IHZvaWQge1xuICAgIHRoaXMudG9hc3RFbGVtZW50LnNldEF0dHJpYnV0ZSgnZGF0YS1wb3NpdGlvbicsIHBvc2l0aW9uKTtcbiAgfVxuXG4gIC8qKiBTZXQgdGhlIGdyYXZpdHkgYXR0cmlidXRlICovXG4gIHByaXZhdGUgc2V0R3Jhdml0eShncmF2aXR5OiBOZ3BUb2FzdEdyYXZpdHkpOiB2b2lkIHtcbiAgICB0aGlzLnRvYXN0RWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2RhdGEtZ3Jhdml0eScsIGdyYXZpdHkpO1xuICB9XG5cbiAgLyoqIFNldCB0aGUgYXJpYSBsaXZlIGF0dHJpYnV0ZSAqL1xuICBwcml2YXRlIHNldEFyaWFMaXZlKGFyaWFMaXZlOiBzdHJpbmcpOiB2b2lkIHtcbiAgICB0aGlzLnRvYXN0RWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2FyaWEtbGl2ZScsIGFyaWFMaXZlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIHNldEluc2V0KHByb3BlcnR5OiAndG9wJyB8ICdib3R0b20nLCB2YWx1ZTogc3RyaW5nKTogdm9pZCB7XG4gICAgdGhpcy50b2FzdEVsZW1lbnQuc3R5bGVbcHJvcGVydHldID0gdmFsdWU7XG4gIH1cbn1cbiJdfQ==