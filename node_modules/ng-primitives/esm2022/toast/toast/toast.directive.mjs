import { DomPortalOutlet, TemplatePortal } from '@angular/cdk/portal';
import { DOCUMENT } from '@angular/common';
import { booleanAttribute, Directive, inject, Injector, input, numberAttribute, TemplateRef, ViewContainerRef, } from '@angular/core';
import { injectToastConfig } from '../config/toast.config';
import { NgpToastRef } from './toast-ref';
import { NgpToastToken } from './toast.token';
import * as i0 from "@angular/core";
export class NgpToast {
    constructor() {
        this.config = injectToastConfig();
        /** Access the ng-template */
        this.template = inject(TemplateRef);
        /** Access the view container */
        this.viewContainer = inject(ViewContainerRef);
        /** Access the injector */
        this.injector = inject(Injector);
        /** Access the document */
        this.document = inject(DOCUMENT);
        this.duration = input(this.config.duration, {
            alias: 'ngpToastDuration',
            transform: numberAttribute,
        });
        this.gravity = input(this.config.gravity, {
            alias: 'ngpToastGravity',
        });
        this.position = input(this.config.position, {
            alias: 'ngpToastPosition',
        });
        this.stopOnHover = input(this.config.stopOnHover, {
            alias: 'ngpToastStopOnHover',
            transform: booleanAttribute,
        });
        this.ariaLive = input(this.config.ariaLive, {
            alias: 'ngpToastAriaLive',
        });
        /** Store the list of toasts */
        this.toasts = [];
    }
    /** Show the toast. */
    show() {
        this.createToast();
        this.reposition();
    }
    /** Build the toast */
    createToast() {
        const portal = new TemplatePortal(this.template, this.viewContainer, {
            dismiss: () => toastRef.dismiss(),
        }, this.injector);
        const domOutlet = new DomPortalOutlet(this.document.body, undefined, undefined, Injector.create({
            parent: this.injector,
            providers: [],
        }));
        const viewRef = domOutlet.attach(portal);
        viewRef.detectChanges();
        const toastElement = viewRef.rootNodes[0];
        const toastRef = new NgpToastRef(toastElement, this.duration(), this.position(), this.gravity(), this.stopOnHover(), this.ariaLive(), () => {
            this.toasts = this.toasts.filter(t => t !== toastRef);
            this.reposition();
        });
        this.toasts = [...this.toasts, toastRef];
    }
    /** Position the toast on the DOM */
    reposition() {
        const topStartOffsetSize = {
            top: this.config.gap,
            bottom: this.config.gap,
        };
        const topEndOffsetSize = {
            top: this.config.gap,
            bottom: this.config.gap,
        };
        let position;
        // update the position of the toasts
        for (const toast of this.toasts) {
            // Getting the applied gravity
            position = toast.gravity;
            const height = toast.height;
            if (toast.position === 'start') {
                toast.setInset(position, `${topStartOffsetSize[position]}px`);
                topStartOffsetSize[position] += height + this.config.gap;
            }
            else {
                toast.setInset(position, `${topEndOffsetSize[position]}px`);
                topEndOffsetSize[position] += height + this.config.gap;
            }
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: NgpToast, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "17.1.0", version: "18.2.13", type: NgpToast, isStandalone: true, selector: "[ngpToast]", inputs: { duration: { classPropertyName: "duration", publicName: "ngpToastDuration", isSignal: true, isRequired: false, transformFunction: null }, gravity: { classPropertyName: "gravity", publicName: "ngpToastGravity", isSignal: true, isRequired: false, transformFunction: null }, position: { classPropertyName: "position", publicName: "ngpToastPosition", isSignal: true, isRequired: false, transformFunction: null }, stopOnHover: { classPropertyName: "stopOnHover", publicName: "ngpToastStopOnHover", isSignal: true, isRequired: false, transformFunction: null }, ariaLive: { classPropertyName: "ariaLive", publicName: "ngpToastAriaLive", isSignal: true, isRequired: false, transformFunction: null } }, providers: [{ provide: NgpToastToken, useExisting: NgpToast }], exportAs: ["ngpToast"], ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: NgpToast, decorators: [{
            type: Directive,
            args: [{
                    standalone: true,
                    selector: '[ngpToast]',
                    exportAs: 'ngpToast',
                    providers: [{ provide: NgpToastToken, useExisting: NgpToast }],
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,