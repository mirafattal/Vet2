import { booleanAttribute, computed, Directive, HostListener, input } from '@angular/core';
import { NgpButton } from 'ng-primitives/button';
import { NgpDisabledToken } from 'ng-primitives/internal';
import { injectPagination } from '../pagination/pagination.token';
import { NgpPaginationPreviousToken } from './pagination-previous.token';
import * as i0 from "@angular/core";
import * as i1 from "ng-primitives/button";
export class NgpPaginationPrevious {
    constructor() {
        /**
         * Access the pagination directive.
         */
        this.pagination = injectPagination();
        /**
         * Whether the button is disabled.
         */
        this.buttonDisabled = input(false, {
            alias: 'ngpPaginationPreviousDisabled',
            transform: booleanAttribute,
        });
        /**
         * Whether the button is disabled.
         */
        this.disabled = computed(() => this.buttonDisabled() || this.pagination.disabled() || this.pagination.firstPage());
    }
    /**
     * Go to the previous page.
     */
    goToPreviousPage() {
        if (this.disabled()) {
            return;
        }
        this.pagination.page.set(this.pagination.page() - 1);
    }
    /**
     * A click event may not be fired if this is on an anchor tag and the href is empty.
     * This is a workaround to ensure the click event is fired.
     */
    onEnter(event) {
        event.preventDefault();
        event.stopPropagation();
        this.goToPreviousPage();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: NgpPaginationPrevious, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "17.1.0", version: "18.2.13", type: NgpPaginationPrevious, isStandalone: true, selector: "[ngpPaginationPrevious]", inputs: { buttonDisabled: { classPropertyName: "buttonDisabled", publicName: "ngpPaginationPreviousDisabled", isSignal: true, isRequired: false, transformFunction: null } }, host: { listeners: { "click": "goToPreviousPage()", "keydown.enter": "onEnter($event)", "keydown.space": "onEnter($event)" }, properties: { "tabindex": "disabled() ? -1 : 0", "attr.data-disabled": "disabled() ? \"\" : null", "attr.data-first-page": "pagination.firstPage() ? \"\" : null" } }, providers: [
            { provide: NgpPaginationPreviousToken, useExisting: NgpPaginationPrevious },
            { provide: NgpDisabledToken, useExisting: NgpPaginationPrevious },
        ], exportAs: ["ngpPaginationPrevious"], hostDirectives: [{ directive: i1.NgpButton }], ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: NgpPaginationPrevious, decorators: [{
            type: Directive,
            args: [{
                    standalone: true,
                    selector: '[ngpPaginationPrevious]',
                    exportAs: 'ngpPaginationPrevious',
                    providers: [
                        { provide: NgpPaginationPreviousToken, useExisting: NgpPaginationPrevious },
                        { provide: NgpDisabledToken, useExisting: NgpPaginationPrevious },
                    ],
                    hostDirectives: [NgpButton],
                    host: {
                        '[tabindex]': 'disabled() ? -1 : 0',
                        '[attr.data-disabled]': 'disabled() ? "" : null',
                        '[attr.data-first-page]': 'pagination.firstPage() ? "" : null',
                    },
                }]
        }], propDecorators: { goToPreviousPage: [{
                type: HostListener,
                args: ['click']
            }], onEnter: [{
                type: HostListener,
                args: ['keydown.enter', ['$event']]
            }, {
                type: HostListener,
                args: ['keydown.space', ['$event']]
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFnaW5hdGlvbi1wcmV2aW91cy5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9uZy1wcmltaXRpdmVzL3BhZ2luYXRpb24vc3JjL3BhZ2luYXRpb24tcHJldmlvdXMvcGFnaW5hdGlvbi1wcmV2aW91cy5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBUUEsT0FBTyxFQUFFLGdCQUFnQixFQUFFLFFBQVEsRUFBRSxTQUFTLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzRixPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDakQsT0FBTyxFQUFpQixnQkFBZ0IsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQ3pFLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBQ2xFLE9BQU8sRUFBRSwwQkFBMEIsRUFBRSxNQUFNLDZCQUE2QixDQUFDOzs7QUFpQnpFLE1BQU0sT0FBTyxxQkFBcUI7SUFmbEM7UUFnQkU7O1dBRUc7UUFDZ0IsZUFBVSxHQUFHLGdCQUFnQixFQUFFLENBQUM7UUFFbkQ7O1dBRUc7UUFDTSxtQkFBYyxHQUFHLEtBQUssQ0FBd0IsS0FBSyxFQUFFO1lBQzVELEtBQUssRUFBRSwrQkFBK0I7WUFDdEMsU0FBUyxFQUFFLGdCQUFnQjtTQUM1QixDQUFDLENBQUM7UUFFSDs7V0FFRztRQUNNLGFBQVEsR0FBRyxRQUFRLENBQzFCLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxjQUFjLEVBQUUsSUFBSSxJQUFJLENBQUMsVUFBVSxDQUFDLFFBQVEsRUFBRSxJQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsU0FBUyxFQUFFLENBQ3pGLENBQUM7S0F5Qkg7SUF2QkM7O09BRUc7SUFFSCxnQkFBZ0I7UUFDZCxJQUFJLElBQUksQ0FBQyxRQUFRLEVBQUUsRUFBRSxDQUFDO1lBQ3BCLE9BQU87UUFDVCxDQUFDO1FBRUQsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDdkQsQ0FBQztJQUVEOzs7T0FHRztJQUdPLE9BQU8sQ0FBQyxLQUFvQjtRQUNwQyxLQUFLLENBQUMsY0FBYyxFQUFFLENBQUM7UUFDdkIsS0FBSyxDQUFDLGVBQWUsRUFBRSxDQUFDO1FBQ3hCLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO0lBQzFCLENBQUM7K0dBM0NVLHFCQUFxQjttR0FBckIscUJBQXFCLHloQkFYckI7WUFDVCxFQUFFLE9BQU8sRUFBRSwwQkFBMEIsRUFBRSxXQUFXLEVBQUUscUJBQXFCLEVBQUU7WUFDM0UsRUFBRSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsV0FBVyxFQUFFLHFCQUFxQixFQUFFO1NBQ2xFOzs0RkFRVSxxQkFBcUI7a0JBZmpDLFNBQVM7bUJBQUM7b0JBQ1QsVUFBVSxFQUFFLElBQUk7b0JBQ2hCLFFBQVEsRUFBRSx5QkFBeUI7b0JBQ25DLFFBQVEsRUFBRSx1QkFBdUI7b0JBQ2pDLFNBQVMsRUFBRTt3QkFDVCxFQUFFLE9BQU8sRUFBRSwwQkFBMEIsRUFBRSxXQUFXLHVCQUF1QixFQUFFO3dCQUMzRSxFQUFFLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxXQUFXLHVCQUF1QixFQUFFO3FCQUNsRTtvQkFDRCxjQUFjLEVBQUUsQ0FBQyxTQUFTLENBQUM7b0JBQzNCLElBQUksRUFBRTt3QkFDSixZQUFZLEVBQUUscUJBQXFCO3dCQUNuQyxzQkFBc0IsRUFBRSx3QkFBd0I7d0JBQ2hELHdCQUF3QixFQUFFLG9DQUFvQztxQkFDL0Q7aUJBQ0Y7OEJBMEJDLGdCQUFnQjtzQkFEZixZQUFZO3VCQUFDLE9BQU87Z0JBZVgsT0FBTztzQkFGaEIsWUFBWTt1QkFBQyxlQUFlLEVBQUUsQ0FBQyxRQUFRLENBQUM7O3NCQUN4QyxZQUFZO3VCQUFDLGVBQWUsRUFBRSxDQUFDLFFBQVEsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IMKpIDIwMjQgQW5ndWxhciBQcmltaXRpdmVzLlxuICogaHR0cHM6Ly9naXRodWIuY29tL25nLXByaW1pdGl2ZXMvbmctcHJpbWl0aXZlc1xuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSAyLjAgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuaW1wb3J0IHsgQm9vbGVhbklucHV0IH0gZnJvbSAnQGFuZ3VsYXIvY2RrL2NvZXJjaW9uJztcbmltcG9ydCB7IGJvb2xlYW5BdHRyaWJ1dGUsIGNvbXB1dGVkLCBEaXJlY3RpdmUsIEhvc3RMaXN0ZW5lciwgaW5wdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE5ncEJ1dHRvbiB9IGZyb20gJ25nLXByaW1pdGl2ZXMvYnV0dG9uJztcbmltcG9ydCB7IE5ncENhbkRpc2FibGUsIE5ncERpc2FibGVkVG9rZW4gfSBmcm9tICduZy1wcmltaXRpdmVzL2ludGVybmFsJztcbmltcG9ydCB7IGluamVjdFBhZ2luYXRpb24gfSBmcm9tICcuLi9wYWdpbmF0aW9uL3BhZ2luYXRpb24udG9rZW4nO1xuaW1wb3J0IHsgTmdwUGFnaW5hdGlvblByZXZpb3VzVG9rZW4gfSBmcm9tICcuL3BhZ2luYXRpb24tcHJldmlvdXMudG9rZW4nO1xuXG5ARGlyZWN0aXZlKHtcbiAgc3RhbmRhbG9uZTogdHJ1ZSxcbiAgc2VsZWN0b3I6ICdbbmdwUGFnaW5hdGlvblByZXZpb3VzXScsXG4gIGV4cG9ydEFzOiAnbmdwUGFnaW5hdGlvblByZXZpb3VzJyxcbiAgcHJvdmlkZXJzOiBbXG4gICAgeyBwcm92aWRlOiBOZ3BQYWdpbmF0aW9uUHJldmlvdXNUb2tlbiwgdXNlRXhpc3Rpbmc6IE5ncFBhZ2luYXRpb25QcmV2aW91cyB9LFxuICAgIHsgcHJvdmlkZTogTmdwRGlzYWJsZWRUb2tlbiwgdXNlRXhpc3Rpbmc6IE5ncFBhZ2luYXRpb25QcmV2aW91cyB9LFxuICBdLFxuICBob3N0RGlyZWN0aXZlczogW05ncEJ1dHRvbl0sXG4gIGhvc3Q6IHtcbiAgICAnW3RhYmluZGV4XSc6ICdkaXNhYmxlZCgpID8gLTEgOiAwJyxcbiAgICAnW2F0dHIuZGF0YS1kaXNhYmxlZF0nOiAnZGlzYWJsZWQoKSA/IFwiXCIgOiBudWxsJyxcbiAgICAnW2F0dHIuZGF0YS1maXJzdC1wYWdlXSc6ICdwYWdpbmF0aW9uLmZpcnN0UGFnZSgpID8gXCJcIiA6IG51bGwnLFxuICB9LFxufSlcbmV4cG9ydCBjbGFzcyBOZ3BQYWdpbmF0aW9uUHJldmlvdXMgaW1wbGVtZW50cyBOZ3BDYW5EaXNhYmxlIHtcbiAgLyoqXG4gICAqIEFjY2VzcyB0aGUgcGFnaW5hdGlvbiBkaXJlY3RpdmUuXG4gICAqL1xuICBwcm90ZWN0ZWQgcmVhZG9ubHkgcGFnaW5hdGlvbiA9IGluamVjdFBhZ2luYXRpb24oKTtcblxuICAvKipcbiAgICogV2hldGhlciB0aGUgYnV0dG9uIGlzIGRpc2FibGVkLlxuICAgKi9cbiAgcmVhZG9ubHkgYnV0dG9uRGlzYWJsZWQgPSBpbnB1dDxib29sZWFuLCBCb29sZWFuSW5wdXQ+KGZhbHNlLCB7XG4gICAgYWxpYXM6ICduZ3BQYWdpbmF0aW9uUHJldmlvdXNEaXNhYmxlZCcsXG4gICAgdHJhbnNmb3JtOiBib29sZWFuQXR0cmlidXRlLFxuICB9KTtcblxuICAvKipcbiAgICogV2hldGhlciB0aGUgYnV0dG9uIGlzIGRpc2FibGVkLlxuICAgKi9cbiAgcmVhZG9ubHkgZGlzYWJsZWQgPSBjb21wdXRlZChcbiAgICAoKSA9PiB0aGlzLmJ1dHRvbkRpc2FibGVkKCkgfHwgdGhpcy5wYWdpbmF0aW9uLmRpc2FibGVkKCkgfHwgdGhpcy5wYWdpbmF0aW9uLmZpcnN0UGFnZSgpLFxuICApO1xuXG4gIC8qKlxuICAgKiBHbyB0byB0aGUgcHJldmlvdXMgcGFnZS5cbiAgICovXG4gIEBIb3N0TGlzdGVuZXIoJ2NsaWNrJylcbiAgZ29Ub1ByZXZpb3VzUGFnZSgpIHtcbiAgICBpZiAodGhpcy5kaXNhYmxlZCgpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5wYWdpbmF0aW9uLnBhZ2Uuc2V0KHRoaXMucGFnaW5hdGlvbi5wYWdlKCkgLSAxKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBIGNsaWNrIGV2ZW50IG1heSBub3QgYmUgZmlyZWQgaWYgdGhpcyBpcyBvbiBhbiBhbmNob3IgdGFnIGFuZCB0aGUgaHJlZiBpcyBlbXB0eS5cbiAgICogVGhpcyBpcyBhIHdvcmthcm91bmQgdG8gZW5zdXJlIHRoZSBjbGljayBldmVudCBpcyBmaXJlZC5cbiAgICovXG4gIEBIb3N0TGlzdGVuZXIoJ2tleWRvd24uZW50ZXInLCBbJyRldmVudCddKVxuICBASG9zdExpc3RlbmVyKCdrZXlkb3duLnNwYWNlJywgWyckZXZlbnQnXSlcbiAgcHJvdGVjdGVkIG9uRW50ZXIoZXZlbnQ6IEtleWJvYXJkRXZlbnQpOiB2b2lkIHtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgIHRoaXMuZ29Ub1ByZXZpb3VzUGFnZSgpO1xuICB9XG59XG4iXX0=