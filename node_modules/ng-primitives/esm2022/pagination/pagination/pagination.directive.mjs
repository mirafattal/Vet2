import { booleanAttribute, computed, Directive, input, model, numberAttribute, } from '@angular/core';
import { NgpPaginationToken } from './pagination.token';
import * as i0 from "@angular/core";
export class NgpPagination {
    constructor() {
        /**
         * The currently selected page.
         */
        this.page = model(1, {
            alias: 'ngpPaginationPage',
        });
        /**
         * The total number of pages.
         */
        this.pageCount = input(0, {
            alias: 'ngpPaginationPageCount',
            transform: numberAttribute,
        });
        /**
         * Whether the pagination is disabled.
         */
        this.disabled = input(false, {
            alias: 'ngpPaginationDisabled',
            transform: booleanAttribute,
        });
        /**
         * Determine if we are on the first page.
         * @internal
         */
        this.firstPage = computed(() => this.page() === 1);
        /**
         * Determine if we are on the last page.
         * @internal
         */
        this.lastPage = computed(() => this.page() === this.pageCount());
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: NgpPagination, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "17.1.0", version: "18.2.13", type: NgpPagination, isStandalone: true, selector: "[ngpPagination]", inputs: { page: { classPropertyName: "page", publicName: "ngpPaginationPage", isSignal: true, isRequired: false, transformFunction: null }, pageCount: { classPropertyName: "pageCount", publicName: "ngpPaginationPageCount", isSignal: true, isRequired: false, transformFunction: null }, disabled: { classPropertyName: "disabled", publicName: "ngpPaginationDisabled", isSignal: true, isRequired: false, transformFunction: null } }, outputs: { page: "ngpPaginationPageChange" }, host: { attributes: { "role": "navigation" }, properties: { "attr.data-page": "page()", "attr.data-page-count": "pageCount()", "attr.data-first-page": "firstPage() ? \"\" : null", "attr.data-last-page": "lastPage() ? \"\" : null", "attr.data-disabled": "disabled() ? \"\" : null" } }, providers: [{ provide: NgpPaginationToken, useExisting: NgpPagination }], exportAs: ["ngpPagination"], ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: NgpPagination, decorators: [{
            type: Directive,
            args: [{
                    standalone: true,
                    selector: '[ngpPagination]',
                    exportAs: 'ngpPagination',
                    providers: [{ provide: NgpPaginationToken, useExisting: NgpPagination }],
                    host: {
                        role: 'navigation',
                        '[attr.data-page]': 'page()',
                        '[attr.data-page-count]': 'pageCount()',
                        '[attr.data-first-page]': 'firstPage() ? "" : null',
                        '[attr.data-last-page]': 'lastPage() ? "" : null',
                        '[attr.data-disabled]': 'disabled() ? "" : null',
                    },
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFnaW5hdGlvbi5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9uZy1wcmltaXRpdmVzL3BhZ2luYXRpb24vc3JjL3BhZ2luYXRpb24vcGFnaW5hdGlvbi5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBUUEsT0FBTyxFQUNMLGdCQUFnQixFQUNoQixRQUFRLEVBQ1IsU0FBUyxFQUNULEtBQUssRUFDTCxLQUFLLEVBQ0wsZUFBZSxHQUNoQixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQzs7QUFnQnhELE1BQU0sT0FBTyxhQUFhO0lBZDFCO1FBZUU7O1dBRUc7UUFDTSxTQUFJLEdBQUcsS0FBSyxDQUFTLENBQUMsRUFBRTtZQUMvQixLQUFLLEVBQUUsbUJBQW1CO1NBQzNCLENBQUMsQ0FBQztRQUVIOztXQUVHO1FBQ00sY0FBUyxHQUFHLEtBQUssQ0FBc0IsQ0FBQyxFQUFFO1lBQ2pELEtBQUssRUFBRSx3QkFBd0I7WUFDL0IsU0FBUyxFQUFFLGVBQWU7U0FDM0IsQ0FBQyxDQUFDO1FBRUg7O1dBRUc7UUFDTSxhQUFRLEdBQUcsS0FBSyxDQUF3QixLQUFLLEVBQUU7WUFDdEQsS0FBSyxFQUFFLHVCQUF1QjtZQUM5QixTQUFTLEVBQUUsZ0JBQWdCO1NBQzVCLENBQUMsQ0FBQztRQUVIOzs7V0FHRztRQUNNLGNBQVMsR0FBRyxRQUFRLENBQUMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDO1FBRXZEOzs7V0FHRztRQUNNLGFBQVEsR0FBRyxRQUFRLENBQUMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxLQUFLLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQyxDQUFDO0tBQ3RFOytHQW5DWSxhQUFhO21HQUFiLGFBQWEsc3pCQVZiLENBQUMsRUFBRSxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsV0FBVyxFQUFFLGFBQWEsRUFBRSxDQUFDOzs0RkFVN0QsYUFBYTtrQkFkekIsU0FBUzttQkFBQztvQkFDVCxVQUFVLEVBQUUsSUFBSTtvQkFDaEIsUUFBUSxFQUFFLGlCQUFpQjtvQkFDM0IsUUFBUSxFQUFFLGVBQWU7b0JBQ3pCLFNBQVMsRUFBRSxDQUFDLEVBQUUsT0FBTyxFQUFFLGtCQUFrQixFQUFFLFdBQVcsZUFBZSxFQUFFLENBQUM7b0JBQ3hFLElBQUksRUFBRTt3QkFDSixJQUFJLEVBQUUsWUFBWTt3QkFDbEIsa0JBQWtCLEVBQUUsUUFBUTt3QkFDNUIsd0JBQXdCLEVBQUUsYUFBYTt3QkFDdkMsd0JBQXdCLEVBQUUseUJBQXlCO3dCQUNuRCx1QkFBdUIsRUFBRSx3QkFBd0I7d0JBQ2pELHNCQUFzQixFQUFFLHdCQUF3QjtxQkFDakQ7aUJBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCDCqSAyMDI0IEFuZ3VsYXIgUHJpbWl0aXZlcy5cbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9uZy1wcmltaXRpdmVzL25nLXByaW1pdGl2ZXNcbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgMi4wIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbmltcG9ydCB7IEJvb2xlYW5JbnB1dCwgTnVtYmVySW5wdXQgfSBmcm9tICdAYW5ndWxhci9jZGsvY29lcmNpb24nO1xuaW1wb3J0IHtcbiAgYm9vbGVhbkF0dHJpYnV0ZSxcbiAgY29tcHV0ZWQsXG4gIERpcmVjdGl2ZSxcbiAgaW5wdXQsXG4gIG1vZGVsLFxuICBudW1iZXJBdHRyaWJ1dGUsXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTmdwUGFnaW5hdGlvblRva2VuIH0gZnJvbSAnLi9wYWdpbmF0aW9uLnRva2VuJztcblxuQERpcmVjdGl2ZSh7XG4gIHN0YW5kYWxvbmU6IHRydWUsXG4gIHNlbGVjdG9yOiAnW25ncFBhZ2luYXRpb25dJyxcbiAgZXhwb3J0QXM6ICduZ3BQYWdpbmF0aW9uJyxcbiAgcHJvdmlkZXJzOiBbeyBwcm92aWRlOiBOZ3BQYWdpbmF0aW9uVG9rZW4sIHVzZUV4aXN0aW5nOiBOZ3BQYWdpbmF0aW9uIH1dLFxuICBob3N0OiB7XG4gICAgcm9sZTogJ25hdmlnYXRpb24nLFxuICAgICdbYXR0ci5kYXRhLXBhZ2VdJzogJ3BhZ2UoKScsXG4gICAgJ1thdHRyLmRhdGEtcGFnZS1jb3VudF0nOiAncGFnZUNvdW50KCknLFxuICAgICdbYXR0ci5kYXRhLWZpcnN0LXBhZ2VdJzogJ2ZpcnN0UGFnZSgpID8gXCJcIiA6IG51bGwnLFxuICAgICdbYXR0ci5kYXRhLWxhc3QtcGFnZV0nOiAnbGFzdFBhZ2UoKSA/IFwiXCIgOiBudWxsJyxcbiAgICAnW2F0dHIuZGF0YS1kaXNhYmxlZF0nOiAnZGlzYWJsZWQoKSA/IFwiXCIgOiBudWxsJyxcbiAgfSxcbn0pXG5leHBvcnQgY2xhc3MgTmdwUGFnaW5hdGlvbiB7XG4gIC8qKlxuICAgKiBUaGUgY3VycmVudGx5IHNlbGVjdGVkIHBhZ2UuXG4gICAqL1xuICByZWFkb25seSBwYWdlID0gbW9kZWw8bnVtYmVyPigxLCB7XG4gICAgYWxpYXM6ICduZ3BQYWdpbmF0aW9uUGFnZScsXG4gIH0pO1xuXG4gIC8qKlxuICAgKiBUaGUgdG90YWwgbnVtYmVyIG9mIHBhZ2VzLlxuICAgKi9cbiAgcmVhZG9ubHkgcGFnZUNvdW50ID0gaW5wdXQ8bnVtYmVyLCBOdW1iZXJJbnB1dD4oMCwge1xuICAgIGFsaWFzOiAnbmdwUGFnaW5hdGlvblBhZ2VDb3VudCcsXG4gICAgdHJhbnNmb3JtOiBudW1iZXJBdHRyaWJ1dGUsXG4gIH0pO1xuXG4gIC8qKlxuICAgKiBXaGV0aGVyIHRoZSBwYWdpbmF0aW9uIGlzIGRpc2FibGVkLlxuICAgKi9cbiAgcmVhZG9ubHkgZGlzYWJsZWQgPSBpbnB1dDxib29sZWFuLCBCb29sZWFuSW5wdXQ+KGZhbHNlLCB7XG4gICAgYWxpYXM6ICduZ3BQYWdpbmF0aW9uRGlzYWJsZWQnLFxuICAgIHRyYW5zZm9ybTogYm9vbGVhbkF0dHJpYnV0ZSxcbiAgfSk7XG5cbiAgLyoqXG4gICAqIERldGVybWluZSBpZiB3ZSBhcmUgb24gdGhlIGZpcnN0IHBhZ2UuXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgcmVhZG9ubHkgZmlyc3RQYWdlID0gY29tcHV0ZWQoKCkgPT4gdGhpcy5wYWdlKCkgPT09IDEpO1xuXG4gIC8qKlxuICAgKiBEZXRlcm1pbmUgaWYgd2UgYXJlIG9uIHRoZSBsYXN0IHBhZ2UuXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgcmVhZG9ubHkgbGFzdFBhZ2UgPSBjb21wdXRlZCgoKSA9PiB0aGlzLnBhZ2UoKSA9PT0gdGhpcy5wYWdlQ291bnQoKSk7XG59XG4iXX0=