import { booleanAttribute, computed, Directive, HostListener, input } from '@angular/core';
import { NgpButton } from 'ng-primitives/button';
import { NgpDisabledToken } from 'ng-primitives/internal';
import { injectPagination } from '../pagination/pagination.token';
import { NgpPaginationLastToken } from './pagination-last.token';
import * as i0 from "@angular/core";
import * as i1 from "ng-primitives/button";
export class NgpPaginationLast {
    constructor() {
        /**
         * Access the pagination directive.
         */
        this.pagination = injectPagination();
        /**
         * Whether the button is disabled.
         */
        this.buttonDisabled = input(false, {
            alias: 'ngpPaginationLastDisabled',
            transform: booleanAttribute,
        });
        this.disabled = computed(() => this.buttonDisabled() || this.pagination.disabled() || this.pagination.lastPage());
    }
    /**
     * Go to the last page.
     */
    goToLastPage() {
        if (this.disabled()) {
            return;
        }
        this.pagination.page.set(this.pagination.pageCount());
    }
    /**
     * A click event may not be fired if this is on an anchor tag and the href is empty.
     * This is a workaround to ensure the click event is fired.
     */
    onEnter(event) {
        event.preventDefault();
        event.stopPropagation();
        this.goToLastPage();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: NgpPaginationLast, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "17.1.0", version: "18.2.13", type: NgpPaginationLast, isStandalone: true, selector: "[ngpPaginationLast]", inputs: { buttonDisabled: { classPropertyName: "buttonDisabled", publicName: "ngpPaginationLastDisabled", isSignal: true, isRequired: false, transformFunction: null } }, host: { listeners: { "click": "goToLastPage()", "keydown.enter": "onEnter($event)", "keydown.space": "onEnter($event)" }, properties: { "tabindex": "disabled() ? -1 : 0", "attr.data-disabled": "disabled() ? \"\" : null", "attr.data-last-page": "pagination.lastPage() ? \"\" : null" } }, providers: [
            { provide: NgpPaginationLastToken, useExisting: NgpPaginationLast },
            { provide: NgpDisabledToken, useExisting: NgpPaginationLast },
        ], exportAs: ["ngpPaginationLast"], hostDirectives: [{ directive: i1.NgpButton }], ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: NgpPaginationLast, decorators: [{
            type: Directive,
            args: [{
                    standalone: true,
                    selector: '[ngpPaginationLast]',
                    exportAs: 'ngpPaginationLast',
                    providers: [
                        { provide: NgpPaginationLastToken, useExisting: NgpPaginationLast },
                        { provide: NgpDisabledToken, useExisting: NgpPaginationLast },
                    ],
                    hostDirectives: [NgpButton],
                    host: {
                        '[tabindex]': 'disabled() ? -1 : 0',
                        '[attr.data-disabled]': 'disabled() ? "" : null',
                        '[attr.data-last-page]': 'pagination.lastPage() ? "" : null',
                    },
                }]
        }], propDecorators: { goToLastPage: [{
                type: HostListener,
                args: ['click']
            }], onEnter: [{
                type: HostListener,
                args: ['keydown.enter', ['$event']]
            }, {
                type: HostListener,
                args: ['keydown.space', ['$event']]
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFnaW5hdGlvbi1sYXN0LmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL25nLXByaW1pdGl2ZXMvcGFnaW5hdGlvbi9zcmMvcGFnaW5hdGlvbi1sYXN0L3BhZ2luYXRpb24tbGFzdC5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBUUEsT0FBTyxFQUFFLGdCQUFnQixFQUFFLFFBQVEsRUFBRSxTQUFTLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzRixPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDakQsT0FBTyxFQUFpQixnQkFBZ0IsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQ3pFLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBQ2xFLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLHlCQUF5QixDQUFDOzs7QUFpQmpFLE1BQU0sT0FBTyxpQkFBaUI7SUFmOUI7UUFnQkU7O1dBRUc7UUFDZ0IsZUFBVSxHQUFHLGdCQUFnQixFQUFFLENBQUM7UUFFbkQ7O1dBRUc7UUFDTSxtQkFBYyxHQUFHLEtBQUssQ0FBd0IsS0FBSyxFQUFFO1lBQzVELEtBQUssRUFBRSwyQkFBMkI7WUFDbEMsU0FBUyxFQUFFLGdCQUFnQjtTQUM1QixDQUFDLENBQUM7UUFFTSxhQUFRLEdBQUcsUUFBUSxDQUMxQixHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsY0FBYyxFQUFFLElBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQyxRQUFRLEVBQUUsSUFBSSxJQUFJLENBQUMsVUFBVSxDQUFDLFFBQVEsRUFBRSxDQUN4RixDQUFDO0tBeUJIO0lBdkJDOztPQUVHO0lBRUgsWUFBWTtRQUNWLElBQUksSUFBSSxDQUFDLFFBQVEsRUFBRSxFQUFFLENBQUM7WUFDcEIsT0FBTztRQUNULENBQUM7UUFFRCxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxDQUFDO0lBQ3hELENBQUM7SUFFRDs7O09BR0c7SUFHTyxPQUFPLENBQUMsS0FBb0I7UUFDcEMsS0FBSyxDQUFDLGNBQWMsRUFBRSxDQUFDO1FBQ3ZCLEtBQUssQ0FBQyxlQUFlLEVBQUUsQ0FBQztRQUN4QixJQUFJLENBQUMsWUFBWSxFQUFFLENBQUM7SUFDdEIsQ0FBQzsrR0F4Q1UsaUJBQWlCO21HQUFqQixpQkFBaUIsMmdCQVhqQjtZQUNULEVBQUUsT0FBTyxFQUFFLHNCQUFzQixFQUFFLFdBQVcsRUFBRSxpQkFBaUIsRUFBRTtZQUNuRSxFQUFFLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxXQUFXLEVBQUUsaUJBQWlCLEVBQUU7U0FDOUQ7OzRGQVFVLGlCQUFpQjtrQkFmN0IsU0FBUzttQkFBQztvQkFDVCxVQUFVLEVBQUUsSUFBSTtvQkFDaEIsUUFBUSxFQUFFLHFCQUFxQjtvQkFDL0IsUUFBUSxFQUFFLG1CQUFtQjtvQkFDN0IsU0FBUyxFQUFFO3dCQUNULEVBQUUsT0FBTyxFQUFFLHNCQUFzQixFQUFFLFdBQVcsbUJBQW1CLEVBQUU7d0JBQ25FLEVBQUUsT0FBTyxFQUFFLGdCQUFnQixFQUFFLFdBQVcsbUJBQW1CLEVBQUU7cUJBQzlEO29CQUNELGNBQWMsRUFBRSxDQUFDLFNBQVMsQ0FBQztvQkFDM0IsSUFBSSxFQUFFO3dCQUNKLFlBQVksRUFBRSxxQkFBcUI7d0JBQ25DLHNCQUFzQixFQUFFLHdCQUF3Qjt3QkFDaEQsdUJBQXVCLEVBQUUsbUNBQW1DO3FCQUM3RDtpQkFDRjs4QkF1QkMsWUFBWTtzQkFEWCxZQUFZO3VCQUFDLE9BQU87Z0JBZVgsT0FBTztzQkFGaEIsWUFBWTt1QkFBQyxlQUFlLEVBQUUsQ0FBQyxRQUFRLENBQUM7O3NCQUN4QyxZQUFZO3VCQUFDLGVBQWUsRUFBRSxDQUFDLFFBQVEsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IMKpIDIwMjQgQW5ndWxhciBQcmltaXRpdmVzLlxuICogaHR0cHM6Ly9naXRodWIuY29tL25nLXByaW1pdGl2ZXMvbmctcHJpbWl0aXZlc1xuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSAyLjAgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuaW1wb3J0IHsgQm9vbGVhbklucHV0IH0gZnJvbSAnQGFuZ3VsYXIvY2RrL2NvZXJjaW9uJztcbmltcG9ydCB7IGJvb2xlYW5BdHRyaWJ1dGUsIGNvbXB1dGVkLCBEaXJlY3RpdmUsIEhvc3RMaXN0ZW5lciwgaW5wdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE5ncEJ1dHRvbiB9IGZyb20gJ25nLXByaW1pdGl2ZXMvYnV0dG9uJztcbmltcG9ydCB7IE5ncENhbkRpc2FibGUsIE5ncERpc2FibGVkVG9rZW4gfSBmcm9tICduZy1wcmltaXRpdmVzL2ludGVybmFsJztcbmltcG9ydCB7IGluamVjdFBhZ2luYXRpb24gfSBmcm9tICcuLi9wYWdpbmF0aW9uL3BhZ2luYXRpb24udG9rZW4nO1xuaW1wb3J0IHsgTmdwUGFnaW5hdGlvbkxhc3RUb2tlbiB9IGZyb20gJy4vcGFnaW5hdGlvbi1sYXN0LnRva2VuJztcblxuQERpcmVjdGl2ZSh7XG4gIHN0YW5kYWxvbmU6IHRydWUsXG4gIHNlbGVjdG9yOiAnW25ncFBhZ2luYXRpb25MYXN0XScsXG4gIGV4cG9ydEFzOiAnbmdwUGFnaW5hdGlvbkxhc3QnLFxuICBwcm92aWRlcnM6IFtcbiAgICB7IHByb3ZpZGU6IE5ncFBhZ2luYXRpb25MYXN0VG9rZW4sIHVzZUV4aXN0aW5nOiBOZ3BQYWdpbmF0aW9uTGFzdCB9LFxuICAgIHsgcHJvdmlkZTogTmdwRGlzYWJsZWRUb2tlbiwgdXNlRXhpc3Rpbmc6IE5ncFBhZ2luYXRpb25MYXN0IH0sXG4gIF0sXG4gIGhvc3REaXJlY3RpdmVzOiBbTmdwQnV0dG9uXSxcbiAgaG9zdDoge1xuICAgICdbdGFiaW5kZXhdJzogJ2Rpc2FibGVkKCkgPyAtMSA6IDAnLFxuICAgICdbYXR0ci5kYXRhLWRpc2FibGVkXSc6ICdkaXNhYmxlZCgpID8gXCJcIiA6IG51bGwnLFxuICAgICdbYXR0ci5kYXRhLWxhc3QtcGFnZV0nOiAncGFnaW5hdGlvbi5sYXN0UGFnZSgpID8gXCJcIiA6IG51bGwnLFxuICB9LFxufSlcbmV4cG9ydCBjbGFzcyBOZ3BQYWdpbmF0aW9uTGFzdCBpbXBsZW1lbnRzIE5ncENhbkRpc2FibGUge1xuICAvKipcbiAgICogQWNjZXNzIHRoZSBwYWdpbmF0aW9uIGRpcmVjdGl2ZS5cbiAgICovXG4gIHByb3RlY3RlZCByZWFkb25seSBwYWdpbmF0aW9uID0gaW5qZWN0UGFnaW5hdGlvbigpO1xuXG4gIC8qKlxuICAgKiBXaGV0aGVyIHRoZSBidXR0b24gaXMgZGlzYWJsZWQuXG4gICAqL1xuICByZWFkb25seSBidXR0b25EaXNhYmxlZCA9IGlucHV0PGJvb2xlYW4sIEJvb2xlYW5JbnB1dD4oZmFsc2UsIHtcbiAgICBhbGlhczogJ25ncFBhZ2luYXRpb25MYXN0RGlzYWJsZWQnLFxuICAgIHRyYW5zZm9ybTogYm9vbGVhbkF0dHJpYnV0ZSxcbiAgfSk7XG5cbiAgcmVhZG9ubHkgZGlzYWJsZWQgPSBjb21wdXRlZChcbiAgICAoKSA9PiB0aGlzLmJ1dHRvbkRpc2FibGVkKCkgfHwgdGhpcy5wYWdpbmF0aW9uLmRpc2FibGVkKCkgfHwgdGhpcy5wYWdpbmF0aW9uLmxhc3RQYWdlKCksXG4gICk7XG5cbiAgLyoqXG4gICAqIEdvIHRvIHRoZSBsYXN0IHBhZ2UuXG4gICAqL1xuICBASG9zdExpc3RlbmVyKCdjbGljaycpXG4gIGdvVG9MYXN0UGFnZSgpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5kaXNhYmxlZCgpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5wYWdpbmF0aW9uLnBhZ2Uuc2V0KHRoaXMucGFnaW5hdGlvbi5wYWdlQ291bnQoKSk7XG4gIH1cblxuICAvKipcbiAgICogQSBjbGljayBldmVudCBtYXkgbm90IGJlIGZpcmVkIGlmIHRoaXMgaXMgb24gYW4gYW5jaG9yIHRhZyBhbmQgdGhlIGhyZWYgaXMgZW1wdHkuXG4gICAqIFRoaXMgaXMgYSB3b3JrYXJvdW5kIHRvIGVuc3VyZSB0aGUgY2xpY2sgZXZlbnQgaXMgZmlyZWQuXG4gICAqL1xuICBASG9zdExpc3RlbmVyKCdrZXlkb3duLmVudGVyJywgWyckZXZlbnQnXSlcbiAgQEhvc3RMaXN0ZW5lcigna2V5ZG93bi5zcGFjZScsIFsnJGV2ZW50J10pXG4gIHByb3RlY3RlZCBvbkVudGVyKGV2ZW50OiBLZXlib2FyZEV2ZW50KTogdm9pZCB7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICB0aGlzLmdvVG9MYXN0UGFnZSgpO1xuICB9XG59XG4iXX0=