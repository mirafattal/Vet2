import { booleanAttribute, computed, Directive, HostListener, input, numberAttribute, } from '@angular/core';
import { NgpButton } from 'ng-primitives/button';
import { NgpDisabledToken } from 'ng-primitives/internal';
import { injectPagination } from '../pagination/pagination.token';
import { NgpPaginationButtonToken } from './pagination-button.token';
import * as i0 from "@angular/core";
import * as i1 from "ng-primitives/button";
export class NgpPaginationButton {
    constructor() {
        /**
         * Access the pagination directive.
         */
        this.pagination = injectPagination();
        /**
         * Define the page this button represents.
         */
        this.page = input.required({
            alias: 'ngpPaginationButtonPage',
            transform: numberAttribute,
        });
        /**
         * Whether the button is disabled.
         */
        this.buttonDisabled = input(false, {
            alias: 'ngpPaginationButtonDisabled',
            transform: booleanAttribute,
        });
        /**
         * Whether the button is disabled.
         */
        this.disabled = computed(() => this.buttonDisabled() || this.pagination.disabled());
        /**
         * Whether this page is the currently selected page.
         */
        this.selected = computed(() => this.page() === this.pagination.page());
    }
    /**
     * Go to the page this button represents.
     */
    goToPage() {
        if (this.disabled()) {
            return;
        }
        this.pagination.page.set(this.page());
    }
    /**
     * A click event may not be fired if this is on an anchor tag and the href is empty.
     * This is a workaround to ensure the click event is fired.
     */
    onEnter(event) {
        event.preventDefault();
        event.stopPropagation();
        this.goToPage();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: NgpPaginationButton, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "17.1.0", version: "18.2.13", type: NgpPaginationButton, isStandalone: true, selector: "[ngpPaginationButton]", inputs: { page: { classPropertyName: "page", publicName: "ngpPaginationButtonPage", isSignal: true, isRequired: true, transformFunction: null }, buttonDisabled: { classPropertyName: "buttonDisabled", publicName: "ngpPaginationButtonDisabled", isSignal: true, isRequired: false, transformFunction: null } }, host: { listeners: { "click": "goToPage()", "keydown.enter": "onEnter($event)", "keydown.space": "onEnter($event)" }, properties: { "tabindex": "disabled() ? -1 : 0", "attr.data-disabled": "disabled() || pagination.disabled() ? \"\" : null", "attr.data-page": "page()", "attr.data-selected": "selected() ? \"\" : null", "attr.aria-current": "selected()" } }, providers: [
            { provide: NgpPaginationButtonToken, useExisting: NgpPaginationButton },
            { provide: NgpDisabledToken, useExisting: NgpPaginationButton },
        ], exportAs: ["ngpPaginationButton"], hostDirectives: [{ directive: i1.NgpButton }], ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: NgpPaginationButton, decorators: [{
            type: Directive,
            args: [{
                    standalone: true,
                    selector: '[ngpPaginationButton]',
                    exportAs: 'ngpPaginationButton',
                    providers: [
                        { provide: NgpPaginationButtonToken, useExisting: NgpPaginationButton },
                        { provide: NgpDisabledToken, useExisting: NgpPaginationButton },
                    ],
                    hostDirectives: [NgpButton],
                    host: {
                        '[tabindex]': 'disabled() ? -1 : 0',
                        '[attr.data-disabled]': 'disabled() || pagination.disabled() ? "" : null',
                        '[attr.data-page]': 'page()',
                        '[attr.data-selected]': 'selected() ? "" : null',
                        '[attr.aria-current]': 'selected()',
                    },
                }]
        }], propDecorators: { goToPage: [{
                type: HostListener,
                args: ['click']
            }], onEnter: [{
                type: HostListener,
                args: ['keydown.enter', ['$event']]
            }, {
                type: HostListener,
                args: ['keydown.space', ['$event']]
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFnaW5hdGlvbi1idXR0b24uZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvbmctcHJpbWl0aXZlcy9wYWdpbmF0aW9uL3NyYy9wYWdpbmF0aW9uLWJ1dHRvbi9wYWdpbmF0aW9uLWJ1dHRvbi5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBUUEsT0FBTyxFQUNMLGdCQUFnQixFQUNoQixRQUFRLEVBQ1IsU0FBUyxFQUNULFlBQVksRUFDWixLQUFLLEVBQ0wsZUFBZSxHQUNoQixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDakQsT0FBTyxFQUFpQixnQkFBZ0IsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQ3pFLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBQ2xFLE9BQU8sRUFBRSx3QkFBd0IsRUFBRSxNQUFNLDJCQUEyQixDQUFDOzs7QUFtQnJFLE1BQU0sT0FBTyxtQkFBbUI7SUFqQmhDO1FBa0JFOztXQUVHO1FBQ2dCLGVBQVUsR0FBRyxnQkFBZ0IsRUFBRSxDQUFDO1FBRW5EOztXQUVHO1FBQ00sU0FBSSxHQUFHLEtBQUssQ0FBQyxRQUFRLENBQXNCO1lBQ2xELEtBQUssRUFBRSx5QkFBeUI7WUFDaEMsU0FBUyxFQUFFLGVBQWU7U0FDM0IsQ0FBQyxDQUFDO1FBRUg7O1dBRUc7UUFDTSxtQkFBYyxHQUFHLEtBQUssQ0FBd0IsS0FBSyxFQUFFO1lBQzVELEtBQUssRUFBRSw2QkFBNkI7WUFDcEMsU0FBUyxFQUFFLGdCQUFnQjtTQUM1QixDQUFDLENBQUM7UUFFSDs7V0FFRztRQUNNLGFBQVEsR0FBRyxRQUFRLENBQUMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLGNBQWMsRUFBRSxJQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUV4Rjs7V0FFRztRQUNnQixhQUFRLEdBQUcsUUFBUSxDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsS0FBSyxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUM7S0F5QnRGO0lBdkJDOztPQUVHO0lBRUgsUUFBUTtRQUNOLElBQUksSUFBSSxDQUFDLFFBQVEsRUFBRSxFQUFFLENBQUM7WUFDcEIsT0FBTztRQUNULENBQUM7UUFFRCxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUM7SUFDeEMsQ0FBQztJQUVEOzs7T0FHRztJQUdPLE9BQU8sQ0FBQyxLQUFvQjtRQUNwQyxLQUFLLENBQUMsY0FBYyxFQUFFLENBQUM7UUFDdkIsS0FBSyxDQUFDLGVBQWUsRUFBRSxDQUFDO1FBQ3hCLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUNsQixDQUFDOytHQXREVSxtQkFBbUI7bUdBQW5CLG1CQUFtQiw4dEJBYm5CO1lBQ1QsRUFBRSxPQUFPLEVBQUUsd0JBQXdCLEVBQUUsV0FBVyxFQUFFLG1CQUFtQixFQUFFO1lBQ3ZFLEVBQUUsT0FBTyxFQUFFLGdCQUFnQixFQUFFLFdBQVcsRUFBRSxtQkFBbUIsRUFBRTtTQUNoRTs7NEZBVVUsbUJBQW1CO2tCQWpCL0IsU0FBUzttQkFBQztvQkFDVCxVQUFVLEVBQUUsSUFBSTtvQkFDaEIsUUFBUSxFQUFFLHVCQUF1QjtvQkFDakMsUUFBUSxFQUFFLHFCQUFxQjtvQkFDL0IsU0FBUyxFQUFFO3dCQUNULEVBQUUsT0FBTyxFQUFFLHdCQUF3QixFQUFFLFdBQVcscUJBQXFCLEVBQUU7d0JBQ3ZFLEVBQUUsT0FBTyxFQUFFLGdCQUFnQixFQUFFLFdBQVcscUJBQXFCLEVBQUU7cUJBQ2hFO29CQUNELGNBQWMsRUFBRSxDQUFDLFNBQVMsQ0FBQztvQkFDM0IsSUFBSSxFQUFFO3dCQUNKLFlBQVksRUFBRSxxQkFBcUI7d0JBQ25DLHNCQUFzQixFQUFFLGlEQUFpRDt3QkFDekUsa0JBQWtCLEVBQUUsUUFBUTt3QkFDNUIsc0JBQXNCLEVBQUUsd0JBQXdCO3dCQUNoRCxxQkFBcUIsRUFBRSxZQUFZO3FCQUNwQztpQkFDRjs4QkFxQ0MsUUFBUTtzQkFEUCxZQUFZO3VCQUFDLE9BQU87Z0JBZVgsT0FBTztzQkFGaEIsWUFBWTt1QkFBQyxlQUFlLEVBQUUsQ0FBQyxRQUFRLENBQUM7O3NCQUN4QyxZQUFZO3VCQUFDLGVBQWUsRUFBRSxDQUFDLFFBQVEsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IMKpIDIwMjQgQW5ndWxhciBQcmltaXRpdmVzLlxuICogaHR0cHM6Ly9naXRodWIuY29tL25nLXByaW1pdGl2ZXMvbmctcHJpbWl0aXZlc1xuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSAyLjAgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuaW1wb3J0IHsgQm9vbGVhbklucHV0LCBOdW1iZXJJbnB1dCB9IGZyb20gJ0Bhbmd1bGFyL2Nkay9jb2VyY2lvbic7XG5pbXBvcnQge1xuICBib29sZWFuQXR0cmlidXRlLFxuICBjb21wdXRlZCxcbiAgRGlyZWN0aXZlLFxuICBIb3N0TGlzdGVuZXIsXG4gIGlucHV0LFxuICBudW1iZXJBdHRyaWJ1dGUsXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTmdwQnV0dG9uIH0gZnJvbSAnbmctcHJpbWl0aXZlcy9idXR0b24nO1xuaW1wb3J0IHsgTmdwQ2FuRGlzYWJsZSwgTmdwRGlzYWJsZWRUb2tlbiB9IGZyb20gJ25nLXByaW1pdGl2ZXMvaW50ZXJuYWwnO1xuaW1wb3J0IHsgaW5qZWN0UGFnaW5hdGlvbiB9IGZyb20gJy4uL3BhZ2luYXRpb24vcGFnaW5hdGlvbi50b2tlbic7XG5pbXBvcnQgeyBOZ3BQYWdpbmF0aW9uQnV0dG9uVG9rZW4gfSBmcm9tICcuL3BhZ2luYXRpb24tYnV0dG9uLnRva2VuJztcblxuQERpcmVjdGl2ZSh7XG4gIHN0YW5kYWxvbmU6IHRydWUsXG4gIHNlbGVjdG9yOiAnW25ncFBhZ2luYXRpb25CdXR0b25dJyxcbiAgZXhwb3J0QXM6ICduZ3BQYWdpbmF0aW9uQnV0dG9uJyxcbiAgcHJvdmlkZXJzOiBbXG4gICAgeyBwcm92aWRlOiBOZ3BQYWdpbmF0aW9uQnV0dG9uVG9rZW4sIHVzZUV4aXN0aW5nOiBOZ3BQYWdpbmF0aW9uQnV0dG9uIH0sXG4gICAgeyBwcm92aWRlOiBOZ3BEaXNhYmxlZFRva2VuLCB1c2VFeGlzdGluZzogTmdwUGFnaW5hdGlvbkJ1dHRvbiB9LFxuICBdLFxuICBob3N0RGlyZWN0aXZlczogW05ncEJ1dHRvbl0sXG4gIGhvc3Q6IHtcbiAgICAnW3RhYmluZGV4XSc6ICdkaXNhYmxlZCgpID8gLTEgOiAwJyxcbiAgICAnW2F0dHIuZGF0YS1kaXNhYmxlZF0nOiAnZGlzYWJsZWQoKSB8fCBwYWdpbmF0aW9uLmRpc2FibGVkKCkgPyBcIlwiIDogbnVsbCcsXG4gICAgJ1thdHRyLmRhdGEtcGFnZV0nOiAncGFnZSgpJyxcbiAgICAnW2F0dHIuZGF0YS1zZWxlY3RlZF0nOiAnc2VsZWN0ZWQoKSA/IFwiXCIgOiBudWxsJyxcbiAgICAnW2F0dHIuYXJpYS1jdXJyZW50XSc6ICdzZWxlY3RlZCgpJyxcbiAgfSxcbn0pXG5leHBvcnQgY2xhc3MgTmdwUGFnaW5hdGlvbkJ1dHRvbiBpbXBsZW1lbnRzIE5ncENhbkRpc2FibGUge1xuICAvKipcbiAgICogQWNjZXNzIHRoZSBwYWdpbmF0aW9uIGRpcmVjdGl2ZS5cbiAgICovXG4gIHByb3RlY3RlZCByZWFkb25seSBwYWdpbmF0aW9uID0gaW5qZWN0UGFnaW5hdGlvbigpO1xuXG4gIC8qKlxuICAgKiBEZWZpbmUgdGhlIHBhZ2UgdGhpcyBidXR0b24gcmVwcmVzZW50cy5cbiAgICovXG4gIHJlYWRvbmx5IHBhZ2UgPSBpbnB1dC5yZXF1aXJlZDxudW1iZXIsIE51bWJlcklucHV0Pih7XG4gICAgYWxpYXM6ICduZ3BQYWdpbmF0aW9uQnV0dG9uUGFnZScsXG4gICAgdHJhbnNmb3JtOiBudW1iZXJBdHRyaWJ1dGUsXG4gIH0pO1xuXG4gIC8qKlxuICAgKiBXaGV0aGVyIHRoZSBidXR0b24gaXMgZGlzYWJsZWQuXG4gICAqL1xuICByZWFkb25seSBidXR0b25EaXNhYmxlZCA9IGlucHV0PGJvb2xlYW4sIEJvb2xlYW5JbnB1dD4oZmFsc2UsIHtcbiAgICBhbGlhczogJ25ncFBhZ2luYXRpb25CdXR0b25EaXNhYmxlZCcsXG4gICAgdHJhbnNmb3JtOiBib29sZWFuQXR0cmlidXRlLFxuICB9KTtcblxuICAvKipcbiAgICogV2hldGhlciB0aGUgYnV0dG9uIGlzIGRpc2FibGVkLlxuICAgKi9cbiAgcmVhZG9ubHkgZGlzYWJsZWQgPSBjb21wdXRlZCgoKSA9PiB0aGlzLmJ1dHRvbkRpc2FibGVkKCkgfHwgdGhpcy5wYWdpbmF0aW9uLmRpc2FibGVkKCkpO1xuXG4gIC8qKlxuICAgKiBXaGV0aGVyIHRoaXMgcGFnZSBpcyB0aGUgY3VycmVudGx5IHNlbGVjdGVkIHBhZ2UuXG4gICAqL1xuICBwcm90ZWN0ZWQgcmVhZG9ubHkgc2VsZWN0ZWQgPSBjb21wdXRlZCgoKSA9PiB0aGlzLnBhZ2UoKSA9PT0gdGhpcy5wYWdpbmF0aW9uLnBhZ2UoKSk7XG5cbiAgLyoqXG4gICAqIEdvIHRvIHRoZSBwYWdlIHRoaXMgYnV0dG9uIHJlcHJlc2VudHMuXG4gICAqL1xuICBASG9zdExpc3RlbmVyKCdjbGljaycpXG4gIGdvVG9QYWdlKCk6IHZvaWQge1xuICAgIGlmICh0aGlzLmRpc2FibGVkKCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLnBhZ2luYXRpb24ucGFnZS5zZXQodGhpcy5wYWdlKCkpO1xuICB9XG5cbiAgLyoqXG4gICAqIEEgY2xpY2sgZXZlbnQgbWF5IG5vdCBiZSBmaXJlZCBpZiB0aGlzIGlzIG9uIGFuIGFuY2hvciB0YWcgYW5kIHRoZSBocmVmIGlzIGVtcHR5LlxuICAgKiBUaGlzIGlzIGEgd29ya2Fyb3VuZCB0byBlbnN1cmUgdGhlIGNsaWNrIGV2ZW50IGlzIGZpcmVkLlxuICAgKi9cbiAgQEhvc3RMaXN0ZW5lcigna2V5ZG93bi5lbnRlcicsIFsnJGV2ZW50J10pXG4gIEBIb3N0TGlzdGVuZXIoJ2tleWRvd24uc3BhY2UnLCBbJyRldmVudCddKVxuICBwcm90ZWN0ZWQgb25FbnRlcihldmVudDogS2V5Ym9hcmRFdmVudCk6IHZvaWQge1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgdGhpcy5nb1RvUGFnZSgpO1xuICB9XG59XG4iXX0=