import { booleanAttribute, computed, Directive, HostListener, input } from '@angular/core';
import { NgpButton } from 'ng-primitives/button';
import { NgpDisabledToken } from 'ng-primitives/internal';
import { injectPagination } from '../pagination/pagination.token';
import { NgpPaginationFirstToken } from './pagination-first.token';
import * as i0 from "@angular/core";
import * as i1 from "ng-primitives/button";
export class NgpPaginationFirst {
    constructor() {
        /**
         * Access the pagination directive.
         */
        this.pagination = injectPagination();
        /**
         * Whether the button is disabled.
         */
        this.buttonDisabled = input(false, {
            alias: 'ngpPaginationFirstDisabled',
            transform: booleanAttribute,
        });
        this.disabled = computed(() => this.buttonDisabled() || this.pagination.disabled() || this.pagination.firstPage());
    }
    /**
     * Go to the first page.
     */
    goToFirstPage() {
        if (this.disabled()) {
            return;
        }
        this.pagination.page.set(1);
    }
    /**
     * A click event may not be fired if this is on an anchor tag and the href is empty.
     * This is a workaround to ensure the click event is fired.
     */
    onEnter(event) {
        event.preventDefault();
        event.stopPropagation();
        this.goToFirstPage();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: NgpPaginationFirst, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "17.1.0", version: "18.2.13", type: NgpPaginationFirst, isStandalone: true, selector: "[ngpPaginationFirst]", inputs: { buttonDisabled: { classPropertyName: "buttonDisabled", publicName: "ngpPaginationFirstDisabled", isSignal: true, isRequired: false, transformFunction: null } }, host: { listeners: { "click": "goToFirstPage()", "keydown.enter": "onEnter($event)", "keydown.space": "onEnter($event)" }, properties: { "tabindex": "disabled() ? -1 : 0", "attr.data-disabled": "disabled() ? \"\" : null", "attr.data-first-page": "pagination.firstPage() ? \"\" : null" } }, providers: [
            { provide: NgpPaginationFirstToken, useExisting: NgpPaginationFirst },
            { provide: NgpDisabledToken, useExisting: NgpPaginationFirst },
        ], exportAs: ["ngpPaginationFirst"], hostDirectives: [{ directive: i1.NgpButton }], ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: NgpPaginationFirst, decorators: [{
            type: Directive,
            args: [{
                    standalone: true,
                    selector: '[ngpPaginationFirst]',
                    exportAs: 'ngpPaginationFirst',
                    providers: [
                        { provide: NgpPaginationFirstToken, useExisting: NgpPaginationFirst },
                        { provide: NgpDisabledToken, useExisting: NgpPaginationFirst },
                    ],
                    hostDirectives: [NgpButton],
                    host: {
                        '[tabindex]': 'disabled() ? -1 : 0',
                        '[attr.data-disabled]': 'disabled() ? "" : null',
                        '[attr.data-first-page]': 'pagination.firstPage() ? "" : null',
                    },
                }]
        }], propDecorators: { goToFirstPage: [{
                type: HostListener,
                args: ['click']
            }], onEnter: [{
                type: HostListener,
                args: ['keydown.enter', ['$event']]
            }, {
                type: HostListener,
                args: ['keydown.space', ['$event']]
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFnaW5hdGlvbi1maXJzdC5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9uZy1wcmltaXRpdmVzL3BhZ2luYXRpb24vc3JjL3BhZ2luYXRpb24tZmlyc3QvcGFnaW5hdGlvbi1maXJzdC5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBUUEsT0FBTyxFQUFFLGdCQUFnQixFQUFFLFFBQVEsRUFBRSxTQUFTLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzRixPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDakQsT0FBTyxFQUFpQixnQkFBZ0IsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQ3pFLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBQ2xFLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLDBCQUEwQixDQUFDOzs7QUFpQm5FLE1BQU0sT0FBTyxrQkFBa0I7SUFmL0I7UUFnQkU7O1dBRUc7UUFDZ0IsZUFBVSxHQUFHLGdCQUFnQixFQUFFLENBQUM7UUFFbkQ7O1dBRUc7UUFDTSxtQkFBYyxHQUFHLEtBQUssQ0FBd0IsS0FBSyxFQUFFO1lBQzVELEtBQUssRUFBRSw0QkFBNEI7WUFDbkMsU0FBUyxFQUFFLGdCQUFnQjtTQUM1QixDQUFDLENBQUM7UUFFTSxhQUFRLEdBQUcsUUFBUSxDQUMxQixHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsY0FBYyxFQUFFLElBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQyxRQUFRLEVBQUUsSUFBSSxJQUFJLENBQUMsVUFBVSxDQUFDLFNBQVMsRUFBRSxDQUN6RixDQUFDO0tBeUJIO0lBdkJDOztPQUVHO0lBRUgsYUFBYTtRQUNYLElBQUksSUFBSSxDQUFDLFFBQVEsRUFBRSxFQUFFLENBQUM7WUFDcEIsT0FBTztRQUNULENBQUM7UUFFRCxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDOUIsQ0FBQztJQUVEOzs7T0FHRztJQUdPLE9BQU8sQ0FBQyxLQUFvQjtRQUNwQyxLQUFLLENBQUMsY0FBYyxFQUFFLENBQUM7UUFDdkIsS0FBSyxDQUFDLGVBQWUsRUFBRSxDQUFDO1FBQ3hCLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztJQUN2QixDQUFDOytHQXhDVSxrQkFBa0I7bUdBQWxCLGtCQUFrQixnaEJBWGxCO1lBQ1QsRUFBRSxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsV0FBVyxFQUFFLGtCQUFrQixFQUFFO1lBQ3JFLEVBQUUsT0FBTyxFQUFFLGdCQUFnQixFQUFFLFdBQVcsRUFBRSxrQkFBa0IsRUFBRTtTQUMvRDs7NEZBUVUsa0JBQWtCO2tCQWY5QixTQUFTO21CQUFDO29CQUNULFVBQVUsRUFBRSxJQUFJO29CQUNoQixRQUFRLEVBQUUsc0JBQXNCO29CQUNoQyxRQUFRLEVBQUUsb0JBQW9CO29CQUM5QixTQUFTLEVBQUU7d0JBQ1QsRUFBRSxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsV0FBVyxvQkFBb0IsRUFBRTt3QkFDckUsRUFBRSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsV0FBVyxvQkFBb0IsRUFBRTtxQkFDL0Q7b0JBQ0QsY0FBYyxFQUFFLENBQUMsU0FBUyxDQUFDO29CQUMzQixJQUFJLEVBQUU7d0JBQ0osWUFBWSxFQUFFLHFCQUFxQjt3QkFDbkMsc0JBQXNCLEVBQUUsd0JBQXdCO3dCQUNoRCx3QkFBd0IsRUFBRSxvQ0FBb0M7cUJBQy9EO2lCQUNGOzhCQXVCQyxhQUFhO3NCQURaLFlBQVk7dUJBQUMsT0FBTztnQkFlWCxPQUFPO3NCQUZoQixZQUFZO3VCQUFDLGVBQWUsRUFBRSxDQUFDLFFBQVEsQ0FBQzs7c0JBQ3hDLFlBQVk7dUJBQUMsZUFBZSxFQUFFLENBQUMsUUFBUSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgwqkgMjAyNCBBbmd1bGFyIFByaW1pdGl2ZXMuXG4gKiBodHRwczovL2dpdGh1Yi5jb20vbmctcHJpbWl0aXZlcy9uZy1wcmltaXRpdmVzXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIDIuMCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5pbXBvcnQgeyBCb29sZWFuSW5wdXQgfSBmcm9tICdAYW5ndWxhci9jZGsvY29lcmNpb24nO1xuaW1wb3J0IHsgYm9vbGVhbkF0dHJpYnV0ZSwgY29tcHV0ZWQsIERpcmVjdGl2ZSwgSG9zdExpc3RlbmVyLCBpbnB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTmdwQnV0dG9uIH0gZnJvbSAnbmctcHJpbWl0aXZlcy9idXR0b24nO1xuaW1wb3J0IHsgTmdwQ2FuRGlzYWJsZSwgTmdwRGlzYWJsZWRUb2tlbiB9IGZyb20gJ25nLXByaW1pdGl2ZXMvaW50ZXJuYWwnO1xuaW1wb3J0IHsgaW5qZWN0UGFnaW5hdGlvbiB9IGZyb20gJy4uL3BhZ2luYXRpb24vcGFnaW5hdGlvbi50b2tlbic7XG5pbXBvcnQgeyBOZ3BQYWdpbmF0aW9uRmlyc3RUb2tlbiB9IGZyb20gJy4vcGFnaW5hdGlvbi1maXJzdC50b2tlbic7XG5cbkBEaXJlY3RpdmUoe1xuICBzdGFuZGFsb25lOiB0cnVlLFxuICBzZWxlY3RvcjogJ1tuZ3BQYWdpbmF0aW9uRmlyc3RdJyxcbiAgZXhwb3J0QXM6ICduZ3BQYWdpbmF0aW9uRmlyc3QnLFxuICBwcm92aWRlcnM6IFtcbiAgICB7IHByb3ZpZGU6IE5ncFBhZ2luYXRpb25GaXJzdFRva2VuLCB1c2VFeGlzdGluZzogTmdwUGFnaW5hdGlvbkZpcnN0IH0sXG4gICAgeyBwcm92aWRlOiBOZ3BEaXNhYmxlZFRva2VuLCB1c2VFeGlzdGluZzogTmdwUGFnaW5hdGlvbkZpcnN0IH0sXG4gIF0sXG4gIGhvc3REaXJlY3RpdmVzOiBbTmdwQnV0dG9uXSxcbiAgaG9zdDoge1xuICAgICdbdGFiaW5kZXhdJzogJ2Rpc2FibGVkKCkgPyAtMSA6IDAnLFxuICAgICdbYXR0ci5kYXRhLWRpc2FibGVkXSc6ICdkaXNhYmxlZCgpID8gXCJcIiA6IG51bGwnLFxuICAgICdbYXR0ci5kYXRhLWZpcnN0LXBhZ2VdJzogJ3BhZ2luYXRpb24uZmlyc3RQYWdlKCkgPyBcIlwiIDogbnVsbCcsXG4gIH0sXG59KVxuZXhwb3J0IGNsYXNzIE5ncFBhZ2luYXRpb25GaXJzdCBpbXBsZW1lbnRzIE5ncENhbkRpc2FibGUge1xuICAvKipcbiAgICogQWNjZXNzIHRoZSBwYWdpbmF0aW9uIGRpcmVjdGl2ZS5cbiAgICovXG4gIHByb3RlY3RlZCByZWFkb25seSBwYWdpbmF0aW9uID0gaW5qZWN0UGFnaW5hdGlvbigpO1xuXG4gIC8qKlxuICAgKiBXaGV0aGVyIHRoZSBidXR0b24gaXMgZGlzYWJsZWQuXG4gICAqL1xuICByZWFkb25seSBidXR0b25EaXNhYmxlZCA9IGlucHV0PGJvb2xlYW4sIEJvb2xlYW5JbnB1dD4oZmFsc2UsIHtcbiAgICBhbGlhczogJ25ncFBhZ2luYXRpb25GaXJzdERpc2FibGVkJyxcbiAgICB0cmFuc2Zvcm06IGJvb2xlYW5BdHRyaWJ1dGUsXG4gIH0pO1xuXG4gIHJlYWRvbmx5IGRpc2FibGVkID0gY29tcHV0ZWQoXG4gICAgKCkgPT4gdGhpcy5idXR0b25EaXNhYmxlZCgpIHx8IHRoaXMucGFnaW5hdGlvbi5kaXNhYmxlZCgpIHx8IHRoaXMucGFnaW5hdGlvbi5maXJzdFBhZ2UoKSxcbiAgKTtcblxuICAvKipcbiAgICogR28gdG8gdGhlIGZpcnN0IHBhZ2UuXG4gICAqL1xuICBASG9zdExpc3RlbmVyKCdjbGljaycpXG4gIGdvVG9GaXJzdFBhZ2UoKSB7XG4gICAgaWYgKHRoaXMuZGlzYWJsZWQoKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMucGFnaW5hdGlvbi5wYWdlLnNldCgxKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBIGNsaWNrIGV2ZW50IG1heSBub3QgYmUgZmlyZWQgaWYgdGhpcyBpcyBvbiBhbiBhbmNob3IgdGFnIGFuZCB0aGUgaHJlZiBpcyBlbXB0eS5cbiAgICogVGhpcyBpcyBhIHdvcmthcm91bmQgdG8gZW5zdXJlIHRoZSBjbGljayBldmVudCBpcyBmaXJlZC5cbiAgICovXG4gIEBIb3N0TGlzdGVuZXIoJ2tleWRvd24uZW50ZXInLCBbJyRldmVudCddKVxuICBASG9zdExpc3RlbmVyKCdrZXlkb3duLnNwYWNlJywgWyckZXZlbnQnXSlcbiAgcHJvdGVjdGVkIG9uRW50ZXIoZXZlbnQ6IEtleWJvYXJkRXZlbnQpOiB2b2lkIHtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgIHRoaXMuZ29Ub0ZpcnN0UGFnZSgpO1xuICB9XG59XG4iXX0=