import { booleanAttribute, Directive, ElementRef, inject, input } from '@angular/core';
import { NgpDisabledToken, setupButton } from 'ng-primitives/internal';
import { NgpButtonToken } from './button.token';
import * as i0 from "@angular/core";
export class NgpButton {
    constructor() {
        /**
         * Get the native element of the button.
         */
        this.elementRef = inject(ElementRef);
        /**
         * Whether the button is disabled.
         */
        this.disabled = input(false, {
            transform: booleanAttribute,
        });
        /**
         * Detect if this is an HTML button element.
         */
        this.isButton = this.elementRef.nativeElement.tagName.toLowerCase() === 'button';
        // setup the hover, press, and focus-visible listeners
        setupButton({ disabled: this.disabled });
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: NgpButton, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "17.1.0", version: "18.2.13", type: NgpButton, isStandalone: true, selector: "[ngpButton]", inputs: { disabled: { classPropertyName: "disabled", publicName: "disabled", isSignal: true, isRequired: false, transformFunction: null } }, host: { properties: { "attr.data-disabled": "disabled() ? \"\" : null", "attr.disabled": "isButton && disabled() ? true : null" } }, providers: [
            { provide: NgpButtonToken, useExisting: NgpButton },
            { provide: NgpDisabledToken, useExisting: NgpButton },
        ], exportAs: ["ngpButton"], ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: NgpButton, decorators: [{
            type: Directive,
            args: [{
                    standalone: true,
                    selector: '[ngpButton]',
                    exportAs: 'ngpButton',
                    providers: [
                        { provide: NgpButtonToken, useExisting: NgpButton },
                        { provide: NgpDisabledToken, useExisting: NgpButton },
                    ],
                    host: {
                        '[attr.data-disabled]': 'disabled() ? "" : null',
                        '[attr.disabled]': 'isButton && disabled() ? true : null',
                    },
                }]
        }], ctorParameters: () => [] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnV0dG9uLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL25nLXByaW1pdGl2ZXMvYnV0dG9uL3NyYy9idXR0b24vYnV0dG9uLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFRQSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3ZGLE9BQU8sRUFBaUIsZ0JBQWdCLEVBQUUsV0FBVyxFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDdEYsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLGdCQUFnQixDQUFDOztBQWVoRCxNQUFNLE9BQU8sU0FBUztJQWtCcEI7UUFqQkE7O1dBRUc7UUFDYyxlQUFVLEdBQUcsTUFBTSxDQUEwQixVQUFVLENBQUMsQ0FBQztRQUUxRTs7V0FFRztRQUNNLGFBQVEsR0FBRyxLQUFLLENBQXdCLEtBQUssRUFBRTtZQUN0RCxTQUFTLEVBQUUsZ0JBQWdCO1NBQzVCLENBQUMsQ0FBQztRQUVIOztXQUVHO1FBQ2dCLGFBQVEsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsV0FBVyxFQUFFLEtBQUssUUFBUSxDQUFDO1FBRzdGLHNEQUFzRDtRQUN0RCxXQUFXLENBQUMsRUFBRSxRQUFRLEVBQUUsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFDM0MsQ0FBQzsrR0FyQlUsU0FBUzttR0FBVCxTQUFTLDRVQVRUO1lBQ1QsRUFBRSxPQUFPLEVBQUUsY0FBYyxFQUFFLFdBQVcsRUFBRSxTQUFTLEVBQUU7WUFDbkQsRUFBRSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsV0FBVyxFQUFFLFNBQVMsRUFBRTtTQUN0RDs7NEZBTVUsU0FBUztrQkFickIsU0FBUzttQkFBQztvQkFDVCxVQUFVLEVBQUUsSUFBSTtvQkFDaEIsUUFBUSxFQUFFLGFBQWE7b0JBQ3ZCLFFBQVEsRUFBRSxXQUFXO29CQUNyQixTQUFTLEVBQUU7d0JBQ1QsRUFBRSxPQUFPLEVBQUUsY0FBYyxFQUFFLFdBQVcsV0FBVyxFQUFFO3dCQUNuRCxFQUFFLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxXQUFXLFdBQVcsRUFBRTtxQkFDdEQ7b0JBQ0QsSUFBSSxFQUFFO3dCQUNKLHNCQUFzQixFQUFFLHdCQUF3Qjt3QkFDaEQsaUJBQWlCLEVBQUUsc0NBQXNDO3FCQUMxRDtpQkFDRiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IMKpIDIwMjQgQW5ndWxhciBQcmltaXRpdmVzLlxuICogaHR0cHM6Ly9naXRodWIuY29tL25nLXByaW1pdGl2ZXMvbmctcHJpbWl0aXZlc1xuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSAyLjAgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuaW1wb3J0IHsgQm9vbGVhbklucHV0IH0gZnJvbSAnQGFuZ3VsYXIvY2RrL2NvZXJjaW9uJztcbmltcG9ydCB7IGJvb2xlYW5BdHRyaWJ1dGUsIERpcmVjdGl2ZSwgRWxlbWVudFJlZiwgaW5qZWN0LCBpbnB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTmdwQ2FuRGlzYWJsZSwgTmdwRGlzYWJsZWRUb2tlbiwgc2V0dXBCdXR0b24gfSBmcm9tICduZy1wcmltaXRpdmVzL2ludGVybmFsJztcbmltcG9ydCB7IE5ncEJ1dHRvblRva2VuIH0gZnJvbSAnLi9idXR0b24udG9rZW4nO1xuXG5ARGlyZWN0aXZlKHtcbiAgc3RhbmRhbG9uZTogdHJ1ZSxcbiAgc2VsZWN0b3I6ICdbbmdwQnV0dG9uXScsXG4gIGV4cG9ydEFzOiAnbmdwQnV0dG9uJyxcbiAgcHJvdmlkZXJzOiBbXG4gICAgeyBwcm92aWRlOiBOZ3BCdXR0b25Ub2tlbiwgdXNlRXhpc3Rpbmc6IE5ncEJ1dHRvbiB9LFxuICAgIHsgcHJvdmlkZTogTmdwRGlzYWJsZWRUb2tlbiwgdXNlRXhpc3Rpbmc6IE5ncEJ1dHRvbiB9LFxuICBdLFxuICBob3N0OiB7XG4gICAgJ1thdHRyLmRhdGEtZGlzYWJsZWRdJzogJ2Rpc2FibGVkKCkgPyBcIlwiIDogbnVsbCcsXG4gICAgJ1thdHRyLmRpc2FibGVkXSc6ICdpc0J1dHRvbiAmJiBkaXNhYmxlZCgpID8gdHJ1ZSA6IG51bGwnLFxuICB9LFxufSlcbmV4cG9ydCBjbGFzcyBOZ3BCdXR0b24gaW1wbGVtZW50cyBOZ3BDYW5EaXNhYmxlIHtcbiAgLyoqXG4gICAqIEdldCB0aGUgbmF0aXZlIGVsZW1lbnQgb2YgdGhlIGJ1dHRvbi5cbiAgICovXG4gIHByaXZhdGUgcmVhZG9ubHkgZWxlbWVudFJlZiA9IGluamVjdDxFbGVtZW50UmVmPEhUTUxFbGVtZW50Pj4oRWxlbWVudFJlZik7XG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgdGhlIGJ1dHRvbiBpcyBkaXNhYmxlZC5cbiAgICovXG4gIHJlYWRvbmx5IGRpc2FibGVkID0gaW5wdXQ8Ym9vbGVhbiwgQm9vbGVhbklucHV0PihmYWxzZSwge1xuICAgIHRyYW5zZm9ybTogYm9vbGVhbkF0dHJpYnV0ZSxcbiAgfSk7XG5cbiAgLyoqXG4gICAqIERldGVjdCBpZiB0aGlzIGlzIGFuIEhUTUwgYnV0dG9uIGVsZW1lbnQuXG4gICAqL1xuICBwcm90ZWN0ZWQgcmVhZG9ubHkgaXNCdXR0b24gPSB0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudC50YWdOYW1lLnRvTG93ZXJDYXNlKCkgPT09ICdidXR0b24nO1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIC8vIHNldHVwIHRoZSBob3ZlciwgcHJlc3MsIGFuZCBmb2N1cy12aXNpYmxlIGxpc3RlbmVyc1xuICAgIHNldHVwQnV0dG9uKHsgZGlzYWJsZWQ6IHRoaXMuZGlzYWJsZWQgfSk7XG4gIH1cbn1cbiJdfQ==