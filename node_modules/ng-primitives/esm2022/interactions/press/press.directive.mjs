import { Directive, booleanAttribute, input, output } from '@angular/core';
import { injectDisabled, setupPress } from 'ng-primitives/internal';
import { NgpPressToken } from './press.token';
import * as i0 from "@angular/core";
/**
 * This was inpsired by Headless UI's active-press hook:
 * https://github.com/tailwindlabs/headlessui/blob/main/packages/%40headlessui-react/src/hooks/use-active-press.tsx
 */
export class NgpPress {
    constructor() {
        /**
         * Whether listening for press events is disabled.
         */
        this.disabled = input(false, {
            alias: 'ngpPressDisabled',
            transform: booleanAttribute,
        });
        /**
         * Access the disabled state from any parent.
         */
        this.isDisabled = injectDisabled(this.disabled);
        /**
         * Emit when the press begins.
         */
        this.pressStart = output({
            alias: 'ngpPressStart',
        });
        /**
         * Emit when the press ends.
         */
        this.pressEnd = output({
            alias: 'ngpPressEnd',
        });
        /**
         * Emit when the press changes.
         */
        this.pressChange = output({
            alias: 'ngpPress',
        });
        // setup the press listener
        setupPress({
            pressStart: () => {
                this.pressStart.emit();
                this.pressChange.emit(true);
            },
            pressEnd: () => {
                this.pressEnd.emit();
                this.pressChange.emit(false);
            },
            disabled: this.isDisabled,
        });
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: NgpPress, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "17.1.0", version: "18.2.13", type: NgpPress, isStandalone: true, selector: "[ngpPress]", inputs: { disabled: { classPropertyName: "disabled", publicName: "ngpPressDisabled", isSignal: true, isRequired: false, transformFunction: null } }, outputs: { pressStart: "ngpPressStart", pressEnd: "ngpPressEnd", pressChange: "ngpPress" }, providers: [{ provide: NgpPressToken, useExisting: NgpPress }], exportAs: ["ngpPress"], ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: NgpPress, decorators: [{
            type: Directive,
            args: [{
                    standalone: true,
                    selector: '[ngpPress]',
                    exportAs: 'ngpPress',
                    providers: [{ provide: NgpPressToken, useExisting: NgpPress }],
                }]
        }], ctorParameters: () => [] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJlc3MuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvbmctcHJpbWl0aXZlcy9pbnRlcmFjdGlvbnMvc3JjL3ByZXNzL3ByZXNzLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFRQSxPQUFPLEVBQUUsU0FBUyxFQUFFLGdCQUFnQixFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0UsT0FBTyxFQUFFLGNBQWMsRUFBRSxVQUFVLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUNwRSxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sZUFBZSxDQUFDOztBQUU5Qzs7O0dBR0c7QUFRSCxNQUFNLE9BQU8sUUFBUTtJQW1DbkI7UUFsQ0E7O1dBRUc7UUFDTSxhQUFRLEdBQUcsS0FBSyxDQUF3QixLQUFLLEVBQUU7WUFDdEQsS0FBSyxFQUFFLGtCQUFrQjtZQUN6QixTQUFTLEVBQUUsZ0JBQWdCO1NBQzVCLENBQUMsQ0FBQztRQUVIOztXQUVHO1FBQ2MsZUFBVSxHQUFHLGNBQWMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7UUFFNUQ7O1dBRUc7UUFDTSxlQUFVLEdBQUcsTUFBTSxDQUFPO1lBQ2pDLEtBQUssRUFBRSxlQUFlO1NBQ3ZCLENBQUMsQ0FBQztRQUVIOztXQUVHO1FBQ00sYUFBUSxHQUFHLE1BQU0sQ0FBTztZQUMvQixLQUFLLEVBQUUsYUFBYTtTQUNyQixDQUFDLENBQUM7UUFFSDs7V0FFRztRQUNNLGdCQUFXLEdBQUcsTUFBTSxDQUFVO1lBQ3JDLEtBQUssRUFBRSxVQUFVO1NBQ2xCLENBQUMsQ0FBQztRQUdELDJCQUEyQjtRQUMzQixVQUFVLENBQUM7WUFDVCxVQUFVLEVBQUUsR0FBRyxFQUFFO2dCQUNmLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxFQUFFLENBQUM7Z0JBQ3ZCLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQzlCLENBQUM7WUFDRCxRQUFRLEVBQUUsR0FBRyxFQUFFO2dCQUNiLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLENBQUM7Z0JBQ3JCLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQy9CLENBQUM7WUFDRCxRQUFRLEVBQUUsSUFBSSxDQUFDLFVBQVU7U0FDMUIsQ0FBQyxDQUFDO0lBQ0wsQ0FBQzsrR0FoRFUsUUFBUTttR0FBUixRQUFRLDBTQUZSLENBQUMsRUFBRSxPQUFPLEVBQUUsYUFBYSxFQUFFLFdBQVcsRUFBRSxRQUFRLEVBQUUsQ0FBQzs7NEZBRW5ELFFBQVE7a0JBTnBCLFNBQVM7bUJBQUM7b0JBQ1QsVUFBVSxFQUFFLElBQUk7b0JBQ2hCLFFBQVEsRUFBRSxZQUFZO29CQUN0QixRQUFRLEVBQUUsVUFBVTtvQkFDcEIsU0FBUyxFQUFFLENBQUMsRUFBRSxPQUFPLEVBQUUsYUFBYSxFQUFFLFdBQVcsVUFBVSxFQUFFLENBQUM7aUJBQy9EIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgwqkgMjAyNCBBbmd1bGFyIFByaW1pdGl2ZXMuXG4gKiBodHRwczovL2dpdGh1Yi5jb20vbmctcHJpbWl0aXZlcy9uZy1wcmltaXRpdmVzXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIDIuMCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5pbXBvcnQgeyBCb29sZWFuSW5wdXQgfSBmcm9tICdAYW5ndWxhci9jZGsvY29lcmNpb24nO1xuaW1wb3J0IHsgRGlyZWN0aXZlLCBib29sZWFuQXR0cmlidXRlLCBpbnB1dCwgb3V0cHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBpbmplY3REaXNhYmxlZCwgc2V0dXBQcmVzcyB9IGZyb20gJ25nLXByaW1pdGl2ZXMvaW50ZXJuYWwnO1xuaW1wb3J0IHsgTmdwUHJlc3NUb2tlbiB9IGZyb20gJy4vcHJlc3MudG9rZW4nO1xuXG4vKipcbiAqIFRoaXMgd2FzIGlucHNpcmVkIGJ5IEhlYWRsZXNzIFVJJ3MgYWN0aXZlLXByZXNzIGhvb2s6XG4gKiBodHRwczovL2dpdGh1Yi5jb20vdGFpbHdpbmRsYWJzL2hlYWRsZXNzdWkvYmxvYi9tYWluL3BhY2thZ2VzLyU0MGhlYWRsZXNzdWktcmVhY3Qvc3JjL2hvb2tzL3VzZS1hY3RpdmUtcHJlc3MudHN4XG4gKi9cblxuQERpcmVjdGl2ZSh7XG4gIHN0YW5kYWxvbmU6IHRydWUsXG4gIHNlbGVjdG9yOiAnW25ncFByZXNzXScsXG4gIGV4cG9ydEFzOiAnbmdwUHJlc3MnLFxuICBwcm92aWRlcnM6IFt7IHByb3ZpZGU6IE5ncFByZXNzVG9rZW4sIHVzZUV4aXN0aW5nOiBOZ3BQcmVzcyB9XSxcbn0pXG5leHBvcnQgY2xhc3MgTmdwUHJlc3Mge1xuICAvKipcbiAgICogV2hldGhlciBsaXN0ZW5pbmcgZm9yIHByZXNzIGV2ZW50cyBpcyBkaXNhYmxlZC5cbiAgICovXG4gIHJlYWRvbmx5IGRpc2FibGVkID0gaW5wdXQ8Ym9vbGVhbiwgQm9vbGVhbklucHV0PihmYWxzZSwge1xuICAgIGFsaWFzOiAnbmdwUHJlc3NEaXNhYmxlZCcsXG4gICAgdHJhbnNmb3JtOiBib29sZWFuQXR0cmlidXRlLFxuICB9KTtcblxuICAvKipcbiAgICogQWNjZXNzIHRoZSBkaXNhYmxlZCBzdGF0ZSBmcm9tIGFueSBwYXJlbnQuXG4gICAqL1xuICBwcml2YXRlIHJlYWRvbmx5IGlzRGlzYWJsZWQgPSBpbmplY3REaXNhYmxlZCh0aGlzLmRpc2FibGVkKTtcblxuICAvKipcbiAgICogRW1pdCB3aGVuIHRoZSBwcmVzcyBiZWdpbnMuXG4gICAqL1xuICByZWFkb25seSBwcmVzc1N0YXJ0ID0gb3V0cHV0PHZvaWQ+KHtcbiAgICBhbGlhczogJ25ncFByZXNzU3RhcnQnLFxuICB9KTtcblxuICAvKipcbiAgICogRW1pdCB3aGVuIHRoZSBwcmVzcyBlbmRzLlxuICAgKi9cbiAgcmVhZG9ubHkgcHJlc3NFbmQgPSBvdXRwdXQ8dm9pZD4oe1xuICAgIGFsaWFzOiAnbmdwUHJlc3NFbmQnLFxuICB9KTtcblxuICAvKipcbiAgICogRW1pdCB3aGVuIHRoZSBwcmVzcyBjaGFuZ2VzLlxuICAgKi9cbiAgcmVhZG9ubHkgcHJlc3NDaGFuZ2UgPSBvdXRwdXQ8Ym9vbGVhbj4oe1xuICAgIGFsaWFzOiAnbmdwUHJlc3MnLFxuICB9KTtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICAvLyBzZXR1cCB0aGUgcHJlc3MgbGlzdGVuZXJcbiAgICBzZXR1cFByZXNzKHtcbiAgICAgIHByZXNzU3RhcnQ6ICgpID0+IHtcbiAgICAgICAgdGhpcy5wcmVzc1N0YXJ0LmVtaXQoKTtcbiAgICAgICAgdGhpcy5wcmVzc0NoYW5nZS5lbWl0KHRydWUpO1xuICAgICAgfSxcbiAgICAgIHByZXNzRW5kOiAoKSA9PiB7XG4gICAgICAgIHRoaXMucHJlc3NFbmQuZW1pdCgpO1xuICAgICAgICB0aGlzLnByZXNzQ2hhbmdlLmVtaXQoZmFsc2UpO1xuICAgICAgfSxcbiAgICAgIGRpc2FibGVkOiB0aGlzLmlzRGlzYWJsZWQsXG4gICAgfSk7XG4gIH1cbn1cbiJdfQ==