import { booleanAttribute, Directive, HostListener, input, output, signal } from '@angular/core';
import { injectDisabled } from 'ng-primitives/internal';
import { injectDisposables } from 'ng-primitives/utils';
import { NgpMoveToken } from './move.token';
import * as i0 from "@angular/core";
/**
 * Inspired by react-aria useMove hook:
 * https://github.com/adobe/react-spectrum/blob/main/packages/%40react-aria/interactions/src/useMove.ts
 */
export class NgpMove {
    constructor() {
        /**
         * Access the disposable helper.
         */
        this.disposables = injectDisposables();
        /**
         * Whether movement is disabled.
         */
        this.disabled = input(false, {
            alias: 'ngpMoveDisabled',
            transform: booleanAttribute,
        });
        /**
         * Access the disabled state from any parent.
         */
        this.isDisabled = injectDisabled(this.disabled);
        /**
         * Emit when the move event begins.
         */
        this.start = output({
            alias: 'ngpMoveStart',
        });
        /**
         * Emit when the element is moved.
         */
        this.move = output({
            alias: 'ngpMove',
        });
        /**
         * Emit when the move event ends.
         */
        this.end = output({
            alias: 'ngpMoveEnd',
        });
        /**
         * Whether the element is currently being moved.
         */
        this.isMoving = signal(false);
        /**
         * Store the last x position of the element.
         */
        this.x = null;
        /**
         * Store the last y position of the element.
         */
        this.y = null;
        /**
         * Store the id of the last pointer.
         */
        this.pointerId = null;
        /**
         * Store the disposable event listeners.
         */
        this.disposableListeners = [];
    }
    /**
     * Handle a move start.
     */
    onMoveStart(event, pointerType) {
        this.start.emit({
            pointerType,
            shiftKey: event.shiftKey,
            ctrlKey: event.ctrlKey,
            metaKey: event.metaKey,
            altKey: event.altKey,
        });
        this.isMoving.set(true);
    }
    /**
     * Handle a move event.
     */
    onMove(event, pointerType, deltaX, deltaY) {
        if (deltaX === 0 && deltaY === 0) {
            return;
        }
        this.move.emit({
            deltaX,
            deltaY,
            pointerType,
            shiftKey: event.shiftKey,
            ctrlKey: event.ctrlKey,
            metaKey: event.metaKey,
            altKey: event.altKey,
        });
    }
    /**
     * Handle a move end.
     */
    onMoveEnd(event, pointerType) {
        this.end.emit({
            pointerType,
            shiftKey: event.shiftKey,
            ctrlKey: event.ctrlKey,
            metaKey: event.metaKey,
            altKey: event.altKey,
        });
        this.isMoving.set(false);
    }
    /**
     * Handle the pointer down event.
     */
    onPointerDown(event) {
        // ignore right-click or additional pointers
        if (event.button !== 0 || this.pointerId !== null || this.isDisabled()) {
            return;
        }
        // prevent the default behavior
        event.preventDefault();
        event.stopPropagation();
        this.onMoveStart(event, event.pointerType);
        // store the pointer id and initial position
        this.pointerId = event.pointerId;
        this.x = event.pageX;
        this.y = event.pageY;
        // add global event listeners
        const pointerMove = this.disposables.addEventListener(window, 'pointermove', this.onPointerMove.bind(this), false);
        const pointerUp = this.disposables.addEventListener(window, 'pointerup', this.onPointerUp.bind(this), false);
        const pointerCancel = this.disposables.addEventListener(window, 'pointercancel', this.onPointerUp.bind(this), false);
        // store the disposable event listeners
        this.disposableListeners = [pointerMove, pointerUp, pointerCancel];
    }
    /**
     * Handle the pointer up event.
     */
    onPointerUp(event) {
        if (this.pointerId !== event.pointerId) {
            return;
        }
        const pointerType = (event.pointerType ?? 'mouse');
        this.onMoveEnd(event, pointerType);
        this.pointerId = null;
        this.disposableListeners.forEach(dispose => dispose());
    }
    /**
     * Handle the pointer move event.
     */
    onPointerMove(event) {
        if (this.pointerId !== event.pointerId) {
            return;
        }
        // Problems with PointerEvent#movementX/movementY:
        // 1. it is always 0 on macOS Safari.
        // 2. On Chrome Android, it's scaled by devicePixelRatio, but not on Chrome macOS
        this.onMove(event, event.pointerType, event.pageX - (this.x ?? 0), event.pageY - (this.y ?? 0));
        this.x = event.pageX;
        this.y = event.pageY;
    }
    triggerKeyboardMove(event, deltaX, deltaY) {
        if (this.isDisabled()) {
            return;
        }
        this.onMoveStart(event, 'keyboard');
        this.onMove(event, 'keyboard', deltaX, deltaY);
        this.onMoveEnd(event, 'keyboard');
    }
    onArrowUp(event) {
        event.preventDefault();
        event.stopPropagation();
        this.triggerKeyboardMove(event, 0, -1);
    }
    onArrowDown(event) {
        event.preventDefault();
        event.stopPropagation();
        this.triggerKeyboardMove(event, 0, 1);
    }
    onArrowLeft(event) {
        event.preventDefault();
        event.stopPropagation();
        this.triggerKeyboardMove(event, -1, 0);
    }
    onArrowRight(event) {
        event.preventDefault();
        event.stopPropagation();
        this.triggerKeyboardMove(event, 1, 0);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: NgpMove, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "17.1.0", version: "18.2.13", type: NgpMove, isStandalone: true, selector: "[ngpMove]", inputs: { disabled: { classPropertyName: "disabled", publicName: "ngpMoveDisabled", isSignal: true, isRequired: false, transformFunction: null } }, outputs: { start: "ngpMoveStart", move: "ngpMove", end: "ngpMoveEnd" }, host: { listeners: { "pointerdown": "onPointerDown($event)", "keydown.ArrowUp": "onArrowUp($event)", "keydown.ArrowDown": "onArrowDown($event)", "keydown.ArrowLeft": "onArrowLeft($event)", "keydown.ArrowRight": "onArrowRight($event)" }, properties: { "attr.data-move": "isMoving() ? \"\" : null" } }, providers: [{ provide: NgpMoveToken, useExisting: NgpMove }], exportAs: ["ngpMove"], ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: NgpMove, decorators: [{
            type: Directive,
            args: [{
                    standalone: true,
                    selector: '[ngpMove]',
                    exportAs: 'ngpMove',
                    providers: [{ provide: NgpMoveToken, useExisting: NgpMove }],
                    host: {
                        '[attr.data-move]': 'isMoving() ? "" : null',
                    },
                }]
        }], propDecorators: { onPointerDown: [{
                type: HostListener,
                args: ['pointerdown', ['$event']]
            }], onArrowUp: [{
                type: HostListener,
                args: ['keydown.ArrowUp', ['$event']]
            }], onArrowDown: [{
                type: HostListener,
                args: ['keydown.ArrowDown', ['$event']]
            }], onArrowLeft: [{
                type: HostListener,
                args: ['keydown.ArrowLeft', ['$event']]
            }], onArrowRight: [{
                type: HostListener,
                args: ['keydown.ArrowRight', ['$event']]
            }] } });
//# sourceMappingURL=data:application/json;base64,