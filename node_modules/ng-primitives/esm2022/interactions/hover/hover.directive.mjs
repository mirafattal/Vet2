import { Directive, booleanAttribute, input, output } from '@angular/core';
import { injectDisabled, setupHover } from 'ng-primitives/internal';
import { NgpHoverToken } from './hover.token';
import * as i0 from "@angular/core";
/**
 * A directive for normalizing hover events across the different browsers and devices.
 *
 * This is an Angular port of the useHover hook from
 * react-aria: https://github.com/adobe/react-spectrum/blob/main/packages/%40react-aria/interactions/src/useHover.ts
 */
export class NgpHover {
    /**
     * Setup the hover state.
     */
    constructor() {
        /**
         * Whether hoving should be disabled.
         */
        this.disabled = input(false, {
            alias: 'ngpHoverDisabled',
            transform: booleanAttribute,
        });
        /**
         * Access the disabled state from any parent.
         */
        this.isDisabled = injectDisabled(this.disabled);
        /**
         * Emit an event when hovering starts.
         */
        this.hoverStart = output({ alias: 'ngpHoverStart' });
        /**
         * Emit an event when hovering ends.
         */
        this.hoverEnd = output({ alias: 'ngpHoverEnd' });
        /**
         * Emit an event when the hover state changes.
         */
        this.hoverChange = output({ alias: 'ngpHover' });
        // setup the hover listener
        setupHover({
            hoverStart: () => {
                this.hoverStart.emit();
                this.hoverChange.emit(true);
            },
            hoverEnd: () => {
                this.hoverEnd.emit();
                this.hoverChange.emit(false);
            },
            disabled: this.isDisabled,
        });
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: NgpHover, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "17.1.0", version: "18.2.13", type: NgpHover, isStandalone: true, selector: "[ngpHover]", inputs: { disabled: { classPropertyName: "disabled", publicName: "ngpHoverDisabled", isSignal: true, isRequired: false, transformFunction: null } }, outputs: { hoverStart: "ngpHoverStart", hoverEnd: "ngpHoverEnd", hoverChange: "ngpHover" }, providers: [{ provide: NgpHoverToken, useExisting: NgpHover }], exportAs: ["ngpHover"], ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: NgpHover, decorators: [{
            type: Directive,
            args: [{
                    standalone: true,
                    selector: '[ngpHover]',
                    exportAs: 'ngpHover',
                    providers: [{ provide: NgpHoverToken, useExisting: NgpHover }],
                }]
        }], ctorParameters: () => [] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaG92ZXIuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvbmctcHJpbWl0aXZlcy9pbnRlcmFjdGlvbnMvc3JjL2hvdmVyL2hvdmVyLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFRQSxPQUFPLEVBQUUsU0FBUyxFQUFFLGdCQUFnQixFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0UsT0FBTyxFQUFFLGNBQWMsRUFBRSxVQUFVLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUNwRSxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sZUFBZSxDQUFDOztBQUU5Qzs7Ozs7R0FLRztBQU9ILE1BQU0sT0FBTyxRQUFRO0lBNkJuQjs7T0FFRztJQUNIO1FBL0JBOztXQUVHO1FBQ00sYUFBUSxHQUFHLEtBQUssQ0FBd0IsS0FBSyxFQUFFO1lBQ3RELEtBQUssRUFBRSxrQkFBa0I7WUFDekIsU0FBUyxFQUFFLGdCQUFnQjtTQUM1QixDQUFDLENBQUM7UUFFSDs7V0FFRztRQUNjLGVBQVUsR0FBRyxjQUFjLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBRTVEOztXQUVHO1FBQ00sZUFBVSxHQUFHLE1BQU0sQ0FBTyxFQUFFLEtBQUssRUFBRSxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBRS9EOztXQUVHO1FBQ00sYUFBUSxHQUFHLE1BQU0sQ0FBTyxFQUFFLEtBQUssRUFBRSxhQUFhLEVBQUUsQ0FBQyxDQUFDO1FBRTNEOztXQUVHO1FBQ00sZ0JBQVcsR0FBRyxNQUFNLENBQVUsRUFBRSxLQUFLLEVBQUUsVUFBVSxFQUFFLENBQUMsQ0FBQztRQU01RCwyQkFBMkI7UUFDM0IsVUFBVSxDQUFDO1lBQ1QsVUFBVSxFQUFFLEdBQUcsRUFBRTtnQkFDZixJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksRUFBRSxDQUFDO2dCQUN2QixJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUM5QixDQUFDO1lBQ0QsUUFBUSxFQUFFLEdBQUcsRUFBRTtnQkFDYixJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxDQUFDO2dCQUNyQixJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUMvQixDQUFDO1lBQ0QsUUFBUSxFQUFFLElBQUksQ0FBQyxVQUFVO1NBQzFCLENBQUMsQ0FBQztJQUNMLENBQUM7K0dBN0NVLFFBQVE7bUdBQVIsUUFBUSwwU0FGUixDQUFDLEVBQUUsT0FBTyxFQUFFLGFBQWEsRUFBRSxXQUFXLEVBQUUsUUFBUSxFQUFFLENBQUM7OzRGQUVuRCxRQUFRO2tCQU5wQixTQUFTO21CQUFDO29CQUNULFVBQVUsRUFBRSxJQUFJO29CQUNoQixRQUFRLEVBQUUsWUFBWTtvQkFDdEIsUUFBUSxFQUFFLFVBQVU7b0JBQ3BCLFNBQVMsRUFBRSxDQUFDLEVBQUUsT0FBTyxFQUFFLGFBQWEsRUFBRSxXQUFXLFVBQVUsRUFBRSxDQUFDO2lCQUMvRCIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IMKpIDIwMjQgQW5ndWxhciBQcmltaXRpdmVzLlxuICogaHR0cHM6Ly9naXRodWIuY29tL25nLXByaW1pdGl2ZXMvbmctcHJpbWl0aXZlc1xuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSAyLjAgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuaW1wb3J0IHR5cGUgeyBCb29sZWFuSW5wdXQgfSBmcm9tICdAYW5ndWxhci9jZGsvY29lcmNpb24nO1xuaW1wb3J0IHsgRGlyZWN0aXZlLCBib29sZWFuQXR0cmlidXRlLCBpbnB1dCwgb3V0cHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBpbmplY3REaXNhYmxlZCwgc2V0dXBIb3ZlciB9IGZyb20gJ25nLXByaW1pdGl2ZXMvaW50ZXJuYWwnO1xuaW1wb3J0IHsgTmdwSG92ZXJUb2tlbiB9IGZyb20gJy4vaG92ZXIudG9rZW4nO1xuXG4vKipcbiAqIEEgZGlyZWN0aXZlIGZvciBub3JtYWxpemluZyBob3ZlciBldmVudHMgYWNyb3NzIHRoZSBkaWZmZXJlbnQgYnJvd3NlcnMgYW5kIGRldmljZXMuXG4gKlxuICogVGhpcyBpcyBhbiBBbmd1bGFyIHBvcnQgb2YgdGhlIHVzZUhvdmVyIGhvb2sgZnJvbVxuICogcmVhY3QtYXJpYTogaHR0cHM6Ly9naXRodWIuY29tL2Fkb2JlL3JlYWN0LXNwZWN0cnVtL2Jsb2IvbWFpbi9wYWNrYWdlcy8lNDByZWFjdC1hcmlhL2ludGVyYWN0aW9ucy9zcmMvdXNlSG92ZXIudHNcbiAqL1xuQERpcmVjdGl2ZSh7XG4gIHN0YW5kYWxvbmU6IHRydWUsXG4gIHNlbGVjdG9yOiAnW25ncEhvdmVyXScsXG4gIGV4cG9ydEFzOiAnbmdwSG92ZXInLFxuICBwcm92aWRlcnM6IFt7IHByb3ZpZGU6IE5ncEhvdmVyVG9rZW4sIHVzZUV4aXN0aW5nOiBOZ3BIb3ZlciB9XSxcbn0pXG5leHBvcnQgY2xhc3MgTmdwSG92ZXIge1xuICAvKipcbiAgICogV2hldGhlciBob3Zpbmcgc2hvdWxkIGJlIGRpc2FibGVkLlxuICAgKi9cbiAgcmVhZG9ubHkgZGlzYWJsZWQgPSBpbnB1dDxib29sZWFuLCBCb29sZWFuSW5wdXQ+KGZhbHNlLCB7XG4gICAgYWxpYXM6ICduZ3BIb3ZlckRpc2FibGVkJyxcbiAgICB0cmFuc2Zvcm06IGJvb2xlYW5BdHRyaWJ1dGUsXG4gIH0pO1xuXG4gIC8qKlxuICAgKiBBY2Nlc3MgdGhlIGRpc2FibGVkIHN0YXRlIGZyb20gYW55IHBhcmVudC5cbiAgICovXG4gIHByaXZhdGUgcmVhZG9ubHkgaXNEaXNhYmxlZCA9IGluamVjdERpc2FibGVkKHRoaXMuZGlzYWJsZWQpO1xuXG4gIC8qKlxuICAgKiBFbWl0IGFuIGV2ZW50IHdoZW4gaG92ZXJpbmcgc3RhcnRzLlxuICAgKi9cbiAgcmVhZG9ubHkgaG92ZXJTdGFydCA9IG91dHB1dDx2b2lkPih7IGFsaWFzOiAnbmdwSG92ZXJTdGFydCcgfSk7XG5cbiAgLyoqXG4gICAqIEVtaXQgYW4gZXZlbnQgd2hlbiBob3ZlcmluZyBlbmRzLlxuICAgKi9cbiAgcmVhZG9ubHkgaG92ZXJFbmQgPSBvdXRwdXQ8dm9pZD4oeyBhbGlhczogJ25ncEhvdmVyRW5kJyB9KTtcblxuICAvKipcbiAgICogRW1pdCBhbiBldmVudCB3aGVuIHRoZSBob3ZlciBzdGF0ZSBjaGFuZ2VzLlxuICAgKi9cbiAgcmVhZG9ubHkgaG92ZXJDaGFuZ2UgPSBvdXRwdXQ8Ym9vbGVhbj4oeyBhbGlhczogJ25ncEhvdmVyJyB9KTtcblxuICAvKipcbiAgICogU2V0dXAgdGhlIGhvdmVyIHN0YXRlLlxuICAgKi9cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgLy8gc2V0dXAgdGhlIGhvdmVyIGxpc3RlbmVyXG4gICAgc2V0dXBIb3Zlcih7XG4gICAgICBob3ZlclN0YXJ0OiAoKSA9PiB7XG4gICAgICAgIHRoaXMuaG92ZXJTdGFydC5lbWl0KCk7XG4gICAgICAgIHRoaXMuaG92ZXJDaGFuZ2UuZW1pdCh0cnVlKTtcbiAgICAgIH0sXG4gICAgICBob3ZlckVuZDogKCkgPT4ge1xuICAgICAgICB0aGlzLmhvdmVyRW5kLmVtaXQoKTtcbiAgICAgICAgdGhpcy5ob3ZlckNoYW5nZS5lbWl0KGZhbHNlKTtcbiAgICAgIH0sXG4gICAgICBkaXNhYmxlZDogdGhpcy5pc0Rpc2FibGVkLFxuICAgIH0pO1xuICB9XG59XG4iXX0=