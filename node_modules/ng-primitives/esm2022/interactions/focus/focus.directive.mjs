import { Directive, booleanAttribute, input, output } from '@angular/core';
import { injectDisabled, setupFocus } from 'ng-primitives/internal';
import { NgpFocusToken } from './focus.token';
import * as i0 from "@angular/core";
/**
 * This was inspired by the React Aria useFocus hook.
 * https://github.com/adobe/react-spectrum/blob/main/packages/%40react-aria/interactions/src/useFocus.ts#L20
 */
export class NgpFocus {
    constructor() {
        /**
         * Whether listening for focus events is disabled.
         */
        this.disabled = input(false, {
            alias: 'ngpFocusDisabled',
            transform: booleanAttribute,
        });
        /**
         * Access the disabled state from any parent.
         */
        this.isDisabled = injectDisabled(this.disabled);
        /**
         * Emit when the focus state changes.
         */
        this.focus = output({ alias: 'ngpFocus' });
        // setup the focus listener
        setupFocus({
            disabled: this.isDisabled,
            focus: () => this.focus.emit(true),
            blur: () => this.focus.emit(false),
        });
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: NgpFocus, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "17.1.0", version: "18.2.13", type: NgpFocus, isStandalone: true, selector: "[ngpFocus]", inputs: { disabled: { classPropertyName: "disabled", publicName: "ngpFocusDisabled", isSignal: true, isRequired: false, transformFunction: null } }, outputs: { focus: "ngpFocus" }, providers: [{ provide: NgpFocusToken, useExisting: NgpFocus }], exportAs: ["ngpFocus"], ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: NgpFocus, decorators: [{
            type: Directive,
            args: [{
                    standalone: true,
                    selector: '[ngpFocus]',
                    exportAs: 'ngpFocus',
                    providers: [{ provide: NgpFocusToken, useExisting: NgpFocus }],
                }]
        }], ctorParameters: () => [] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9jdXMuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvbmctcHJpbWl0aXZlcy9pbnRlcmFjdGlvbnMvc3JjL2ZvY3VzL2ZvY3VzLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFRQSxPQUFPLEVBQUUsU0FBUyxFQUFFLGdCQUFnQixFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0UsT0FBTyxFQUFFLGNBQWMsRUFBRSxVQUFVLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUNwRSxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sZUFBZSxDQUFDOztBQUU5Qzs7O0dBR0c7QUFPSCxNQUFNLE9BQU8sUUFBUTtJQW1CbkI7UUFsQkE7O1dBRUc7UUFDTSxhQUFRLEdBQUcsS0FBSyxDQUF3QixLQUFLLEVBQUU7WUFDdEQsS0FBSyxFQUFFLGtCQUFrQjtZQUN6QixTQUFTLEVBQUUsZ0JBQWdCO1NBQzVCLENBQUMsQ0FBQztRQUVIOztXQUVHO1FBQ2MsZUFBVSxHQUFHLGNBQWMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7UUFFNUQ7O1dBRUc7UUFDTSxVQUFLLEdBQUcsTUFBTSxDQUFVLEVBQUUsS0FBSyxFQUFFLFVBQVUsRUFBRSxDQUFDLENBQUM7UUFHdEQsMkJBQTJCO1FBQzNCLFVBQVUsQ0FBQztZQUNULFFBQVEsRUFBRSxJQUFJLENBQUMsVUFBVTtZQUN6QixLQUFLLEVBQUUsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDO1lBQ2xDLElBQUksRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUM7U0FDbkMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQzsrR0ExQlUsUUFBUTttR0FBUixRQUFRLDhPQUZSLENBQUMsRUFBRSxPQUFPLEVBQUUsYUFBYSxFQUFFLFdBQVcsRUFBRSxRQUFRLEVBQUUsQ0FBQzs7NEZBRW5ELFFBQVE7a0JBTnBCLFNBQVM7bUJBQUM7b0JBQ1QsVUFBVSxFQUFFLElBQUk7b0JBQ2hCLFFBQVEsRUFBRSxZQUFZO29CQUN0QixRQUFRLEVBQUUsVUFBVTtvQkFDcEIsU0FBUyxFQUFFLENBQUMsRUFBRSxPQUFPLEVBQUUsYUFBYSxFQUFFLFdBQVcsVUFBVSxFQUFFLENBQUM7aUJBQy9EIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgwqkgMjAyNCBBbmd1bGFyIFByaW1pdGl2ZXMuXG4gKiBodHRwczovL2dpdGh1Yi5jb20vbmctcHJpbWl0aXZlcy9uZy1wcmltaXRpdmVzXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIDIuMCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5pbXBvcnQgeyBCb29sZWFuSW5wdXQgfSBmcm9tICdAYW5ndWxhci9jZGsvY29lcmNpb24nO1xuaW1wb3J0IHsgRGlyZWN0aXZlLCBib29sZWFuQXR0cmlidXRlLCBpbnB1dCwgb3V0cHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBpbmplY3REaXNhYmxlZCwgc2V0dXBGb2N1cyB9IGZyb20gJ25nLXByaW1pdGl2ZXMvaW50ZXJuYWwnO1xuaW1wb3J0IHsgTmdwRm9jdXNUb2tlbiB9IGZyb20gJy4vZm9jdXMudG9rZW4nO1xuXG4vKipcbiAqIFRoaXMgd2FzIGluc3BpcmVkIGJ5IHRoZSBSZWFjdCBBcmlhIHVzZUZvY3VzIGhvb2suXG4gKiBodHRwczovL2dpdGh1Yi5jb20vYWRvYmUvcmVhY3Qtc3BlY3RydW0vYmxvYi9tYWluL3BhY2thZ2VzLyU0MHJlYWN0LWFyaWEvaW50ZXJhY3Rpb25zL3NyYy91c2VGb2N1cy50cyNMMjBcbiAqL1xuQERpcmVjdGl2ZSh7XG4gIHN0YW5kYWxvbmU6IHRydWUsXG4gIHNlbGVjdG9yOiAnW25ncEZvY3VzXScsXG4gIGV4cG9ydEFzOiAnbmdwRm9jdXMnLFxuICBwcm92aWRlcnM6IFt7IHByb3ZpZGU6IE5ncEZvY3VzVG9rZW4sIHVzZUV4aXN0aW5nOiBOZ3BGb2N1cyB9XSxcbn0pXG5leHBvcnQgY2xhc3MgTmdwRm9jdXMge1xuICAvKipcbiAgICogV2hldGhlciBsaXN0ZW5pbmcgZm9yIGZvY3VzIGV2ZW50cyBpcyBkaXNhYmxlZC5cbiAgICovXG4gIHJlYWRvbmx5IGRpc2FibGVkID0gaW5wdXQ8Ym9vbGVhbiwgQm9vbGVhbklucHV0PihmYWxzZSwge1xuICAgIGFsaWFzOiAnbmdwRm9jdXNEaXNhYmxlZCcsXG4gICAgdHJhbnNmb3JtOiBib29sZWFuQXR0cmlidXRlLFxuICB9KTtcblxuICAvKipcbiAgICogQWNjZXNzIHRoZSBkaXNhYmxlZCBzdGF0ZSBmcm9tIGFueSBwYXJlbnQuXG4gICAqL1xuICBwcml2YXRlIHJlYWRvbmx5IGlzRGlzYWJsZWQgPSBpbmplY3REaXNhYmxlZCh0aGlzLmRpc2FibGVkKTtcblxuICAvKipcbiAgICogRW1pdCB3aGVuIHRoZSBmb2N1cyBzdGF0ZSBjaGFuZ2VzLlxuICAgKi9cbiAgcmVhZG9ubHkgZm9jdXMgPSBvdXRwdXQ8Ym9vbGVhbj4oeyBhbGlhczogJ25ncEZvY3VzJyB9KTtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICAvLyBzZXR1cCB0aGUgZm9jdXMgbGlzdGVuZXJcbiAgICBzZXR1cEZvY3VzKHtcbiAgICAgIGRpc2FibGVkOiB0aGlzLmlzRGlzYWJsZWQsXG4gICAgICBmb2N1czogKCkgPT4gdGhpcy5mb2N1cy5lbWl0KHRydWUpLFxuICAgICAgYmx1cjogKCkgPT4gdGhpcy5mb2N1cy5lbWl0KGZhbHNlKSxcbiAgICB9KTtcbiAgfVxufVxuIl19