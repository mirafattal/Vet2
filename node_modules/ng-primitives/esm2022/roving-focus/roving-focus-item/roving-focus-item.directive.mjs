/**
 * Copyright © 2024 Angular Primitives.
 * https://github.com/ng-primitives/ng-primitives
 *
 * This source code is licensed under the Apache 2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */
import { FocusMonitor } from '@angular/cdk/a11y';
import { Directive, ElementRef, HostListener, booleanAttribute, computed, inject, input, } from '@angular/core';
import { injectRovingFocusGroup } from '../roving-focus-group/roving-focus-group.token';
import { NgpRovingFocusItemToken } from './roving-focus-item.token';
import * as i0 from "@angular/core";
export class NgpRovingFocusItem {
    constructor() {
        /**
         * Access the group the roving focus item belongs to.
         */
        this.group = injectRovingFocusGroup();
        /**
         * Access the focus monitor service.
         */
        this.focusMonitor = inject(FocusMonitor);
        /**
         * Access the element the roving focus item is attached to.
         */
        this.elementRef = inject(ElementRef);
        /**
         * Define if the item is disabled.
         */
        this.disabled = input(false, {
            alias: 'ngpRovingFocusItemDisabled',
            transform: booleanAttribute,
        });
        /**
         * Derive the tabindex of the roving focus item.
         */
        this.tabindex = computed(() => !this.group.disabled() && this.group.activeItem() === this ? 0 : -1);
    }
    /**
     * Initialize the roving focus item.
     */
    ngOnInit() {
        this.group.register(this);
    }
    /**
     * Clean up the roving focus item.
     */
    ngOnDestroy() {
        this.group.unregister(this);
    }
    /**
     * Forward the keydown event to the roving focus group.
     * @param event The keyboard event
     */
    onKeydown(event) {
        if (this.disabled()) {
            return;
        }
        this.group.onKeydown(event);
    }
    /**
     * Activate the roving focus item on click.
     */
    activate() {
        if (this.disabled()) {
            return;
        }
        this.group.setActiveItem(this, 'mouse');
    }
    /**
     * Focus the roving focus item.
     * @param origin The origin of the focus
     */
    focus(origin) {
        this.focusMonitor.focusVia(this.elementRef, origin);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: NgpRovingFocusItem, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "17.1.0", version: "18.2.13", type: NgpRovingFocusItem, isStandalone: true, selector: "[ngpRovingFocusItem]", inputs: { disabled: { classPropertyName: "disabled", publicName: "ngpRovingFocusItemDisabled", isSignal: true, isRequired: false, transformFunction: null } }, host: { listeners: { "keydown": "onKeydown($event)", "click": "activate()" }, properties: { "attr.tabindex": "tabindex()" } }, providers: [{ provide: NgpRovingFocusItemToken, useExisting: NgpRovingFocusItem }], exportAs: ["ngpRovingFocusItem"], ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: NgpRovingFocusItem, decorators: [{
            type: Directive,
            args: [{
                    standalone: true,
                    selector: '[ngpRovingFocusItem]',
                    exportAs: 'ngpRovingFocusItem',
                    providers: [{ provide: NgpRovingFocusItemToken, useExisting: NgpRovingFocusItem }],
                    host: {
                        '[attr.tabindex]': 'tabindex()',
                    },
                }]
        }], propDecorators: { onKeydown: [{
                type: HostListener,
                args: ['keydown', ['$event']]
            }], activate: [{
                type: HostListener,
                args: ['click']
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm92aW5nLWZvY3VzLWl0ZW0uZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvbmctcHJpbWl0aXZlcy9yb3ZpbmctZm9jdXMvc3JjL3JvdmluZy1mb2N1cy1pdGVtL3JvdmluZy1mb2N1cy1pdGVtLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7O0dBTUc7QUFDSCxPQUFPLEVBQUUsWUFBWSxFQUFlLE1BQU0sbUJBQW1CLENBQUM7QUFFOUQsT0FBTyxFQUNMLFNBQVMsRUFDVCxVQUFVLEVBQ1YsWUFBWSxFQUdaLGdCQUFnQixFQUNoQixRQUFRLEVBQ1IsTUFBTSxFQUNOLEtBQUssR0FDTixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSxnREFBZ0QsQ0FBQztBQUN4RixPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQzs7QUFXcEUsTUFBTSxPQUFPLGtCQUFrQjtJQVQvQjtRQVVFOztXQUVHO1FBQ2MsVUFBSyxHQUFHLHNCQUFzQixFQUFFLENBQUM7UUFFbEQ7O1dBRUc7UUFDYyxpQkFBWSxHQUFHLE1BQU0sQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUVyRDs7V0FFRztRQUNNLGVBQVUsR0FBRyxNQUFNLENBQTBCLFVBQVUsQ0FBQyxDQUFDO1FBRWxFOztXQUVHO1FBQ00sYUFBUSxHQUFHLEtBQUssQ0FBd0IsS0FBSyxFQUFFO1lBQ3RELEtBQUssRUFBRSw0QkFBNEI7WUFDbkMsU0FBUyxFQUFFLGdCQUFnQjtTQUM1QixDQUFDLENBQUM7UUFFSDs7V0FFRztRQUNNLGFBQVEsR0FBRyxRQUFRLENBQUMsR0FBRyxFQUFFLENBQ2hDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLEVBQUUsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLFVBQVUsRUFBRSxLQUFLLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FDcEUsQ0FBQztLQWdESDtJQTlDQzs7T0FFRztJQUNILFFBQVE7UUFDTixJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUM1QixDQUFDO0lBRUQ7O09BRUc7SUFDSCxXQUFXO1FBQ1QsSUFBSSxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDOUIsQ0FBQztJQUVEOzs7T0FHRztJQUVPLFNBQVMsQ0FBQyxLQUFvQjtRQUN0QyxJQUFJLElBQUksQ0FBQyxRQUFRLEVBQUUsRUFBRSxDQUFDO1lBQ3BCLE9BQU87UUFDVCxDQUFDO1FBRUQsSUFBSSxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDOUIsQ0FBQztJQUVEOztPQUVHO0lBRU8sUUFBUTtRQUNoQixJQUFJLElBQUksQ0FBQyxRQUFRLEVBQUUsRUFBRSxDQUFDO1lBQ3BCLE9BQU87UUFDVCxDQUFDO1FBRUQsSUFBSSxDQUFDLEtBQUssQ0FBQyxhQUFhLENBQUMsSUFBSSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQzFDLENBQUM7SUFFRDs7O09BR0c7SUFDSCxLQUFLLENBQUMsTUFBbUI7UUFDdkIsSUFBSSxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRSxNQUFNLENBQUMsQ0FBQztJQUN0RCxDQUFDOytHQTVFVSxrQkFBa0I7bUdBQWxCLGtCQUFrQixpV0FMbEIsQ0FBQyxFQUFFLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxXQUFXLEVBQUUsa0JBQWtCLEVBQUUsQ0FBQzs7NEZBS3ZFLGtCQUFrQjtrQkFUOUIsU0FBUzttQkFBQztvQkFDVCxVQUFVLEVBQUUsSUFBSTtvQkFDaEIsUUFBUSxFQUFFLHNCQUFzQjtvQkFDaEMsUUFBUSxFQUFFLG9CQUFvQjtvQkFDOUIsU0FBUyxFQUFFLENBQUMsRUFBRSxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsV0FBVyxvQkFBb0IsRUFBRSxDQUFDO29CQUNsRixJQUFJLEVBQUU7d0JBQ0osaUJBQWlCLEVBQUUsWUFBWTtxQkFDaEM7aUJBQ0Y7OEJBbURXLFNBQVM7c0JBRGxCLFlBQVk7dUJBQUMsU0FBUyxFQUFFLENBQUMsUUFBUSxDQUFDO2dCQWF6QixRQUFRO3NCQURqQixZQUFZO3VCQUFDLE9BQU8iLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCDCqSAyMDI0IEFuZ3VsYXIgUHJpbWl0aXZlcy5cbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9uZy1wcmltaXRpdmVzL25nLXByaW1pdGl2ZXNcbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgMi4wIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbmltcG9ydCB7IEZvY3VzTW9uaXRvciwgRm9jdXNPcmlnaW4gfSBmcm9tICdAYW5ndWxhci9jZGsvYTExeSc7XG5pbXBvcnQgeyBCb29sZWFuSW5wdXQgfSBmcm9tICdAYW5ndWxhci9jZGsvY29lcmNpb24nO1xuaW1wb3J0IHtcbiAgRGlyZWN0aXZlLFxuICBFbGVtZW50UmVmLFxuICBIb3N0TGlzdGVuZXIsXG4gIE9uRGVzdHJveSxcbiAgT25Jbml0LFxuICBib29sZWFuQXR0cmlidXRlLFxuICBjb21wdXRlZCxcbiAgaW5qZWN0LFxuICBpbnB1dCxcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBpbmplY3RSb3ZpbmdGb2N1c0dyb3VwIH0gZnJvbSAnLi4vcm92aW5nLWZvY3VzLWdyb3VwL3JvdmluZy1mb2N1cy1ncm91cC50b2tlbic7XG5pbXBvcnQgeyBOZ3BSb3ZpbmdGb2N1c0l0ZW1Ub2tlbiB9IGZyb20gJy4vcm92aW5nLWZvY3VzLWl0ZW0udG9rZW4nO1xuXG5ARGlyZWN0aXZlKHtcbiAgc3RhbmRhbG9uZTogdHJ1ZSxcbiAgc2VsZWN0b3I6ICdbbmdwUm92aW5nRm9jdXNJdGVtXScsXG4gIGV4cG9ydEFzOiAnbmdwUm92aW5nRm9jdXNJdGVtJyxcbiAgcHJvdmlkZXJzOiBbeyBwcm92aWRlOiBOZ3BSb3ZpbmdGb2N1c0l0ZW1Ub2tlbiwgdXNlRXhpc3Rpbmc6IE5ncFJvdmluZ0ZvY3VzSXRlbSB9XSxcbiAgaG9zdDoge1xuICAgICdbYXR0ci50YWJpbmRleF0nOiAndGFiaW5kZXgoKScsXG4gIH0sXG59KVxuZXhwb3J0IGNsYXNzIE5ncFJvdmluZ0ZvY3VzSXRlbSBpbXBsZW1lbnRzIE9uSW5pdCwgT25EZXN0cm95IHtcbiAgLyoqXG4gICAqIEFjY2VzcyB0aGUgZ3JvdXAgdGhlIHJvdmluZyBmb2N1cyBpdGVtIGJlbG9uZ3MgdG8uXG4gICAqL1xuICBwcml2YXRlIHJlYWRvbmx5IGdyb3VwID0gaW5qZWN0Um92aW5nRm9jdXNHcm91cCgpO1xuXG4gIC8qKlxuICAgKiBBY2Nlc3MgdGhlIGZvY3VzIG1vbml0b3Igc2VydmljZS5cbiAgICovXG4gIHByaXZhdGUgcmVhZG9ubHkgZm9jdXNNb25pdG9yID0gaW5qZWN0KEZvY3VzTW9uaXRvcik7XG5cbiAgLyoqXG4gICAqIEFjY2VzcyB0aGUgZWxlbWVudCB0aGUgcm92aW5nIGZvY3VzIGl0ZW0gaXMgYXR0YWNoZWQgdG8uXG4gICAqL1xuICByZWFkb25seSBlbGVtZW50UmVmID0gaW5qZWN0PEVsZW1lbnRSZWY8SFRNTEVsZW1lbnQ+PihFbGVtZW50UmVmKTtcblxuICAvKipcbiAgICogRGVmaW5lIGlmIHRoZSBpdGVtIGlzIGRpc2FibGVkLlxuICAgKi9cbiAgcmVhZG9ubHkgZGlzYWJsZWQgPSBpbnB1dDxib29sZWFuLCBCb29sZWFuSW5wdXQ+KGZhbHNlLCB7XG4gICAgYWxpYXM6ICduZ3BSb3ZpbmdGb2N1c0l0ZW1EaXNhYmxlZCcsXG4gICAgdHJhbnNmb3JtOiBib29sZWFuQXR0cmlidXRlLFxuICB9KTtcblxuICAvKipcbiAgICogRGVyaXZlIHRoZSB0YWJpbmRleCBvZiB0aGUgcm92aW5nIGZvY3VzIGl0ZW0uXG4gICAqL1xuICByZWFkb25seSB0YWJpbmRleCA9IGNvbXB1dGVkKCgpID0+XG4gICAgIXRoaXMuZ3JvdXAuZGlzYWJsZWQoKSAmJiB0aGlzLmdyb3VwLmFjdGl2ZUl0ZW0oKSA9PT0gdGhpcyA/IDAgOiAtMSxcbiAgKTtcblxuICAvKipcbiAgICogSW5pdGlhbGl6ZSB0aGUgcm92aW5nIGZvY3VzIGl0ZW0uXG4gICAqL1xuICBuZ09uSW5pdCgpOiB2b2lkIHtcbiAgICB0aGlzLmdyb3VwLnJlZ2lzdGVyKHRoaXMpO1xuICB9XG5cbiAgLyoqXG4gICAqIENsZWFuIHVwIHRoZSByb3ZpbmcgZm9jdXMgaXRlbS5cbiAgICovXG4gIG5nT25EZXN0cm95KCk6IHZvaWQge1xuICAgIHRoaXMuZ3JvdXAudW5yZWdpc3Rlcih0aGlzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBGb3J3YXJkIHRoZSBrZXlkb3duIGV2ZW50IHRvIHRoZSByb3ZpbmcgZm9jdXMgZ3JvdXAuXG4gICAqIEBwYXJhbSBldmVudCBUaGUga2V5Ym9hcmQgZXZlbnRcbiAgICovXG4gIEBIb3N0TGlzdGVuZXIoJ2tleWRvd24nLCBbJyRldmVudCddKVxuICBwcm90ZWN0ZWQgb25LZXlkb3duKGV2ZW50OiBLZXlib2FyZEV2ZW50KTogdm9pZCB7XG4gICAgaWYgKHRoaXMuZGlzYWJsZWQoKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuZ3JvdXAub25LZXlkb3duKGV2ZW50KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBY3RpdmF0ZSB0aGUgcm92aW5nIGZvY3VzIGl0ZW0gb24gY2xpY2suXG4gICAqL1xuICBASG9zdExpc3RlbmVyKCdjbGljaycpXG4gIHByb3RlY3RlZCBhY3RpdmF0ZSgpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5kaXNhYmxlZCgpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5ncm91cC5zZXRBY3RpdmVJdGVtKHRoaXMsICdtb3VzZScpO1xuICB9XG5cbiAgLyoqXG4gICAqIEZvY3VzIHRoZSByb3ZpbmcgZm9jdXMgaXRlbS5cbiAgICogQHBhcmFtIG9yaWdpbiBUaGUgb3JpZ2luIG9mIHRoZSBmb2N1c1xuICAgKi9cbiAgZm9jdXMob3JpZ2luOiBGb2N1c09yaWdpbik6IHZvaWQge1xuICAgIHRoaXMuZm9jdXNNb25pdG9yLmZvY3VzVmlhKHRoaXMuZWxlbWVudFJlZiwgb3JpZ2luKTtcbiAgfVxufVxuIl19