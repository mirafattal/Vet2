import { Directive, ElementRef, HostListener, booleanAttribute, inject, input, model, } from '@angular/core';
import { NgpFormControl } from 'ng-primitives/form-field';
import { NgpFocusVisible, NgpHover, NgpPress } from 'ng-primitives/interactions';
import { NgpDisabledToken } from 'ng-primitives/internal';
import { NgpSwitchToken } from './switch.token';
import * as i0 from "@angular/core";
import * as i1 from "ng-primitives/form-field";
import * as i2 from "ng-primitives/interactions";
export class NgpSwitch {
    constructor() {
        /**
         * Access the element ref.
         */
        this.elementRef = inject(ElementRef);
        /**
         * Determine if the switch is a button
         */
        this.isButton = this.elementRef.nativeElement.tagName === 'BUTTON';
        /**
         * Determine if the switch is checked.
         * @default false
         */
        this.checked = model(false, {
            alias: 'ngpSwitchChecked',
        });
        /**
         * Determine if the switch is disabled.
         * @default false
         */
        this.disabled = input(false, {
            alias: 'ngpSwitchDisabled',
            transform: booleanAttribute,
        });
    }
    /**
     * Toggle the checked state.
     */
    toggle() {
        if (this.disabled()) {
            return;
        }
        this.checked.update(checked => !checked);
    }
    /**
     * Handle the keydown event.
     */
    onKeyDown() {
        // If the switch is not a button then the space key will not toggle the checked state automatically,
        // so we need to do it manually.
        if (!this.isButton) {
            this.toggle();
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: NgpSwitch, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "17.1.0", version: "18.2.13", type: NgpSwitch, isStandalone: true, selector: "[ngpSwitch]", inputs: { checked: { classPropertyName: "checked", publicName: "ngpSwitchChecked", isSignal: true, isRequired: false, transformFunction: null }, disabled: { classPropertyName: "disabled", publicName: "ngpSwitchDisabled", isSignal: true, isRequired: false, transformFunction: null } }, outputs: { checked: "ngpSwitchCheckedChange" }, host: { attributes: { "role": "switch" }, listeners: { "click": "toggle()", "keydown.space": "onKeyDown()" }, properties: { "attr.type": "isButton ? \"button\" : null", "attr.aria-checked": "checked()", "attr.data-checked": "checked() ? \"\" : null", "attr.disabled": "isButton && disabled() ? \"\" : null" } }, providers: [
            { provide: NgpSwitchToken, useExisting: NgpSwitch },
            { provide: NgpDisabledToken, useExisting: NgpSwitch },
        ], exportAs: ["ngpSwitch"], hostDirectives: [{ directive: i1.NgpFormControl }, { directive: i2.NgpHover }, { directive: i2.NgpPress }, { directive: i2.NgpFocusVisible }], ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: NgpSwitch, decorators: [{
            type: Directive,
            args: [{
                    standalone: true,
                    selector: '[ngpSwitch]',
                    exportAs: 'ngpSwitch',
                    providers: [
                        { provide: NgpSwitchToken, useExisting: NgpSwitch },
                        { provide: NgpDisabledToken, useExisting: NgpSwitch },
                    ],
                    hostDirectives: [NgpFormControl, NgpHover, NgpPress, NgpFocusVisible],
                    host: {
                        role: 'switch',
                        '[attr.type]': 'isButton ? "button" : null',
                        '[attr.aria-checked]': 'checked()',
                        '[attr.data-checked]': 'checked() ? "" : null',
                        '[attr.disabled]': 'isButton && disabled() ? "" : null',
                    },
                }]
        }], propDecorators: { toggle: [{
                type: HostListener,
                args: ['click']
            }], onKeyDown: [{
                type: HostListener,
                args: ['keydown.space']
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3dpdGNoLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL25nLXByaW1pdGl2ZXMvc3dpdGNoL3NyYy9zd2l0Y2gvc3dpdGNoLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFRQSxPQUFPLEVBQ0wsU0FBUyxFQUNULFVBQVUsRUFDVixZQUFZLEVBQ1osZ0JBQWdCLEVBQ2hCLE1BQU0sRUFDTixLQUFLLEVBQ0wsS0FBSyxHQUNOLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUMxRCxPQUFPLEVBQUUsZUFBZSxFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUNqRixPQUFPLEVBQWlCLGdCQUFnQixFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDekUsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLGdCQUFnQixDQUFDOzs7O0FBbUJoRCxNQUFNLE9BQU8sU0FBUztJQWpCdEI7UUFrQkU7O1dBRUc7UUFDYyxlQUFVLEdBQUcsTUFBTSxDQUEwQixVQUFVLENBQUMsQ0FBQztRQUUxRTs7V0FFRztRQUNPLGFBQVEsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQyxPQUFPLEtBQUssUUFBUSxDQUFDO1FBRXhFOzs7V0FHRztRQUNNLFlBQU8sR0FBRyxLQUFLLENBQVUsS0FBSyxFQUFFO1lBQ3ZDLEtBQUssRUFBRSxrQkFBa0I7U0FDMUIsQ0FBQyxDQUFDO1FBRUg7OztXQUdHO1FBQ00sYUFBUSxHQUFHLEtBQUssQ0FBd0IsS0FBSyxFQUFFO1lBQ3RELEtBQUssRUFBRSxtQkFBbUI7WUFDMUIsU0FBUyxFQUFFLGdCQUFnQjtTQUM1QixDQUFDLENBQUM7S0F5Qko7SUF2QkM7O09BRUc7SUFFSCxNQUFNO1FBQ0osSUFBSSxJQUFJLENBQUMsUUFBUSxFQUFFLEVBQUUsQ0FBQztZQUNwQixPQUFPO1FBQ1QsQ0FBQztRQUVELElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUMzQyxDQUFDO0lBRUQ7O09BRUc7SUFFTyxTQUFTO1FBQ2pCLG9HQUFvRztRQUNwRyxnQ0FBZ0M7UUFDaEMsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQztZQUNuQixJQUFJLENBQUMsTUFBTSxFQUFFLENBQUM7UUFDaEIsQ0FBQztJQUNILENBQUM7K0dBbERVLFNBQVM7bUdBQVQsU0FBUywrckJBYlQ7WUFDVCxFQUFFLE9BQU8sRUFBRSxjQUFjLEVBQUUsV0FBVyxFQUFFLFNBQVMsRUFBRTtZQUNuRCxFQUFFLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxXQUFXLEVBQUUsU0FBUyxFQUFFO1NBQ3REOzs0RkFVVSxTQUFTO2tCQWpCckIsU0FBUzttQkFBQztvQkFDVCxVQUFVLEVBQUUsSUFBSTtvQkFDaEIsUUFBUSxFQUFFLGFBQWE7b0JBQ3ZCLFFBQVEsRUFBRSxXQUFXO29CQUNyQixTQUFTLEVBQUU7d0JBQ1QsRUFBRSxPQUFPLEVBQUUsY0FBYyxFQUFFLFdBQVcsV0FBVyxFQUFFO3dCQUNuRCxFQUFFLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxXQUFXLFdBQVcsRUFBRTtxQkFDdEQ7b0JBQ0QsY0FBYyxFQUFFLENBQUMsY0FBYyxFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQUUsZUFBZSxDQUFDO29CQUNyRSxJQUFJLEVBQUU7d0JBQ0osSUFBSSxFQUFFLFFBQVE7d0JBQ2QsYUFBYSxFQUFFLDRCQUE0Qjt3QkFDM0MscUJBQXFCLEVBQUUsV0FBVzt3QkFDbEMscUJBQXFCLEVBQUUsdUJBQXVCO3dCQUM5QyxpQkFBaUIsRUFBRSxvQ0FBb0M7cUJBQ3hEO2lCQUNGOzhCQWlDQyxNQUFNO3NCQURMLFlBQVk7dUJBQUMsT0FBTztnQkFhWCxTQUFTO3NCQURsQixZQUFZO3VCQUFDLGVBQWUiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCDCqSAyMDI0IEFuZ3VsYXIgUHJpbWl0aXZlcy5cbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9uZy1wcmltaXRpdmVzL25nLXByaW1pdGl2ZXNcbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgMi4wIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbmltcG9ydCB7IEJvb2xlYW5JbnB1dCB9IGZyb20gJ0Bhbmd1bGFyL2Nkay9jb2VyY2lvbic7XG5pbXBvcnQge1xuICBEaXJlY3RpdmUsXG4gIEVsZW1lbnRSZWYsXG4gIEhvc3RMaXN0ZW5lcixcbiAgYm9vbGVhbkF0dHJpYnV0ZSxcbiAgaW5qZWN0LFxuICBpbnB1dCxcbiAgbW9kZWwsXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTmdwRm9ybUNvbnRyb2wgfSBmcm9tICduZy1wcmltaXRpdmVzL2Zvcm0tZmllbGQnO1xuaW1wb3J0IHsgTmdwRm9jdXNWaXNpYmxlLCBOZ3BIb3ZlciwgTmdwUHJlc3MgfSBmcm9tICduZy1wcmltaXRpdmVzL2ludGVyYWN0aW9ucyc7XG5pbXBvcnQgeyBOZ3BDYW5EaXNhYmxlLCBOZ3BEaXNhYmxlZFRva2VuIH0gZnJvbSAnbmctcHJpbWl0aXZlcy9pbnRlcm5hbCc7XG5pbXBvcnQgeyBOZ3BTd2l0Y2hUb2tlbiB9IGZyb20gJy4vc3dpdGNoLnRva2VuJztcblxuQERpcmVjdGl2ZSh7XG4gIHN0YW5kYWxvbmU6IHRydWUsXG4gIHNlbGVjdG9yOiAnW25ncFN3aXRjaF0nLFxuICBleHBvcnRBczogJ25ncFN3aXRjaCcsXG4gIHByb3ZpZGVyczogW1xuICAgIHsgcHJvdmlkZTogTmdwU3dpdGNoVG9rZW4sIHVzZUV4aXN0aW5nOiBOZ3BTd2l0Y2ggfSxcbiAgICB7IHByb3ZpZGU6IE5ncERpc2FibGVkVG9rZW4sIHVzZUV4aXN0aW5nOiBOZ3BTd2l0Y2ggfSxcbiAgXSxcbiAgaG9zdERpcmVjdGl2ZXM6IFtOZ3BGb3JtQ29udHJvbCwgTmdwSG92ZXIsIE5ncFByZXNzLCBOZ3BGb2N1c1Zpc2libGVdLFxuICBob3N0OiB7XG4gICAgcm9sZTogJ3N3aXRjaCcsXG4gICAgJ1thdHRyLnR5cGVdJzogJ2lzQnV0dG9uID8gXCJidXR0b25cIiA6IG51bGwnLFxuICAgICdbYXR0ci5hcmlhLWNoZWNrZWRdJzogJ2NoZWNrZWQoKScsXG4gICAgJ1thdHRyLmRhdGEtY2hlY2tlZF0nOiAnY2hlY2tlZCgpID8gXCJcIiA6IG51bGwnLFxuICAgICdbYXR0ci5kaXNhYmxlZF0nOiAnaXNCdXR0b24gJiYgZGlzYWJsZWQoKSA/IFwiXCIgOiBudWxsJyxcbiAgfSxcbn0pXG5leHBvcnQgY2xhc3MgTmdwU3dpdGNoIGltcGxlbWVudHMgTmdwQ2FuRGlzYWJsZSB7XG4gIC8qKlxuICAgKiBBY2Nlc3MgdGhlIGVsZW1lbnQgcmVmLlxuICAgKi9cbiAgcHJpdmF0ZSByZWFkb25seSBlbGVtZW50UmVmID0gaW5qZWN0PEVsZW1lbnRSZWY8SFRNTEVsZW1lbnQ+PihFbGVtZW50UmVmKTtcblxuICAvKipcbiAgICogRGV0ZXJtaW5lIGlmIHRoZSBzd2l0Y2ggaXMgYSBidXR0b25cbiAgICovXG4gIHByb3RlY3RlZCBpc0J1dHRvbiA9IHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LnRhZ05hbWUgPT09ICdCVVRUT04nO1xuXG4gIC8qKlxuICAgKiBEZXRlcm1pbmUgaWYgdGhlIHN3aXRjaCBpcyBjaGVja2VkLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgcmVhZG9ubHkgY2hlY2tlZCA9IG1vZGVsPGJvb2xlYW4+KGZhbHNlLCB7XG4gICAgYWxpYXM6ICduZ3BTd2l0Y2hDaGVja2VkJyxcbiAgfSk7XG5cbiAgLyoqXG4gICAqIERldGVybWluZSBpZiB0aGUgc3dpdGNoIGlzIGRpc2FibGVkLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgcmVhZG9ubHkgZGlzYWJsZWQgPSBpbnB1dDxib29sZWFuLCBCb29sZWFuSW5wdXQ+KGZhbHNlLCB7XG4gICAgYWxpYXM6ICduZ3BTd2l0Y2hEaXNhYmxlZCcsXG4gICAgdHJhbnNmb3JtOiBib29sZWFuQXR0cmlidXRlLFxuICB9KTtcblxuICAvKipcbiAgICogVG9nZ2xlIHRoZSBjaGVja2VkIHN0YXRlLlxuICAgKi9cbiAgQEhvc3RMaXN0ZW5lcignY2xpY2snKVxuICB0b2dnbGUoKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuZGlzYWJsZWQoKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuY2hlY2tlZC51cGRhdGUoY2hlY2tlZCA9PiAhY2hlY2tlZCk7XG4gIH1cblxuICAvKipcbiAgICogSGFuZGxlIHRoZSBrZXlkb3duIGV2ZW50LlxuICAgKi9cbiAgQEhvc3RMaXN0ZW5lcigna2V5ZG93bi5zcGFjZScpXG4gIHByb3RlY3RlZCBvbktleURvd24oKTogdm9pZCB7XG4gICAgLy8gSWYgdGhlIHN3aXRjaCBpcyBub3QgYSBidXR0b24gdGhlbiB0aGUgc3BhY2Uga2V5IHdpbGwgbm90IHRvZ2dsZSB0aGUgY2hlY2tlZCBzdGF0ZSBhdXRvbWF0aWNhbGx5LFxuICAgIC8vIHNvIHdlIG5lZWQgdG8gZG8gaXQgbWFudWFsbHkuXG4gICAgaWYgKCF0aGlzLmlzQnV0dG9uKSB7XG4gICAgICB0aGlzLnRvZ2dsZSgpO1xuICAgIH1cbiAgfVxufVxuIl19