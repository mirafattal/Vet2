import { booleanAttribute, Directive, ElementRef, HostListener, inject, input, signal, } from '@angular/core';
import { NgpAutofill } from 'ng-primitives/autofill';
import { NgpFormControl } from 'ng-primitives/form-field';
import { NgpFocus, NgpHover, NgpPress } from 'ng-primitives/interactions';
import { NgpDisabledToken } from 'ng-primitives/internal';
import { NgpInputToken } from './input.token';
import * as i0 from "@angular/core";
import * as i1 from "ng-primitives/form-field";
import * as i2 from "ng-primitives/interactions";
import * as i3 from "ng-primitives/autofill";
export class NgpInput {
    constructor() {
        /**
         * Access the underlying input element.
         * @internal
         */
        this.elementRef = inject(ElementRef);
        /**
         * Whether the element is disabled.
         */
        this.disabled = input(false, {
            transform: booleanAttribute,
        });
        /**
         * Sync the input value.
         * @internal
         */
        this.value = signal(this.elementRef.nativeElement.value);
    }
    /**
     * Set the element input value and dispatch input event.
     * @param value The value to set.
     * @description The HTML input event triggers when a user interacts with an input field and changes its value. However, if the value is changed programmatically, the input event doesn't fire automatically, so we manually dispatch the InputEvent.
     * @internal
     */
    setInputValue(value) {
        this.elementRef.nativeElement.value = value;
        this.elementRef.nativeElement.dispatchEvent(new InputEvent('input'));
    }
    valueDidChange() {
        this.value.set(this.elementRef.nativeElement.value);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: NgpInput, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "17.1.0", version: "18.2.13", type: NgpInput, isStandalone: true, selector: "input[ngpInput]", inputs: { disabled: { classPropertyName: "disabled", publicName: "disabled", isSignal: true, isRequired: false, transformFunction: null } }, host: { listeners: { "input": "valueDidChange()" } }, providers: [
            { provide: NgpInputToken, useExisting: NgpInput },
            { provide: NgpDisabledToken, useExisting: NgpInput },
        ], exportAs: ["ngpInput"], hostDirectives: [{ directive: i1.NgpFormControl }, { directive: i2.NgpHover }, { directive: i2.NgpFocus }, { directive: i2.NgpPress }, { directive: i3.NgpAutofill }], ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: NgpInput, decorators: [{
            type: Directive,
            args: [{
                    standalone: true,
                    selector: 'input[ngpInput]',
                    exportAs: 'ngpInput',
                    providers: [
                        { provide: NgpInputToken, useExisting: NgpInput },
                        { provide: NgpDisabledToken, useExisting: NgpInput },
                    ],
                    hostDirectives: [NgpFormControl, NgpHover, NgpFocus, NgpPress, NgpAutofill],
                }]
        }], propDecorators: { valueDidChange: [{
                type: HostListener,
                args: ['input']
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5wdXQuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvbmctcHJpbWl0aXZlcy9pbnB1dC9zcmMvaW5wdXQvaW5wdXQuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQVFBLE9BQU8sRUFDTCxnQkFBZ0IsRUFDaEIsU0FBUyxFQUNULFVBQVUsRUFDVixZQUFZLEVBQ1osTUFBTSxFQUNOLEtBQUssRUFDTCxNQUFNLEdBQ1AsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQ3JELE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUMxRCxPQUFPLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUMxRSxPQUFPLEVBQWlCLGdCQUFnQixFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDekUsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLGVBQWUsQ0FBQzs7Ozs7QUFZOUMsTUFBTSxPQUFPLFFBQVE7SUFWckI7UUFXRTs7O1dBR0c7UUFDYyxlQUFVLEdBQUcsTUFBTSxDQUErQixVQUFVLENBQUMsQ0FBQztRQUUvRTs7V0FFRztRQUNNLGFBQVEsR0FBRyxLQUFLLENBQXdCLEtBQUssRUFBRTtZQUN0RCxTQUFTLEVBQUUsZ0JBQWdCO1NBQzVCLENBQUMsQ0FBQztRQUVIOzs7V0FHRztRQUNNLFVBQUssR0FBRyxNQUFNLENBQVMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUM7S0FpQnRFO0lBZkM7Ozs7O09BS0c7SUFDSCxhQUFhLENBQUMsS0FBYTtRQUN6QixJQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBQzVDLElBQUksQ0FBQyxVQUFVLENBQUMsYUFBYSxDQUFDLGFBQWEsQ0FBQyxJQUFJLFVBQVUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO0lBQ3ZFLENBQUM7SUFHUyxjQUFjO1FBQ3RCLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3RELENBQUM7K0dBbENVLFFBQVE7bUdBQVIsUUFBUSxpUUFOUjtZQUNULEVBQUUsT0FBTyxFQUFFLGFBQWEsRUFBRSxXQUFXLEVBQUUsUUFBUSxFQUFFO1lBQ2pELEVBQUUsT0FBTyxFQUFFLGdCQUFnQixFQUFFLFdBQVcsRUFBRSxRQUFRLEVBQUU7U0FDckQ7OzRGQUdVLFFBQVE7a0JBVnBCLFNBQVM7bUJBQUM7b0JBQ1QsVUFBVSxFQUFFLElBQUk7b0JBQ2hCLFFBQVEsRUFBRSxpQkFBaUI7b0JBQzNCLFFBQVEsRUFBRSxVQUFVO29CQUNwQixTQUFTLEVBQUU7d0JBQ1QsRUFBRSxPQUFPLEVBQUUsYUFBYSxFQUFFLFdBQVcsVUFBVSxFQUFFO3dCQUNqRCxFQUFFLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxXQUFXLFVBQVUsRUFBRTtxQkFDckQ7b0JBQ0QsY0FBYyxFQUFFLENBQUMsY0FBYyxFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQUUsUUFBUSxFQUFFLFdBQVcsQ0FBQztpQkFDNUU7OEJBaUNXLGNBQWM7c0JBRHZCLFlBQVk7dUJBQUMsT0FBTyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IMKpIDIwMjQgQW5ndWxhciBQcmltaXRpdmVzLlxuICogaHR0cHM6Ly9naXRodWIuY29tL25nLXByaW1pdGl2ZXMvbmctcHJpbWl0aXZlc1xuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSAyLjAgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuaW1wb3J0IHsgQm9vbGVhbklucHV0IH0gZnJvbSAnQGFuZ3VsYXIvY2RrL2NvZXJjaW9uJztcbmltcG9ydCB7XG4gIGJvb2xlYW5BdHRyaWJ1dGUsXG4gIERpcmVjdGl2ZSxcbiAgRWxlbWVudFJlZixcbiAgSG9zdExpc3RlbmVyLFxuICBpbmplY3QsXG4gIGlucHV0LFxuICBzaWduYWwsXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTmdwQXV0b2ZpbGwgfSBmcm9tICduZy1wcmltaXRpdmVzL2F1dG9maWxsJztcbmltcG9ydCB7IE5ncEZvcm1Db250cm9sIH0gZnJvbSAnbmctcHJpbWl0aXZlcy9mb3JtLWZpZWxkJztcbmltcG9ydCB7IE5ncEZvY3VzLCBOZ3BIb3ZlciwgTmdwUHJlc3MgfSBmcm9tICduZy1wcmltaXRpdmVzL2ludGVyYWN0aW9ucyc7XG5pbXBvcnQgeyBOZ3BDYW5EaXNhYmxlLCBOZ3BEaXNhYmxlZFRva2VuIH0gZnJvbSAnbmctcHJpbWl0aXZlcy9pbnRlcm5hbCc7XG5pbXBvcnQgeyBOZ3BJbnB1dFRva2VuIH0gZnJvbSAnLi9pbnB1dC50b2tlbic7XG5cbkBEaXJlY3RpdmUoe1xuICBzdGFuZGFsb25lOiB0cnVlLFxuICBzZWxlY3RvcjogJ2lucHV0W25ncElucHV0XScsXG4gIGV4cG9ydEFzOiAnbmdwSW5wdXQnLFxuICBwcm92aWRlcnM6IFtcbiAgICB7IHByb3ZpZGU6IE5ncElucHV0VG9rZW4sIHVzZUV4aXN0aW5nOiBOZ3BJbnB1dCB9LFxuICAgIHsgcHJvdmlkZTogTmdwRGlzYWJsZWRUb2tlbiwgdXNlRXhpc3Rpbmc6IE5ncElucHV0IH0sXG4gIF0sXG4gIGhvc3REaXJlY3RpdmVzOiBbTmdwRm9ybUNvbnRyb2wsIE5ncEhvdmVyLCBOZ3BGb2N1cywgTmdwUHJlc3MsIE5ncEF1dG9maWxsXSxcbn0pXG5leHBvcnQgY2xhc3MgTmdwSW5wdXQgaW1wbGVtZW50cyBOZ3BDYW5EaXNhYmxlIHtcbiAgLyoqXG4gICAqIEFjY2VzcyB0aGUgdW5kZXJseWluZyBpbnB1dCBlbGVtZW50LlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIHByaXZhdGUgcmVhZG9ubHkgZWxlbWVudFJlZiA9IGluamVjdDxFbGVtZW50UmVmPEhUTUxJbnB1dEVsZW1lbnQ+PihFbGVtZW50UmVmKTtcblxuICAvKipcbiAgICogV2hldGhlciB0aGUgZWxlbWVudCBpcyBkaXNhYmxlZC5cbiAgICovXG4gIHJlYWRvbmx5IGRpc2FibGVkID0gaW5wdXQ8Ym9vbGVhbiwgQm9vbGVhbklucHV0PihmYWxzZSwge1xuICAgIHRyYW5zZm9ybTogYm9vbGVhbkF0dHJpYnV0ZSxcbiAgfSk7XG5cbiAgLyoqXG4gICAqIFN5bmMgdGhlIGlucHV0IHZhbHVlLlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIHJlYWRvbmx5IHZhbHVlID0gc2lnbmFsPHN0cmluZz4odGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQudmFsdWUpO1xuXG4gIC8qKlxuICAgKiBTZXQgdGhlIGVsZW1lbnQgaW5wdXQgdmFsdWUgYW5kIGRpc3BhdGNoIGlucHV0IGV2ZW50LlxuICAgKiBAcGFyYW0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC5cbiAgICogQGRlc2NyaXB0aW9uIFRoZSBIVE1MIGlucHV0IGV2ZW50IHRyaWdnZXJzIHdoZW4gYSB1c2VyIGludGVyYWN0cyB3aXRoIGFuIGlucHV0IGZpZWxkIGFuZCBjaGFuZ2VzIGl0cyB2YWx1ZS4gSG93ZXZlciwgaWYgdGhlIHZhbHVlIGlzIGNoYW5nZWQgcHJvZ3JhbW1hdGljYWxseSwgdGhlIGlucHV0IGV2ZW50IGRvZXNuJ3QgZmlyZSBhdXRvbWF0aWNhbGx5LCBzbyB3ZSBtYW51YWxseSBkaXNwYXRjaCB0aGUgSW5wdXRFdmVudC5cbiAgICogQGludGVybmFsXG4gICAqL1xuICBzZXRJbnB1dFZhbHVlKHZhbHVlOiBzdHJpbmcpIHtcbiAgICB0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudC52YWx1ZSA9IHZhbHVlO1xuICAgIHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LmRpc3BhdGNoRXZlbnQobmV3IElucHV0RXZlbnQoJ2lucHV0JykpO1xuICB9XG5cbiAgQEhvc3RMaXN0ZW5lcignaW5wdXQnKVxuICBwcm90ZWN0ZWQgdmFsdWVEaWRDaGFuZ2UoKTogdm9pZCB7XG4gICAgdGhpcy52YWx1ZS5zZXQodGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQudmFsdWUpO1xuICB9XG59XG4iXX0=