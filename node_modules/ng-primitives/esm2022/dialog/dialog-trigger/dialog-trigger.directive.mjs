/**
 * Copyright © 2024 Angular Primitives.
 * https://github.com/ng-primitives/ng-primitives
 *
 * This source code is licensed under the Apache 2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */
import { FocusMonitor } from '@angular/cdk/a11y';
import { ApplicationRef, Directive, ElementRef, HostListener, inject, input, ViewContainerRef, } from '@angular/core';
import { NgpDialogManager } from '../dialog/dialog.service';
import { NgpDialogTriggerToken } from './dialog-trigger.token';
import * as i0 from "@angular/core";
export class NgpDialogTrigger {
    constructor() {
        /** Access the dialog manager. */
        this.dialogManager = inject(NgpDialogManager);
        /** Access the application ref. */
        this.applicationRef = inject(ApplicationRef);
        /** Access the focus monitor. */
        this.focusMonitor = inject(FocusMonitor);
        /** Access the element ref. */
        this.elementRef = inject(ElementRef);
        /** The template to launch. */
        this.template = input.required({
            alias: 'ngpDialogTrigger',
        });
        /**
         * Store the dialog ref.
         * @internal
         */
        this.dialogRef = null;
    }
    launch() {
        // this is not ideal, but there is a case where a dialog trigger is within an overlay (e.g. menu),
        // which may be removed before the dialog is closed. This is not desired, so we need to access a view container ref
        // that is not within the overlay. To solve this we use the view container ref of the root component.
        // Could this have any unintended side effects? For example, the dialog would not be closed during route changes?
        const viewContainerRef = this.applicationRef.components[0].injector.get(ViewContainerRef);
        this.dialogRef = this.dialogManager.open(this.template(), {
            viewContainerRef,
        });
        this.dialogRef.closed.subscribe(focusOrigin => {
            this.dialogRef = null;
            // Focus the trigger element after the dialog closes.
            this.focusMonitor.focusVia(this.elementRef.nativeElement, focusOrigin);
        });
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: NgpDialogTrigger, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "17.1.0", version: "18.2.13", type: NgpDialogTrigger, isStandalone: true, selector: "[ngpDialogTrigger]", inputs: { template: { classPropertyName: "template", publicName: "ngpDialogTrigger", isSignal: true, isRequired: true, transformFunction: null } }, host: { listeners: { "click": "launch()" } }, providers: [{ provide: NgpDialogTriggerToken, useExisting: NgpDialogTrigger }], exportAs: ["ngpDialogTrigger"], ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: NgpDialogTrigger, decorators: [{
            type: Directive,
            args: [{
                    standalone: true,
                    selector: '[ngpDialogTrigger]',
                    exportAs: 'ngpDialogTrigger',
                    providers: [{ provide: NgpDialogTriggerToken, useExisting: NgpDialogTrigger }],
                }]
        }], propDecorators: { launch: [{
                type: HostListener,
                args: ['click']
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlhbG9nLXRyaWdnZXIuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvbmctcHJpbWl0aXZlcy9kaWFsb2cvc3JjL2RpYWxvZy10cmlnZ2VyL2RpYWxvZy10cmlnZ2VyLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7O0dBTUc7QUFDSCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDakQsT0FBTyxFQUNMLGNBQWMsRUFDZCxTQUFTLEVBQ1QsVUFBVSxFQUNWLFlBQVksRUFDWixNQUFNLEVBQ04sS0FBSyxFQUVMLGdCQUFnQixHQUNqQixNQUFNLGVBQWUsQ0FBQztBQUV2QixPQUFPLEVBQW9CLGdCQUFnQixFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDOUUsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sd0JBQXdCLENBQUM7O0FBUS9ELE1BQU0sT0FBTyxnQkFBZ0I7SUFON0I7UUFPRSxpQ0FBaUM7UUFDaEIsa0JBQWEsR0FBRyxNQUFNLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztRQUUxRCxrQ0FBa0M7UUFDakIsbUJBQWMsR0FBRyxNQUFNLENBQUMsY0FBYyxDQUFDLENBQUM7UUFFekQsZ0NBQWdDO1FBQ2YsaUJBQVksR0FBRyxNQUFNLENBQUMsWUFBWSxDQUFDLENBQUM7UUFFckQsOEJBQThCO1FBQ2IsZUFBVSxHQUFHLE1BQU0sQ0FBMEIsVUFBVSxDQUFDLENBQUM7UUFFMUUsOEJBQThCO1FBQ3JCLGFBQVEsR0FBRyxLQUFLLENBQUMsUUFBUSxDQUFnQztZQUNoRSxLQUFLLEVBQUUsa0JBQWtCO1NBQzFCLENBQUMsQ0FBQztRQUVIOzs7V0FHRztRQUNLLGNBQVMsR0FBd0IsSUFBSSxDQUFDO0tBb0IvQztJQWpCVyxNQUFNO1FBQ2Qsa0dBQWtHO1FBQ2xHLG1IQUFtSDtRQUNuSCxxR0FBcUc7UUFDckcsaUhBQWlIO1FBQ2pILE1BQU0sZ0JBQWdCLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1FBRTFGLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxFQUFFO1lBQ3hELGdCQUFnQjtTQUNqQixDQUFDLENBQUM7UUFFSCxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsV0FBVyxDQUFDLEVBQUU7WUFDNUMsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUM7WUFDdEIscURBQXFEO1lBQ3JELElBQUksQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsYUFBYSxFQUFFLFdBQVcsQ0FBQyxDQUFDO1FBQ3pFLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQzsrR0F6Q1UsZ0JBQWdCO21HQUFoQixnQkFBZ0IsbVFBRmhCLENBQUMsRUFBRSxPQUFPLEVBQUUscUJBQXFCLEVBQUUsV0FBVyxFQUFFLGdCQUFnQixFQUFFLENBQUM7OzRGQUVuRSxnQkFBZ0I7a0JBTjVCLFNBQVM7bUJBQUM7b0JBQ1QsVUFBVSxFQUFFLElBQUk7b0JBQ2hCLFFBQVEsRUFBRSxvQkFBb0I7b0JBQzlCLFFBQVEsRUFBRSxrQkFBa0I7b0JBQzVCLFNBQVMsRUFBRSxDQUFDLEVBQUUsT0FBTyxFQUFFLHFCQUFxQixFQUFFLFdBQVcsa0JBQWtCLEVBQUUsQ0FBQztpQkFDL0U7OEJBMEJXLE1BQU07c0JBRGYsWUFBWTt1QkFBQyxPQUFPIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgwqkgMjAyNCBBbmd1bGFyIFByaW1pdGl2ZXMuXG4gKiBodHRwczovL2dpdGh1Yi5jb20vbmctcHJpbWl0aXZlcy9uZy1wcmltaXRpdmVzXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIDIuMCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5pbXBvcnQgeyBGb2N1c01vbml0b3IgfSBmcm9tICdAYW5ndWxhci9jZGsvYTExeSc7XG5pbXBvcnQge1xuICBBcHBsaWNhdGlvblJlZixcbiAgRGlyZWN0aXZlLFxuICBFbGVtZW50UmVmLFxuICBIb3N0TGlzdGVuZXIsXG4gIGluamVjdCxcbiAgaW5wdXQsXG4gIFRlbXBsYXRlUmVmLFxuICBWaWV3Q29udGFpbmVyUmVmLFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE5ncERpYWxvZ1JlZiB9IGZyb20gJy4uL2RpYWxvZy9kaWFsb2ctcmVmJztcbmltcG9ydCB7IE5ncERpYWxvZ0NvbnRleHQsIE5ncERpYWxvZ01hbmFnZXIgfSBmcm9tICcuLi9kaWFsb2cvZGlhbG9nLnNlcnZpY2UnO1xuaW1wb3J0IHsgTmdwRGlhbG9nVHJpZ2dlclRva2VuIH0gZnJvbSAnLi9kaWFsb2ctdHJpZ2dlci50b2tlbic7XG5cbkBEaXJlY3RpdmUoe1xuICBzdGFuZGFsb25lOiB0cnVlLFxuICBzZWxlY3RvcjogJ1tuZ3BEaWFsb2dUcmlnZ2VyXScsXG4gIGV4cG9ydEFzOiAnbmdwRGlhbG9nVHJpZ2dlcicsXG4gIHByb3ZpZGVyczogW3sgcHJvdmlkZTogTmdwRGlhbG9nVHJpZ2dlclRva2VuLCB1c2VFeGlzdGluZzogTmdwRGlhbG9nVHJpZ2dlciB9XSxcbn0pXG5leHBvcnQgY2xhc3MgTmdwRGlhbG9nVHJpZ2dlciB7XG4gIC8qKiBBY2Nlc3MgdGhlIGRpYWxvZyBtYW5hZ2VyLiAqL1xuICBwcml2YXRlIHJlYWRvbmx5IGRpYWxvZ01hbmFnZXIgPSBpbmplY3QoTmdwRGlhbG9nTWFuYWdlcik7XG5cbiAgLyoqIEFjY2VzcyB0aGUgYXBwbGljYXRpb24gcmVmLiAqL1xuICBwcml2YXRlIHJlYWRvbmx5IGFwcGxpY2F0aW9uUmVmID0gaW5qZWN0KEFwcGxpY2F0aW9uUmVmKTtcblxuICAvKiogQWNjZXNzIHRoZSBmb2N1cyBtb25pdG9yLiAqL1xuICBwcml2YXRlIHJlYWRvbmx5IGZvY3VzTW9uaXRvciA9IGluamVjdChGb2N1c01vbml0b3IpO1xuXG4gIC8qKiBBY2Nlc3MgdGhlIGVsZW1lbnQgcmVmLiAqL1xuICBwcml2YXRlIHJlYWRvbmx5IGVsZW1lbnRSZWYgPSBpbmplY3Q8RWxlbWVudFJlZjxIVE1MRWxlbWVudD4+KEVsZW1lbnRSZWYpO1xuXG4gIC8qKiBUaGUgdGVtcGxhdGUgdG8gbGF1bmNoLiAqL1xuICByZWFkb25seSB0ZW1wbGF0ZSA9IGlucHV0LnJlcXVpcmVkPFRlbXBsYXRlUmVmPE5ncERpYWxvZ0NvbnRleHQ+Pih7XG4gICAgYWxpYXM6ICduZ3BEaWFsb2dUcmlnZ2VyJyxcbiAgfSk7XG5cbiAgLyoqXG4gICAqIFN0b3JlIHRoZSBkaWFsb2cgcmVmLlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIHByaXZhdGUgZGlhbG9nUmVmOiBOZ3BEaWFsb2dSZWYgfCBudWxsID0gbnVsbDtcblxuICBASG9zdExpc3RlbmVyKCdjbGljaycpXG4gIHByb3RlY3RlZCBsYXVuY2goKTogdm9pZCB7XG4gICAgLy8gdGhpcyBpcyBub3QgaWRlYWwsIGJ1dCB0aGVyZSBpcyBhIGNhc2Ugd2hlcmUgYSBkaWFsb2cgdHJpZ2dlciBpcyB3aXRoaW4gYW4gb3ZlcmxheSAoZS5nLiBtZW51KSxcbiAgICAvLyB3aGljaCBtYXkgYmUgcmVtb3ZlZCBiZWZvcmUgdGhlIGRpYWxvZyBpcyBjbG9zZWQuIFRoaXMgaXMgbm90IGRlc2lyZWQsIHNvIHdlIG5lZWQgdG8gYWNjZXNzIGEgdmlldyBjb250YWluZXIgcmVmXG4gICAgLy8gdGhhdCBpcyBub3Qgd2l0aGluIHRoZSBvdmVybGF5LiBUbyBzb2x2ZSB0aGlzIHdlIHVzZSB0aGUgdmlldyBjb250YWluZXIgcmVmIG9mIHRoZSByb290IGNvbXBvbmVudC5cbiAgICAvLyBDb3VsZCB0aGlzIGhhdmUgYW55IHVuaW50ZW5kZWQgc2lkZSBlZmZlY3RzPyBGb3IgZXhhbXBsZSwgdGhlIGRpYWxvZyB3b3VsZCBub3QgYmUgY2xvc2VkIGR1cmluZyByb3V0ZSBjaGFuZ2VzP1xuICAgIGNvbnN0IHZpZXdDb250YWluZXJSZWYgPSB0aGlzLmFwcGxpY2F0aW9uUmVmLmNvbXBvbmVudHNbMF0uaW5qZWN0b3IuZ2V0KFZpZXdDb250YWluZXJSZWYpO1xuXG4gICAgdGhpcy5kaWFsb2dSZWYgPSB0aGlzLmRpYWxvZ01hbmFnZXIub3Blbih0aGlzLnRlbXBsYXRlKCksIHtcbiAgICAgIHZpZXdDb250YWluZXJSZWYsXG4gICAgfSk7XG5cbiAgICB0aGlzLmRpYWxvZ1JlZi5jbG9zZWQuc3Vic2NyaWJlKGZvY3VzT3JpZ2luID0+IHtcbiAgICAgIHRoaXMuZGlhbG9nUmVmID0gbnVsbDtcbiAgICAgIC8vIEZvY3VzIHRoZSB0cmlnZ2VyIGVsZW1lbnQgYWZ0ZXIgdGhlIGRpYWxvZyBjbG9zZXMuXG4gICAgICB0aGlzLmZvY3VzTW9uaXRvci5mb2N1c1ZpYSh0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudCwgZm9jdXNPcmlnaW4pO1xuICAgIH0pO1xuICB9XG59XG4iXX0=