import { booleanAttribute, Directive, HostListener, input, signal } from '@angular/core';
import { NgpFocusTrap } from 'ng-primitives/focus-trap';
import { uniqueId } from 'ng-primitives/utils';
import { injectDialogConfig } from '../config/dialog.config';
import { injectDialogRef } from './dialog-ref';
import { NgpDialogToken } from './dialog.token';
import * as i0 from "@angular/core";
import * as i1 from "ng-primitives/focus-trap";
export class NgpDialog {
    constructor() {
        this.config = injectDialogConfig();
        /** Access the dialog ref */
        this.dialogRef = injectDialogRef();
        /** The id of the dialog */
        this.id = input(uniqueId('ngp-dialog'));
        /** The dialog role. */
        this.role = input(this.config.role, {
            alias: 'ngpDialogRole',
        });
        /** Whether the dialog is a modal. */
        this.modal = input(this.config.modal ?? false, {
            alias: 'ngpDialogModal',
            transform: booleanAttribute,
        });
        /** The labelledby ids */
        this.labelledBy = signal([]);
        /** The describedby ids */
        this.describedBy = signal([]);
    }
    ngOnDestroy() {
        this.close();
    }
    /** Close the dialog. */
    close() {
        this.dialogRef.close();
    }
    /** Stop click events from propagating to the overlay */
    onClick(event) {
        event.stopPropagation();
    }
    /** @internal register a labelledby id */
    setLabelledBy(id) {
        this.labelledBy.update(ids => [...ids, id]);
    }
    /** @internal register a describedby id */
    setDescribedBy(id) {
        this.describedBy.update(ids => [...ids, id]);
    }
    /** @internal remove a labelledby id */
    removeLabelledBy(id) {
        this.labelledBy.update(ids => ids.filter(i => i !== id));
    }
    /** @internal remove a describedby id */
    removeDescribedBy(id) {
        this.describedBy.update(ids => ids.filter(i => i !== id));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: NgpDialog, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "17.1.0", version: "18.2.13", type: NgpDialog, isStandalone: true, selector: "[ngpDialog]", inputs: { id: { classPropertyName: "id", publicName: "id", isSignal: true, isRequired: false, transformFunction: null }, role: { classPropertyName: "role", publicName: "ngpDialogRole", isSignal: true, isRequired: false, transformFunction: null }, modal: { classPropertyName: "modal", publicName: "ngpDialogModal", isSignal: true, isRequired: false, transformFunction: null } }, host: { attributes: { "tabindex": "-1" }, listeners: { "click": "onClick($event)" }, properties: { "id": "id()", "attr.role": "role()", "attr.aria-modal": "modal()", "attr.aria-labelledby": "labelledBy().join(\" \")", "attr.aria-describedby": "describedBy().join(\" \")" } }, providers: [{ provide: NgpDialogToken, useExisting: NgpDialog }], exportAs: ["ngpDialog"], hostDirectives: [{ directive: i1.NgpFocusTrap }], ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: NgpDialog, decorators: [{
            type: Directive,
            args: [{
                    standalone: true,
                    selector: '[ngpDialog]',
                    exportAs: 'ngpDialog',
                    providers: [{ provide: NgpDialogToken, useExisting: NgpDialog }],
                    hostDirectives: [NgpFocusTrap],
                    host: {
                        tabindex: '-1',
                        '[id]': 'id()',
                        '[attr.role]': 'role()',
                        '[attr.aria-modal]': 'modal()',
                        '[attr.aria-labelledby]': 'labelledBy().join(" ")',
                        '[attr.aria-describedby]': 'describedBy().join(" ")',
                    },
                }]
        }], propDecorators: { onClick: [{
                type: HostListener,
                args: ['click', ['$event']]
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlhbG9nLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL25nLXByaW1pdGl2ZXMvZGlhbG9nL3NyYy9kaWFsb2cvZGlhbG9nLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFRQSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsU0FBUyxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQWEsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3BHLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUN4RCxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDL0MsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDN0QsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUMvQyxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7OztBQWlCaEQsTUFBTSxPQUFPLFNBQVM7SUFmdEI7UUFnQm1CLFdBQU0sR0FBRyxrQkFBa0IsRUFBRSxDQUFDO1FBRS9DLDRCQUE0QjtRQUNYLGNBQVMsR0FBRyxlQUFlLEVBQUssQ0FBQztRQUVsRCwyQkFBMkI7UUFDbEIsT0FBRSxHQUFHLEtBQUssQ0FBUyxRQUFRLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQztRQUVwRCx1QkFBdUI7UUFDZCxTQUFJLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFO1lBQ3RDLEtBQUssRUFBRSxlQUFlO1NBQ3ZCLENBQUMsQ0FBQztRQUVILHFDQUFxQztRQUM1QixVQUFLLEdBQUcsS0FBSyxDQUF3QixJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssSUFBSSxLQUFLLEVBQUU7WUFDeEUsS0FBSyxFQUFFLGdCQUFnQjtZQUN2QixTQUFTLEVBQUUsZ0JBQWdCO1NBQzVCLENBQUMsQ0FBQztRQUVILHlCQUF5QjtRQUNOLGVBQVUsR0FBRyxNQUFNLENBQVcsRUFBRSxDQUFDLENBQUM7UUFFckQsMEJBQTBCO1FBQ1AsZ0JBQVcsR0FBRyxNQUFNLENBQVcsRUFBRSxDQUFDLENBQUM7S0FvQ3ZEO0lBbENDLFdBQVc7UUFDVCxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7SUFDZixDQUFDO0lBRUQsd0JBQXdCO0lBQ3hCLEtBQUs7UUFDSCxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssRUFBRSxDQUFDO0lBQ3pCLENBQUM7SUFFRCx3REFBd0Q7SUFFOUMsT0FBTyxDQUFDLEtBQVk7UUFDNUIsS0FBSyxDQUFDLGVBQWUsRUFBRSxDQUFDO0lBQzFCLENBQUM7SUFFRCx5Q0FBeUM7SUFDekMsYUFBYSxDQUFDLEVBQVU7UUFDdEIsSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsR0FBRyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDOUMsQ0FBQztJQUVELDBDQUEwQztJQUMxQyxjQUFjLENBQUMsRUFBVTtRQUN2QixJQUFJLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsR0FBRyxHQUFHLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUMvQyxDQUFDO0lBRUQsdUNBQXVDO0lBQ3ZDLGdCQUFnQixDQUFDLEVBQVU7UUFDekIsSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDM0QsQ0FBQztJQUVELHdDQUF3QztJQUN4QyxpQkFBaUIsQ0FBQyxFQUFVO1FBQzFCLElBQUksQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQzVELENBQUM7K0dBM0RVLFNBQVM7bUdBQVQsU0FBUyx3c0JBWFQsQ0FBQyxFQUFFLE9BQU8sRUFBRSxjQUFjLEVBQUUsV0FBVyxFQUFFLFNBQVMsRUFBRSxDQUFDOzs0RkFXckQsU0FBUztrQkFmckIsU0FBUzttQkFBQztvQkFDVCxVQUFVLEVBQUUsSUFBSTtvQkFDaEIsUUFBUSxFQUFFLGFBQWE7b0JBQ3ZCLFFBQVEsRUFBRSxXQUFXO29CQUNyQixTQUFTLEVBQUUsQ0FBQyxFQUFFLE9BQU8sRUFBRSxjQUFjLEVBQUUsV0FBVyxXQUFXLEVBQUUsQ0FBQztvQkFDaEUsY0FBYyxFQUFFLENBQUMsWUFBWSxDQUFDO29CQUM5QixJQUFJLEVBQUU7d0JBQ0osUUFBUSxFQUFFLElBQUk7d0JBQ2QsTUFBTSxFQUFFLE1BQU07d0JBQ2QsYUFBYSxFQUFFLFFBQVE7d0JBQ3ZCLG1CQUFtQixFQUFFLFNBQVM7d0JBQzlCLHdCQUF3QixFQUFFLHdCQUF3Qjt3QkFDbEQseUJBQXlCLEVBQUUseUJBQXlCO3FCQUNyRDtpQkFDRjs4QkFzQ1csT0FBTztzQkFEaEIsWUFBWTt1QkFBQyxPQUFPLEVBQUUsQ0FBQyxRQUFRLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCDCqSAyMDI0IEFuZ3VsYXIgUHJpbWl0aXZlcy5cbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9uZy1wcmltaXRpdmVzL25nLXByaW1pdGl2ZXNcbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgMi4wIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbmltcG9ydCB7IEJvb2xlYW5JbnB1dCB9IGZyb20gJ0Bhbmd1bGFyL2Nkay9jb2VyY2lvbic7XG5pbXBvcnQgeyBib29sZWFuQXR0cmlidXRlLCBEaXJlY3RpdmUsIEhvc3RMaXN0ZW5lciwgaW5wdXQsIE9uRGVzdHJveSwgc2lnbmFsIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBOZ3BGb2N1c1RyYXAgfSBmcm9tICduZy1wcmltaXRpdmVzL2ZvY3VzLXRyYXAnO1xuaW1wb3J0IHsgdW5pcXVlSWQgfSBmcm9tICduZy1wcmltaXRpdmVzL3V0aWxzJztcbmltcG9ydCB7IGluamVjdERpYWxvZ0NvbmZpZyB9IGZyb20gJy4uL2NvbmZpZy9kaWFsb2cuY29uZmlnJztcbmltcG9ydCB7IGluamVjdERpYWxvZ1JlZiB9IGZyb20gJy4vZGlhbG9nLXJlZic7XG5pbXBvcnQgeyBOZ3BEaWFsb2dUb2tlbiB9IGZyb20gJy4vZGlhbG9nLnRva2VuJztcblxuQERpcmVjdGl2ZSh7XG4gIHN0YW5kYWxvbmU6IHRydWUsXG4gIHNlbGVjdG9yOiAnW25ncERpYWxvZ10nLFxuICBleHBvcnRBczogJ25ncERpYWxvZycsXG4gIHByb3ZpZGVyczogW3sgcHJvdmlkZTogTmdwRGlhbG9nVG9rZW4sIHVzZUV4aXN0aW5nOiBOZ3BEaWFsb2cgfV0sXG4gIGhvc3REaXJlY3RpdmVzOiBbTmdwRm9jdXNUcmFwXSxcbiAgaG9zdDoge1xuICAgIHRhYmluZGV4OiAnLTEnLFxuICAgICdbaWRdJzogJ2lkKCknLFxuICAgICdbYXR0ci5yb2xlXSc6ICdyb2xlKCknLFxuICAgICdbYXR0ci5hcmlhLW1vZGFsXSc6ICdtb2RhbCgpJyxcbiAgICAnW2F0dHIuYXJpYS1sYWJlbGxlZGJ5XSc6ICdsYWJlbGxlZEJ5KCkuam9pbihcIiBcIiknLFxuICAgICdbYXR0ci5hcmlhLWRlc2NyaWJlZGJ5XSc6ICdkZXNjcmliZWRCeSgpLmpvaW4oXCIgXCIpJyxcbiAgfSxcbn0pXG5leHBvcnQgY2xhc3MgTmdwRGlhbG9nPFQgPSB1bmtub3duPiBpbXBsZW1lbnRzIE9uRGVzdHJveSB7XG4gIHByaXZhdGUgcmVhZG9ubHkgY29uZmlnID0gaW5qZWN0RGlhbG9nQ29uZmlnKCk7XG5cbiAgLyoqIEFjY2VzcyB0aGUgZGlhbG9nIHJlZiAqL1xuICBwcml2YXRlIHJlYWRvbmx5IGRpYWxvZ1JlZiA9IGluamVjdERpYWxvZ1JlZjxUPigpO1xuXG4gIC8qKiBUaGUgaWQgb2YgdGhlIGRpYWxvZyAqL1xuICByZWFkb25seSBpZCA9IGlucHV0PHN0cmluZz4odW5pcXVlSWQoJ25ncC1kaWFsb2cnKSk7XG5cbiAgLyoqIFRoZSBkaWFsb2cgcm9sZS4gKi9cbiAgcmVhZG9ubHkgcm9sZSA9IGlucHV0KHRoaXMuY29uZmlnLnJvbGUsIHtcbiAgICBhbGlhczogJ25ncERpYWxvZ1JvbGUnLFxuICB9KTtcblxuICAvKiogV2hldGhlciB0aGUgZGlhbG9nIGlzIGEgbW9kYWwuICovXG4gIHJlYWRvbmx5IG1vZGFsID0gaW5wdXQ8Ym9vbGVhbiwgQm9vbGVhbklucHV0Pih0aGlzLmNvbmZpZy5tb2RhbCA/PyBmYWxzZSwge1xuICAgIGFsaWFzOiAnbmdwRGlhbG9nTW9kYWwnLFxuICAgIHRyYW5zZm9ybTogYm9vbGVhbkF0dHJpYnV0ZSxcbiAgfSk7XG5cbiAgLyoqIFRoZSBsYWJlbGxlZGJ5IGlkcyAqL1xuICBwcm90ZWN0ZWQgcmVhZG9ubHkgbGFiZWxsZWRCeSA9IHNpZ25hbDxzdHJpbmdbXT4oW10pO1xuXG4gIC8qKiBUaGUgZGVzY3JpYmVkYnkgaWRzICovXG4gIHByb3RlY3RlZCByZWFkb25seSBkZXNjcmliZWRCeSA9IHNpZ25hbDxzdHJpbmdbXT4oW10pO1xuXG4gIG5nT25EZXN0cm95KCk6IHZvaWQge1xuICAgIHRoaXMuY2xvc2UoKTtcbiAgfVxuXG4gIC8qKiBDbG9zZSB0aGUgZGlhbG9nLiAqL1xuICBjbG9zZSgpOiB2b2lkIHtcbiAgICB0aGlzLmRpYWxvZ1JlZi5jbG9zZSgpO1xuICB9XG5cbiAgLyoqIFN0b3AgY2xpY2sgZXZlbnRzIGZyb20gcHJvcGFnYXRpbmcgdG8gdGhlIG92ZXJsYXkgKi9cbiAgQEhvc3RMaXN0ZW5lcignY2xpY2snLCBbJyRldmVudCddKVxuICBwcm90ZWN0ZWQgb25DbGljayhldmVudDogRXZlbnQpOiB2b2lkIHtcbiAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgfVxuXG4gIC8qKiBAaW50ZXJuYWwgcmVnaXN0ZXIgYSBsYWJlbGxlZGJ5IGlkICovXG4gIHNldExhYmVsbGVkQnkoaWQ6IHN0cmluZyk6IHZvaWQge1xuICAgIHRoaXMubGFiZWxsZWRCeS51cGRhdGUoaWRzID0+IFsuLi5pZHMsIGlkXSk7XG4gIH1cblxuICAvKiogQGludGVybmFsIHJlZ2lzdGVyIGEgZGVzY3JpYmVkYnkgaWQgKi9cbiAgc2V0RGVzY3JpYmVkQnkoaWQ6IHN0cmluZyk6IHZvaWQge1xuICAgIHRoaXMuZGVzY3JpYmVkQnkudXBkYXRlKGlkcyA9PiBbLi4uaWRzLCBpZF0pO1xuICB9XG5cbiAgLyoqIEBpbnRlcm5hbCByZW1vdmUgYSBsYWJlbGxlZGJ5IGlkICovXG4gIHJlbW92ZUxhYmVsbGVkQnkoaWQ6IHN0cmluZyk6IHZvaWQge1xuICAgIHRoaXMubGFiZWxsZWRCeS51cGRhdGUoaWRzID0+IGlkcy5maWx0ZXIoaSA9PiBpICE9PSBpZCkpO1xuICB9XG5cbiAgLyoqIEBpbnRlcm5hbCByZW1vdmUgYSBkZXNjcmliZWRieSBpZCAqL1xuICByZW1vdmVEZXNjcmliZWRCeShpZDogc3RyaW5nKTogdm9pZCB7XG4gICAgdGhpcy5kZXNjcmliZWRCeS51cGRhdGUoaWRzID0+IGlkcy5maWx0ZXIoaSA9PiBpICE9PSBpZCkpO1xuICB9XG59XG4iXX0=