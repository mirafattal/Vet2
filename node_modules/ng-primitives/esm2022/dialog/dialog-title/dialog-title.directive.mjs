/**
 * Copyright © 2024 Angular Primitives.
 * https://github.com/ng-primitives/ng-primitives
 *
 * This source code is licensed under the Apache 2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */
import { Directive, input } from '@angular/core';
import { onChange, uniqueId } from 'ng-primitives/utils';
import { injectDialog } from '../dialog/dialog.token';
import { NgpDialogTitleToken } from './dialog-title.token';
import * as i0 from "@angular/core";
export class NgpDialogTitle {
    constructor() {
        /** Access the dialog. */
        this.dialog = injectDialog();
        /** The id of the title. */
        this.id = input(uniqueId('ngp-dialog-title'));
        onChange(this.id, (id, prevId) => {
            if (prevId) {
                this.dialog.removeLabelledBy(prevId);
            }
            if (id) {
                this.dialog.setLabelledBy(id);
            }
        });
    }
    ngOnDestroy() {
        this.dialog.removeLabelledBy(this.id());
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: NgpDialogTitle, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "17.1.0", version: "18.2.13", type: NgpDialogTitle, isStandalone: true, selector: "[ngpDialogTitle]", inputs: { id: { classPropertyName: "id", publicName: "id", isSignal: true, isRequired: false, transformFunction: null } }, host: { properties: { "id": "id()" } }, providers: [{ provide: NgpDialogTitleToken, useExisting: NgpDialogTitle }], exportAs: ["ngpDialogTitle"], ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: NgpDialogTitle, decorators: [{
            type: Directive,
            args: [{
                    standalone: true,
                    selector: '[ngpDialogTitle]',
                    exportAs: 'ngpDialogTitle',
                    providers: [{ provide: NgpDialogTitleToken, useExisting: NgpDialogTitle }],
                    host: {
                        '[id]': 'id()',
                    },
                }]
        }], ctorParameters: () => [] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlhbG9nLXRpdGxlLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL25nLXByaW1pdGl2ZXMvZGlhbG9nL3NyYy9kaWFsb2ctdGl0bGUvZGlhbG9nLXRpdGxlLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7O0dBTUc7QUFDSCxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBYSxNQUFNLGVBQWUsQ0FBQztBQUM1RCxPQUFPLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ3pELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUN0RCxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQzs7QUFXM0QsTUFBTSxPQUFPLGNBQWM7SUFPekI7UUFOQSx5QkFBeUI7UUFDUixXQUFNLEdBQUcsWUFBWSxFQUFFLENBQUM7UUFFekMsMkJBQTJCO1FBQ2xCLE9BQUUsR0FBRyxLQUFLLENBQVMsUUFBUSxDQUFDLGtCQUFrQixDQUFDLENBQUMsQ0FBQztRQUd4RCxRQUFRLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUUsRUFBRSxNQUFNLEVBQUUsRUFBRTtZQUMvQixJQUFJLE1BQU0sRUFBRSxDQUFDO2dCQUNYLElBQUksQ0FBQyxNQUFNLENBQUMsZ0JBQWdCLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDdkMsQ0FBQztZQUVELElBQUksRUFBRSxFQUFFLENBQUM7Z0JBQ1AsSUFBSSxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUMsRUFBRSxDQUFDLENBQUM7WUFDaEMsQ0FBQztRQUNILENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVELFdBQVc7UUFDVCxJQUFJLENBQUMsTUFBTSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQzFDLENBQUM7K0dBckJVLGNBQWM7bUdBQWQsY0FBYyxrT0FMZCxDQUFDLEVBQUUsT0FBTyxFQUFFLG1CQUFtQixFQUFFLFdBQVcsRUFBRSxjQUFjLEVBQUUsQ0FBQzs7NEZBSy9ELGNBQWM7a0JBVDFCLFNBQVM7bUJBQUM7b0JBQ1QsVUFBVSxFQUFFLElBQUk7b0JBQ2hCLFFBQVEsRUFBRSxrQkFBa0I7b0JBQzVCLFFBQVEsRUFBRSxnQkFBZ0I7b0JBQzFCLFNBQVMsRUFBRSxDQUFDLEVBQUUsT0FBTyxFQUFFLG1CQUFtQixFQUFFLFdBQVcsZ0JBQWdCLEVBQUUsQ0FBQztvQkFDMUUsSUFBSSxFQUFFO3dCQUNKLE1BQU0sRUFBRSxNQUFNO3FCQUNmO2lCQUNGIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgwqkgMjAyNCBBbmd1bGFyIFByaW1pdGl2ZXMuXG4gKiBodHRwczovL2dpdGh1Yi5jb20vbmctcHJpbWl0aXZlcy9uZy1wcmltaXRpdmVzXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIDIuMCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5pbXBvcnQgeyBEaXJlY3RpdmUsIGlucHV0LCBPbkRlc3Ryb3kgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IG9uQ2hhbmdlLCB1bmlxdWVJZCB9IGZyb20gJ25nLXByaW1pdGl2ZXMvdXRpbHMnO1xuaW1wb3J0IHsgaW5qZWN0RGlhbG9nIH0gZnJvbSAnLi4vZGlhbG9nL2RpYWxvZy50b2tlbic7XG5pbXBvcnQgeyBOZ3BEaWFsb2dUaXRsZVRva2VuIH0gZnJvbSAnLi9kaWFsb2ctdGl0bGUudG9rZW4nO1xuXG5ARGlyZWN0aXZlKHtcbiAgc3RhbmRhbG9uZTogdHJ1ZSxcbiAgc2VsZWN0b3I6ICdbbmdwRGlhbG9nVGl0bGVdJyxcbiAgZXhwb3J0QXM6ICduZ3BEaWFsb2dUaXRsZScsXG4gIHByb3ZpZGVyczogW3sgcHJvdmlkZTogTmdwRGlhbG9nVGl0bGVUb2tlbiwgdXNlRXhpc3Rpbmc6IE5ncERpYWxvZ1RpdGxlIH1dLFxuICBob3N0OiB7XG4gICAgJ1tpZF0nOiAnaWQoKScsXG4gIH0sXG59KVxuZXhwb3J0IGNsYXNzIE5ncERpYWxvZ1RpdGxlIGltcGxlbWVudHMgT25EZXN0cm95IHtcbiAgLyoqIEFjY2VzcyB0aGUgZGlhbG9nLiAqL1xuICBwcml2YXRlIHJlYWRvbmx5IGRpYWxvZyA9IGluamVjdERpYWxvZygpO1xuXG4gIC8qKiBUaGUgaWQgb2YgdGhlIHRpdGxlLiAqL1xuICByZWFkb25seSBpZCA9IGlucHV0PHN0cmluZz4odW5pcXVlSWQoJ25ncC1kaWFsb2ctdGl0bGUnKSk7XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgb25DaGFuZ2UodGhpcy5pZCwgKGlkLCBwcmV2SWQpID0+IHtcbiAgICAgIGlmIChwcmV2SWQpIHtcbiAgICAgICAgdGhpcy5kaWFsb2cucmVtb3ZlTGFiZWxsZWRCeShwcmV2SWQpO1xuICAgICAgfVxuXG4gICAgICBpZiAoaWQpIHtcbiAgICAgICAgdGhpcy5kaWFsb2cuc2V0TGFiZWxsZWRCeShpZCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBuZ09uRGVzdHJveSgpOiB2b2lkIHtcbiAgICB0aGlzLmRpYWxvZy5yZW1vdmVMYWJlbGxlZEJ5KHRoaXMuaWQoKSk7XG4gIH1cbn1cbiJdfQ==