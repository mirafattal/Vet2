import { Directive, booleanAttribute, computed, contentChildren, input, model, } from '@angular/core';
import { NgpOrientationToken } from 'ng-primitives/internal';
import { NgpRovingFocusGroup } from 'ng-primitives/roving-focus';
import { uniqueId } from 'ng-primitives/utils';
import { injectTabsConfig } from '../config/tabs.config';
import { NgpTabPanelToken } from '../tab-panel/tab-panel.token';
import { NgpTabsetToken } from './tabset.token';
import * as i0 from "@angular/core";
import * as i1 from "ng-primitives/roving-focus";
export class NgpTabset {
    constructor() {
        /**
         * Access the global tabset configuration
         */
        this.config = injectTabsConfig();
        /**
         * Define the id for the tabset
         */
        this.id = input(uniqueId('ngp-tabset'));
        /**
         * Define the active tab
         */
        this.value = model(null, {
            alias: 'ngpTabsetValue',
        });
        /**
         * The orientation of the tabset
         * @default 'horizontal'
         */
        this.orientation = input(this.config.orientation, {
            alias: 'ngpTabsetOrientation',
        });
        /**
         * Whether tabs should activate on focus
         */
        this.activateOnFocus = input(this.config.activateOnFocus, {
            alias: 'ngpTabsetActivateOnFocus',
            transform: booleanAttribute,
        });
        /**
         * Access the tabs within the tabset
         */
        this.panels = contentChildren(NgpTabPanelToken, { descendants: true });
        /**
         * Get the id of the selected tab
         */
        this.selectedTab = computed(() => {
            const panels = this.panels();
            // if there is a value set and a tab with that value exists, return the value
            if (panels.some(panel => panel.value() === this.value())) {
                return this.value();
            }
            // otherwise return the first tab
            return panels[0]?.value();
        });
    }
    /**
     * Select a tab by its value
     * @param value The value of the tab to select
     */
    select(value) {
        this.value.set(value);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: NgpTabset, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "17.2.0", version: "18.2.13", type: NgpTabset, isStandalone: true, selector: "[ngpTabset]", inputs: { id: { classPropertyName: "id", publicName: "id", isSignal: true, isRequired: false, transformFunction: null }, value: { classPropertyName: "value", publicName: "ngpTabsetValue", isSignal: true, isRequired: false, transformFunction: null }, orientation: { classPropertyName: "orientation", publicName: "ngpTabsetOrientation", isSignal: true, isRequired: false, transformFunction: null }, activateOnFocus: { classPropertyName: "activateOnFocus", publicName: "ngpTabsetActivateOnFocus", isSignal: true, isRequired: false, transformFunction: null } }, outputs: { value: "ngpTabsetValueChange" }, host: { properties: { "attr.id": "id()", "attr.data-orientation": "orientation()" } }, providers: [
            { provide: NgpTabsetToken, useExisting: NgpTabset },
            { provide: NgpOrientationToken, useExisting: NgpTabset },
        ], queries: [{ propertyName: "panels", predicate: NgpTabPanelToken, descendants: true, isSignal: true }], exportAs: ["ngpTabset"], hostDirectives: [{ directive: i1.NgpRovingFocusGroup }], ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: NgpTabset, decorators: [{
            type: Directive,
            args: [{
                    standalone: true,
                    selector: '[ngpTabset]',
                    exportAs: 'ngpTabset',
                    providers: [
                        { provide: NgpTabsetToken, useExisting: NgpTabset },
                        { provide: NgpOrientationToken, useExisting: NgpTabset },
                    ],
                    hostDirectives: [NgpRovingFocusGroup],
                    host: {
                        '[attr.id]': 'id()',
                        '[attr.data-orientation]': 'orientation()',
                    },
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFic2V0LmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL25nLXByaW1pdGl2ZXMvdGFicy9zcmMvdGFic2V0L3RhYnNldC5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBUUEsT0FBTyxFQUNMLFNBQVMsRUFDVCxnQkFBZ0IsRUFDaEIsUUFBUSxFQUNSLGVBQWUsRUFDZixLQUFLLEVBQ0wsS0FBSyxHQUNOLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBbUMsbUJBQW1CLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUM5RixPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUNqRSxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDL0MsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDekQsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sOEJBQThCLENBQUM7QUFDaEUsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLGdCQUFnQixDQUFDOzs7QUFnQmhELE1BQU0sT0FBTyxTQUFTO0lBZHRCO1FBZUU7O1dBRUc7UUFDYyxXQUFNLEdBQUcsZ0JBQWdCLEVBQUUsQ0FBQztRQUU3Qzs7V0FFRztRQUNNLE9BQUUsR0FBRyxLQUFLLENBQVMsUUFBUSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUM7UUFFcEQ7O1dBRUc7UUFDTSxVQUFLLEdBQUcsS0FBSyxDQUFnQixJQUFJLEVBQUU7WUFDMUMsS0FBSyxFQUFFLGdCQUFnQjtTQUN4QixDQUFDLENBQUM7UUFFSDs7O1dBR0c7UUFDTSxnQkFBVyxHQUFHLEtBQUssQ0FBaUIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxXQUFXLEVBQUU7WUFDcEUsS0FBSyxFQUFFLHNCQUFzQjtTQUM5QixDQUFDLENBQUM7UUFFSDs7V0FFRztRQUNNLG9CQUFlLEdBQUcsS0FBSyxDQUF3QixJQUFJLENBQUMsTUFBTSxDQUFDLGVBQWUsRUFBRTtZQUNuRixLQUFLLEVBQUUsMEJBQTBCO1lBQ2pDLFNBQVMsRUFBRSxnQkFBZ0I7U0FDNUIsQ0FBQyxDQUFDO1FBRUg7O1dBRUc7UUFDTSxXQUFNLEdBQUcsZUFBZSxDQUFDLGdCQUFnQixFQUFFLEVBQUUsV0FBVyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7UUFFM0U7O1dBRUc7UUFDTSxnQkFBVyxHQUFHLFFBQVEsQ0FBQyxHQUFHLEVBQUU7WUFDbkMsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDO1lBRTdCLDZFQUE2RTtZQUM3RSxJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsS0FBSyxFQUFFLEtBQUssSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDLEVBQUUsQ0FBQztnQkFDekQsT0FBTyxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7WUFDdEIsQ0FBQztZQUVELGlDQUFpQztZQUNqQyxPQUFPLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxLQUFLLEVBQUUsQ0FBQztRQUM1QixDQUFDLENBQUMsQ0FBQztLQVNKO0lBUEM7OztPQUdHO0lBQ0gsTUFBTSxDQUFDLEtBQWE7UUFDbEIsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDeEIsQ0FBQzsrR0E1RFUsU0FBUzttR0FBVCxTQUFTLDJ1QkFWVDtZQUNULEVBQUUsT0FBTyxFQUFFLGNBQWMsRUFBRSxXQUFXLEVBQUUsU0FBUyxFQUFFO1lBQ25ELEVBQUUsT0FBTyxFQUFFLG1CQUFtQixFQUFFLFdBQVcsRUFBRSxTQUFTLEVBQUU7U0FDekQsaURBNENpQyxnQkFBZ0I7OzRGQXJDdkMsU0FBUztrQkFkckIsU0FBUzttQkFBQztvQkFDVCxVQUFVLEVBQUUsSUFBSTtvQkFDaEIsUUFBUSxFQUFFLGFBQWE7b0JBQ3ZCLFFBQVEsRUFBRSxXQUFXO29CQUNyQixTQUFTLEVBQUU7d0JBQ1QsRUFBRSxPQUFPLEVBQUUsY0FBYyxFQUFFLFdBQVcsV0FBVyxFQUFFO3dCQUNuRCxFQUFFLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxXQUFXLFdBQVcsRUFBRTtxQkFDekQ7b0JBQ0QsY0FBYyxFQUFFLENBQUMsbUJBQW1CLENBQUM7b0JBQ3JDLElBQUksRUFBRTt3QkFDSixXQUFXLEVBQUUsTUFBTTt3QkFDbkIseUJBQXlCLEVBQUUsZUFBZTtxQkFDM0M7aUJBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCDCqSAyMDI0IEFuZ3VsYXIgUHJpbWl0aXZlcy5cbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9uZy1wcmltaXRpdmVzL25nLXByaW1pdGl2ZXNcbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgMi4wIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbmltcG9ydCB7IEJvb2xlYW5JbnB1dCB9IGZyb20gJ0Bhbmd1bGFyL2Nkay9jb2VyY2lvbic7XG5pbXBvcnQge1xuICBEaXJlY3RpdmUsXG4gIGJvb2xlYW5BdHRyaWJ1dGUsXG4gIGNvbXB1dGVkLFxuICBjb250ZW50Q2hpbGRyZW4sXG4gIGlucHV0LFxuICBtb2RlbCxcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBOZ3BDYW5PcmllbnRhdGUsIE5ncE9yaWVudGF0aW9uLCBOZ3BPcmllbnRhdGlvblRva2VuIH0gZnJvbSAnbmctcHJpbWl0aXZlcy9pbnRlcm5hbCc7XG5pbXBvcnQgeyBOZ3BSb3ZpbmdGb2N1c0dyb3VwIH0gZnJvbSAnbmctcHJpbWl0aXZlcy9yb3ZpbmctZm9jdXMnO1xuaW1wb3J0IHsgdW5pcXVlSWQgfSBmcm9tICduZy1wcmltaXRpdmVzL3V0aWxzJztcbmltcG9ydCB7IGluamVjdFRhYnNDb25maWcgfSBmcm9tICcuLi9jb25maWcvdGFicy5jb25maWcnO1xuaW1wb3J0IHsgTmdwVGFiUGFuZWxUb2tlbiB9IGZyb20gJy4uL3RhYi1wYW5lbC90YWItcGFuZWwudG9rZW4nO1xuaW1wb3J0IHsgTmdwVGFic2V0VG9rZW4gfSBmcm9tICcuL3RhYnNldC50b2tlbic7XG5cbkBEaXJlY3RpdmUoe1xuICBzdGFuZGFsb25lOiB0cnVlLFxuICBzZWxlY3RvcjogJ1tuZ3BUYWJzZXRdJyxcbiAgZXhwb3J0QXM6ICduZ3BUYWJzZXQnLFxuICBwcm92aWRlcnM6IFtcbiAgICB7IHByb3ZpZGU6IE5ncFRhYnNldFRva2VuLCB1c2VFeGlzdGluZzogTmdwVGFic2V0IH0sXG4gICAgeyBwcm92aWRlOiBOZ3BPcmllbnRhdGlvblRva2VuLCB1c2VFeGlzdGluZzogTmdwVGFic2V0IH0sXG4gIF0sXG4gIGhvc3REaXJlY3RpdmVzOiBbTmdwUm92aW5nRm9jdXNHcm91cF0sXG4gIGhvc3Q6IHtcbiAgICAnW2F0dHIuaWRdJzogJ2lkKCknLFxuICAgICdbYXR0ci5kYXRhLW9yaWVudGF0aW9uXSc6ICdvcmllbnRhdGlvbigpJyxcbiAgfSxcbn0pXG5leHBvcnQgY2xhc3MgTmdwVGFic2V0IGltcGxlbWVudHMgTmdwQ2FuT3JpZW50YXRlIHtcbiAgLyoqXG4gICAqIEFjY2VzcyB0aGUgZ2xvYmFsIHRhYnNldCBjb25maWd1cmF0aW9uXG4gICAqL1xuICBwcml2YXRlIHJlYWRvbmx5IGNvbmZpZyA9IGluamVjdFRhYnNDb25maWcoKTtcblxuICAvKipcbiAgICogRGVmaW5lIHRoZSBpZCBmb3IgdGhlIHRhYnNldFxuICAgKi9cbiAgcmVhZG9ubHkgaWQgPSBpbnB1dDxzdHJpbmc+KHVuaXF1ZUlkKCduZ3AtdGFic2V0JykpO1xuXG4gIC8qKlxuICAgKiBEZWZpbmUgdGhlIGFjdGl2ZSB0YWJcbiAgICovXG4gIHJlYWRvbmx5IHZhbHVlID0gbW9kZWw8c3RyaW5nIHwgbnVsbD4obnVsbCwge1xuICAgIGFsaWFzOiAnbmdwVGFic2V0VmFsdWUnLFxuICB9KTtcblxuICAvKipcbiAgICogVGhlIG9yaWVudGF0aW9uIG9mIHRoZSB0YWJzZXRcbiAgICogQGRlZmF1bHQgJ2hvcml6b250YWwnXG4gICAqL1xuICByZWFkb25seSBvcmllbnRhdGlvbiA9IGlucHV0PE5ncE9yaWVudGF0aW9uPih0aGlzLmNvbmZpZy5vcmllbnRhdGlvbiwge1xuICAgIGFsaWFzOiAnbmdwVGFic2V0T3JpZW50YXRpb24nLFxuICB9KTtcblxuICAvKipcbiAgICogV2hldGhlciB0YWJzIHNob3VsZCBhY3RpdmF0ZSBvbiBmb2N1c1xuICAgKi9cbiAgcmVhZG9ubHkgYWN0aXZhdGVPbkZvY3VzID0gaW5wdXQ8Ym9vbGVhbiwgQm9vbGVhbklucHV0Pih0aGlzLmNvbmZpZy5hY3RpdmF0ZU9uRm9jdXMsIHtcbiAgICBhbGlhczogJ25ncFRhYnNldEFjdGl2YXRlT25Gb2N1cycsXG4gICAgdHJhbnNmb3JtOiBib29sZWFuQXR0cmlidXRlLFxuICB9KTtcblxuICAvKipcbiAgICogQWNjZXNzIHRoZSB0YWJzIHdpdGhpbiB0aGUgdGFic2V0XG4gICAqL1xuICByZWFkb25seSBwYW5lbHMgPSBjb250ZW50Q2hpbGRyZW4oTmdwVGFiUGFuZWxUb2tlbiwgeyBkZXNjZW5kYW50czogdHJ1ZSB9KTtcblxuICAvKipcbiAgICogR2V0IHRoZSBpZCBvZiB0aGUgc2VsZWN0ZWQgdGFiXG4gICAqL1xuICByZWFkb25seSBzZWxlY3RlZFRhYiA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICBjb25zdCBwYW5lbHMgPSB0aGlzLnBhbmVscygpO1xuXG4gICAgLy8gaWYgdGhlcmUgaXMgYSB2YWx1ZSBzZXQgYW5kIGEgdGFiIHdpdGggdGhhdCB2YWx1ZSBleGlzdHMsIHJldHVybiB0aGUgdmFsdWVcbiAgICBpZiAocGFuZWxzLnNvbWUocGFuZWwgPT4gcGFuZWwudmFsdWUoKSA9PT0gdGhpcy52YWx1ZSgpKSkge1xuICAgICAgcmV0dXJuIHRoaXMudmFsdWUoKTtcbiAgICB9XG5cbiAgICAvLyBvdGhlcndpc2UgcmV0dXJuIHRoZSBmaXJzdCB0YWJcbiAgICByZXR1cm4gcGFuZWxzWzBdPy52YWx1ZSgpO1xuICB9KTtcblxuICAvKipcbiAgICogU2VsZWN0IGEgdGFiIGJ5IGl0cyB2YWx1ZVxuICAgKiBAcGFyYW0gdmFsdWUgVGhlIHZhbHVlIG9mIHRoZSB0YWIgdG8gc2VsZWN0XG4gICAqL1xuICBzZWxlY3QodmFsdWU6IHN0cmluZyk6IHZvaWQge1xuICAgIHRoaXMudmFsdWUuc2V0KHZhbHVlKTtcbiAgfVxufVxuIl19