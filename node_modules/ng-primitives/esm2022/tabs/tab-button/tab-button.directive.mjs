import { Directive, HostListener, booleanAttribute, computed, input } from '@angular/core';
import { NgpFocusVisible, NgpHover, NgpPress } from 'ng-primitives/interactions';
import { NgpRovingFocusItem } from 'ng-primitives/roving-focus';
import { injectTabset } from '../tabset/tabset.token';
import * as i0 from "@angular/core";
import * as i1 from "ng-primitives/roving-focus";
import * as i2 from "ng-primitives/interactions";
export class NgpTabButton {
    constructor() {
        /**
         * Access the tabset
         */
        this.tabset = injectTabset();
        /**
         * The value of the tab this trigger controls
         */
        this.value = input.required({ alias: 'ngpTabButtonValue' });
        /**
         * Whether the tab is disabled
         * @default false
         */
        this.disabled = input(false, {
            alias: 'ngpTabButtonDisabled',
            transform: booleanAttribute,
        });
        /**
         * Determine the id of the tab button
         * @internal
         */
        this.id = input();
        /**
         * Determine a unique id for the tab button if not provided
         * @internal
         */
        this.defaultId = computed(() => `${this.tabset.id()}-button-${this.value()}`);
        /**
         * Determine the aria-controls of the tab button
         * @internal
         */
        this.ariaControls = computed(() => `${this.tabset.id()}-panel-${this.value()}`);
        /**
         * Whether the tab is active
         */
        this.active = computed(() => this.tabset.value() === this.value());
    }
    /**
     * Select the tab this trigger controls
     */
    select() {
        this.tabset.select(this.value());
    }
    /**
     * On focus select the tab this trigger controls if activateOnFocus is true
     */
    activateOnFocus() {
        if (this.tabset.activateOnFocus()) {
            this.select();
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: NgpTabButton, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "17.1.0", version: "18.2.13", type: NgpTabButton, isStandalone: true, selector: "[ngpTabButton]", inputs: { value: { classPropertyName: "value", publicName: "ngpTabButtonValue", isSignal: true, isRequired: true, transformFunction: null }, disabled: { classPropertyName: "disabled", publicName: "ngpTabButtonDisabled", isSignal: true, isRequired: false, transformFunction: null }, id: { classPropertyName: "id", publicName: "id", isSignal: true, isRequired: false, transformFunction: null } }, host: { attributes: { "role": "tab" }, listeners: { "click": "select()", "focus": "activateOnFocus()" }, properties: { "attr.id": "id() ?? defaultId()", "attr.aria-controls": "ariaControls()", "attr.data-active": "active() ? \"\" : null", "attr.data-disabled": "disabled() ? \"\" : null", "attr.data-orientation": "tabset.orientation()" } }, exportAs: ["ngpTabButton"], hostDirectives: [{ directive: i1.NgpRovingFocusItem }, { directive: i2.NgpHover }, { directive: i2.NgpFocusVisible }, { directive: i2.NgpPress }], ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: NgpTabButton, decorators: [{
            type: Directive,
            args: [{
                    standalone: true,
                    selector: '[ngpTabButton]',
                    exportAs: 'ngpTabButton',
                    host: {
                        role: 'tab',
                        '[attr.id]': 'id() ?? defaultId()',
                        '[attr.aria-controls]': 'ariaControls()',
                        '[attr.data-active]': 'active() ? "" : null',
                        '[attr.data-disabled]': 'disabled() ? "" : null',
                        '[attr.data-orientation]': 'tabset.orientation()',
                    },
                    hostDirectives: [NgpRovingFocusItem, NgpHover, NgpFocusVisible, NgpPress],
                }]
        }], propDecorators: { select: [{
                type: HostListener,
                args: ['click']
            }], activateOnFocus: [{
                type: HostListener,
                args: ['focus']
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFiLWJ1dHRvbi5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9uZy1wcmltaXRpdmVzL3RhYnMvc3JjL3RhYi1idXR0b24vdGFiLWJ1dHRvbi5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBUUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxZQUFZLEVBQUUsZ0JBQWdCLEVBQUUsUUFBUSxFQUFFLEtBQUssRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzRixPQUFPLEVBQUUsZUFBZSxFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUNqRixPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUNoRSxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sd0JBQXdCLENBQUM7Ozs7QUFnQnRELE1BQU0sT0FBTyxZQUFZO0lBZHpCO1FBZUU7O1dBRUc7UUFDZ0IsV0FBTSxHQUFHLFlBQVksRUFBRSxDQUFDO1FBRTNDOztXQUVHO1FBQ00sVUFBSyxHQUFHLEtBQUssQ0FBQyxRQUFRLENBQVMsRUFBRSxLQUFLLEVBQUUsbUJBQW1CLEVBQUUsQ0FBQyxDQUFDO1FBRXhFOzs7V0FHRztRQUNNLGFBQVEsR0FBRyxLQUFLLENBQXdCLEtBQUssRUFBRTtZQUN0RCxLQUFLLEVBQUUsc0JBQXNCO1lBQzdCLFNBQVMsRUFBRSxnQkFBZ0I7U0FDNUIsQ0FBQyxDQUFDO1FBRUg7OztXQUdHO1FBQ00sT0FBRSxHQUFHLEtBQUssRUFBVSxDQUFDO1FBRTlCOzs7V0FHRztRQUNNLGNBQVMsR0FBRyxRQUFRLENBQUMsR0FBRyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxXQUFXLElBQUksQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFFbEY7OztXQUdHO1FBQ00saUJBQVksR0FBRyxRQUFRLENBQUMsR0FBRyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxVQUFVLElBQUksQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFFcEY7O1dBRUc7UUFDTSxXQUFNLEdBQUcsUUFBUSxDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLEtBQUssSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUM7S0FtQnhFO0lBakJDOztPQUVHO0lBRUgsTUFBTTtRQUNKLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDO0lBQ25DLENBQUM7SUFFRDs7T0FFRztJQUVPLGVBQWU7UUFDdkIsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLGVBQWUsRUFBRSxFQUFFLENBQUM7WUFDbEMsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDO1FBQ2hCLENBQUM7SUFDSCxDQUFDOytHQTNEVSxZQUFZO21HQUFaLFlBQVk7OzRGQUFaLFlBQVk7a0JBZHhCLFNBQVM7bUJBQUM7b0JBQ1QsVUFBVSxFQUFFLElBQUk7b0JBQ2hCLFFBQVEsRUFBRSxnQkFBZ0I7b0JBQzFCLFFBQVEsRUFBRSxjQUFjO29CQUN4QixJQUFJLEVBQUU7d0JBQ0osSUFBSSxFQUFFLEtBQUs7d0JBQ1gsV0FBVyxFQUFFLHFCQUFxQjt3QkFDbEMsc0JBQXNCLEVBQUUsZ0JBQWdCO3dCQUN4QyxvQkFBb0IsRUFBRSxzQkFBc0I7d0JBQzVDLHNCQUFzQixFQUFFLHdCQUF3Qjt3QkFDaEQseUJBQXlCLEVBQUUsc0JBQXNCO3FCQUNsRDtvQkFDRCxjQUFjLEVBQUUsQ0FBQyxrQkFBa0IsRUFBRSxRQUFRLEVBQUUsZUFBZSxFQUFFLFFBQVEsQ0FBQztpQkFDMUU7OEJBZ0RDLE1BQU07c0JBREwsWUFBWTt1QkFBQyxPQUFPO2dCQVNYLGVBQWU7c0JBRHhCLFlBQVk7dUJBQUMsT0FBTyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IMKpIDIwMjQgQW5ndWxhciBQcmltaXRpdmVzLlxuICogaHR0cHM6Ly9naXRodWIuY29tL25nLXByaW1pdGl2ZXMvbmctcHJpbWl0aXZlc1xuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSAyLjAgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuaW1wb3J0IHsgQm9vbGVhbklucHV0IH0gZnJvbSAnQGFuZ3VsYXIvY2RrL2NvZXJjaW9uJztcbmltcG9ydCB7IERpcmVjdGl2ZSwgSG9zdExpc3RlbmVyLCBib29sZWFuQXR0cmlidXRlLCBjb21wdXRlZCwgaW5wdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE5ncEZvY3VzVmlzaWJsZSwgTmdwSG92ZXIsIE5ncFByZXNzIH0gZnJvbSAnbmctcHJpbWl0aXZlcy9pbnRlcmFjdGlvbnMnO1xuaW1wb3J0IHsgTmdwUm92aW5nRm9jdXNJdGVtIH0gZnJvbSAnbmctcHJpbWl0aXZlcy9yb3ZpbmctZm9jdXMnO1xuaW1wb3J0IHsgaW5qZWN0VGFic2V0IH0gZnJvbSAnLi4vdGFic2V0L3RhYnNldC50b2tlbic7XG5cbkBEaXJlY3RpdmUoe1xuICBzdGFuZGFsb25lOiB0cnVlLFxuICBzZWxlY3RvcjogJ1tuZ3BUYWJCdXR0b25dJyxcbiAgZXhwb3J0QXM6ICduZ3BUYWJCdXR0b24nLFxuICBob3N0OiB7XG4gICAgcm9sZTogJ3RhYicsXG4gICAgJ1thdHRyLmlkXSc6ICdpZCgpID8/IGRlZmF1bHRJZCgpJyxcbiAgICAnW2F0dHIuYXJpYS1jb250cm9sc10nOiAnYXJpYUNvbnRyb2xzKCknLFxuICAgICdbYXR0ci5kYXRhLWFjdGl2ZV0nOiAnYWN0aXZlKCkgPyBcIlwiIDogbnVsbCcsXG4gICAgJ1thdHRyLmRhdGEtZGlzYWJsZWRdJzogJ2Rpc2FibGVkKCkgPyBcIlwiIDogbnVsbCcsXG4gICAgJ1thdHRyLmRhdGEtb3JpZW50YXRpb25dJzogJ3RhYnNldC5vcmllbnRhdGlvbigpJyxcbiAgfSxcbiAgaG9zdERpcmVjdGl2ZXM6IFtOZ3BSb3ZpbmdGb2N1c0l0ZW0sIE5ncEhvdmVyLCBOZ3BGb2N1c1Zpc2libGUsIE5ncFByZXNzXSxcbn0pXG5leHBvcnQgY2xhc3MgTmdwVGFiQnV0dG9uIHtcbiAgLyoqXG4gICAqIEFjY2VzcyB0aGUgdGFic2V0XG4gICAqL1xuICBwcm90ZWN0ZWQgcmVhZG9ubHkgdGFic2V0ID0gaW5qZWN0VGFic2V0KCk7XG5cbiAgLyoqXG4gICAqIFRoZSB2YWx1ZSBvZiB0aGUgdGFiIHRoaXMgdHJpZ2dlciBjb250cm9sc1xuICAgKi9cbiAgcmVhZG9ubHkgdmFsdWUgPSBpbnB1dC5yZXF1aXJlZDxzdHJpbmc+KHsgYWxpYXM6ICduZ3BUYWJCdXR0b25WYWx1ZScgfSk7XG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgdGhlIHRhYiBpcyBkaXNhYmxlZFxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgcmVhZG9ubHkgZGlzYWJsZWQgPSBpbnB1dDxib29sZWFuLCBCb29sZWFuSW5wdXQ+KGZhbHNlLCB7XG4gICAgYWxpYXM6ICduZ3BUYWJCdXR0b25EaXNhYmxlZCcsXG4gICAgdHJhbnNmb3JtOiBib29sZWFuQXR0cmlidXRlLFxuICB9KTtcblxuICAvKipcbiAgICogRGV0ZXJtaW5lIHRoZSBpZCBvZiB0aGUgdGFiIGJ1dHRvblxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIHJlYWRvbmx5IGlkID0gaW5wdXQ8c3RyaW5nPigpO1xuXG4gIC8qKlxuICAgKiBEZXRlcm1pbmUgYSB1bmlxdWUgaWQgZm9yIHRoZSB0YWIgYnV0dG9uIGlmIG5vdCBwcm92aWRlZFxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIHJlYWRvbmx5IGRlZmF1bHRJZCA9IGNvbXB1dGVkKCgpID0+IGAke3RoaXMudGFic2V0LmlkKCl9LWJ1dHRvbi0ke3RoaXMudmFsdWUoKX1gKTtcblxuICAvKipcbiAgICogRGV0ZXJtaW5lIHRoZSBhcmlhLWNvbnRyb2xzIG9mIHRoZSB0YWIgYnV0dG9uXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgcmVhZG9ubHkgYXJpYUNvbnRyb2xzID0gY29tcHV0ZWQoKCkgPT4gYCR7dGhpcy50YWJzZXQuaWQoKX0tcGFuZWwtJHt0aGlzLnZhbHVlKCl9YCk7XG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgdGhlIHRhYiBpcyBhY3RpdmVcbiAgICovXG4gIHJlYWRvbmx5IGFjdGl2ZSA9IGNvbXB1dGVkKCgpID0+IHRoaXMudGFic2V0LnZhbHVlKCkgPT09IHRoaXMudmFsdWUoKSk7XG5cbiAgLyoqXG4gICAqIFNlbGVjdCB0aGUgdGFiIHRoaXMgdHJpZ2dlciBjb250cm9sc1xuICAgKi9cbiAgQEhvc3RMaXN0ZW5lcignY2xpY2snKVxuICBzZWxlY3QoKTogdm9pZCB7XG4gICAgdGhpcy50YWJzZXQuc2VsZWN0KHRoaXMudmFsdWUoKSk7XG4gIH1cblxuICAvKipcbiAgICogT24gZm9jdXMgc2VsZWN0IHRoZSB0YWIgdGhpcyB0cmlnZ2VyIGNvbnRyb2xzIGlmIGFjdGl2YXRlT25Gb2N1cyBpcyB0cnVlXG4gICAqL1xuICBASG9zdExpc3RlbmVyKCdmb2N1cycpXG4gIHByb3RlY3RlZCBhY3RpdmF0ZU9uRm9jdXMoKTogdm9pZCB7XG4gICAgaWYgKHRoaXMudGFic2V0LmFjdGl2YXRlT25Gb2N1cygpKSB7XG4gICAgICB0aGlzLnNlbGVjdCgpO1xuICAgIH1cbiAgfVxufVxuIl19