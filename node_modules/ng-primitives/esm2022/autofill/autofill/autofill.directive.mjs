/**
 * Copyright © 2024 Angular Primitives.
 * https://github.com/ng-primitives/ng-primitives
 *
 * This source code is licensed under the Apache 2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */
import { Directive, HostListener, output, signal } from '@angular/core';
import { injectStyleInjector } from 'ng-primitives/internal';
import { NgpAutofillToken } from './autofill.token';
import * as i0 from "@angular/core";
export class NgpAutofill {
    constructor() {
        /**
         * Access the style injector.
         */
        this.styleInjector = injectStyleInjector();
        /**
         * Store the autofill state.
         */
        this.autofilled = signal(false);
        /**
         * Emit when the autofill state changes.
         */
        this.autofillChange = output({
            alias: 'ngpAutofill',
        });
        // This technique is based on that used by the Angular CDK
        // https://github.com/angular/components/blob/main/src/cdk/text-field/_index.scss
        this.styleInjector.add('ngp-autofill', `
        @keyframes ngp-autofill-start { }
        @keyframes ngp-autofill-end {}

        [data-autofill]:-webkit-autofill {
          animation: ngp-autofill-start 0s 1ms;
        }

        [data-autofill]:not(:-webkit-autofill) {
          animation: ngp-autofill-end 0s 1ms;
        }
      `);
    }
    onAnimationStart(event) {
        if (event.animationName === 'ngp-autofill-start') {
            this.autofilled.set(true);
            this.autofillChange.emit(true);
        }
        if (event.animationName === 'ngp-autofill-end') {
            this.autofilled.set(false);
            this.autofillChange.emit(false);
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: NgpAutofill, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "18.2.13", type: NgpAutofill, isStandalone: true, selector: "[ngpAutofill]", outputs: { autofillChange: "ngpAutofill" }, host: { listeners: { "animationstart": "onAnimationStart($event)" }, properties: { "attr.data-autofill": "autofilled() ? \"\" : null" } }, providers: [{ provide: NgpAutofillToken, useExisting: NgpAutofill }], exportAs: ["ngpAutofill"], ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: NgpAutofill, decorators: [{
            type: Directive,
            args: [{
                    standalone: true,
                    selector: '[ngpAutofill]',
                    exportAs: 'ngpAutofill',
                    providers: [{ provide: NgpAutofillToken, useExisting: NgpAutofill }],
                    host: {
                        '[attr.data-autofill]': 'autofilled() ? "" : null',
                    },
                }]
        }], ctorParameters: () => [], propDecorators: { onAnimationStart: [{
                type: HostListener,
                args: ['animationstart', ['$event']]
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0b2ZpbGwuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvbmctcHJpbWl0aXZlcy9hdXRvZmlsbC9zcmMvYXV0b2ZpbGwvYXV0b2ZpbGwuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7R0FNRztBQUNILE9BQU8sRUFBRSxTQUFTLEVBQUUsWUFBWSxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDeEUsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDN0QsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sa0JBQWtCLENBQUM7O0FBV3BELE1BQU0sT0FBTyxXQUFXO0lBa0J0QjtRQWpCQTs7V0FFRztRQUNjLGtCQUFhLEdBQUcsbUJBQW1CLEVBQUUsQ0FBQztRQUV2RDs7V0FFRztRQUNnQixlQUFVLEdBQUcsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBRTlDOztXQUVHO1FBQ00sbUJBQWMsR0FBRyxNQUFNLENBQVU7WUFDeEMsS0FBSyxFQUFFLGFBQWE7U0FDckIsQ0FBQyxDQUFDO1FBR0QsMERBQTBEO1FBQzFELGlGQUFpRjtRQUNqRixJQUFJLENBQUMsYUFBYSxDQUFDLEdBQUcsQ0FDcEIsY0FBYyxFQUNkOzs7Ozs7Ozs7OztPQVdDLENBQ0YsQ0FBQztJQUNKLENBQUM7SUFHUyxnQkFBZ0IsQ0FBQyxLQUFxQjtRQUM5QyxJQUFJLEtBQUssQ0FBQyxhQUFhLEtBQUssb0JBQW9CLEVBQUUsQ0FBQztZQUNqRCxJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUMxQixJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNqQyxDQUFDO1FBRUQsSUFBSSxLQUFLLENBQUMsYUFBYSxLQUFLLGtCQUFrQixFQUFFLENBQUM7WUFDL0MsSUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDM0IsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDbEMsQ0FBQztJQUNILENBQUM7K0dBakRVLFdBQVc7bUdBQVgsV0FBVyxtUEFMWCxDQUFDLEVBQUUsT0FBTyxFQUFFLGdCQUFnQixFQUFFLFdBQVcsRUFBRSxXQUFXLEVBQUUsQ0FBQzs7NEZBS3pELFdBQVc7a0JBVHZCLFNBQVM7bUJBQUM7b0JBQ1QsVUFBVSxFQUFFLElBQUk7b0JBQ2hCLFFBQVEsRUFBRSxlQUFlO29CQUN6QixRQUFRLEVBQUUsYUFBYTtvQkFDdkIsU0FBUyxFQUFFLENBQUMsRUFBRSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsV0FBVyxhQUFhLEVBQUUsQ0FBQztvQkFDcEUsSUFBSSxFQUFFO3dCQUNKLHNCQUFzQixFQUFFLDBCQUEwQjtxQkFDbkQ7aUJBQ0Y7d0RBd0NXLGdCQUFnQjtzQkFEekIsWUFBWTt1QkFBQyxnQkFBZ0IsRUFBRSxDQUFDLFFBQVEsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IMKpIDIwMjQgQW5ndWxhciBQcmltaXRpdmVzLlxuICogaHR0cHM6Ly9naXRodWIuY29tL25nLXByaW1pdGl2ZXMvbmctcHJpbWl0aXZlc1xuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSAyLjAgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuaW1wb3J0IHsgRGlyZWN0aXZlLCBIb3N0TGlzdGVuZXIsIG91dHB1dCwgc2lnbmFsIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBpbmplY3RTdHlsZUluamVjdG9yIH0gZnJvbSAnbmctcHJpbWl0aXZlcy9pbnRlcm5hbCc7XG5pbXBvcnQgeyBOZ3BBdXRvZmlsbFRva2VuIH0gZnJvbSAnLi9hdXRvZmlsbC50b2tlbic7XG5cbkBEaXJlY3RpdmUoe1xuICBzdGFuZGFsb25lOiB0cnVlLFxuICBzZWxlY3RvcjogJ1tuZ3BBdXRvZmlsbF0nLFxuICBleHBvcnRBczogJ25ncEF1dG9maWxsJyxcbiAgcHJvdmlkZXJzOiBbeyBwcm92aWRlOiBOZ3BBdXRvZmlsbFRva2VuLCB1c2VFeGlzdGluZzogTmdwQXV0b2ZpbGwgfV0sXG4gIGhvc3Q6IHtcbiAgICAnW2F0dHIuZGF0YS1hdXRvZmlsbF0nOiAnYXV0b2ZpbGxlZCgpID8gXCJcIiA6IG51bGwnLFxuICB9LFxufSlcbmV4cG9ydCBjbGFzcyBOZ3BBdXRvZmlsbCB7XG4gIC8qKlxuICAgKiBBY2Nlc3MgdGhlIHN0eWxlIGluamVjdG9yLlxuICAgKi9cbiAgcHJpdmF0ZSByZWFkb25seSBzdHlsZUluamVjdG9yID0gaW5qZWN0U3R5bGVJbmplY3RvcigpO1xuXG4gIC8qKlxuICAgKiBTdG9yZSB0aGUgYXV0b2ZpbGwgc3RhdGUuXG4gICAqL1xuICBwcm90ZWN0ZWQgcmVhZG9ubHkgYXV0b2ZpbGxlZCA9IHNpZ25hbChmYWxzZSk7XG5cbiAgLyoqXG4gICAqIEVtaXQgd2hlbiB0aGUgYXV0b2ZpbGwgc3RhdGUgY2hhbmdlcy5cbiAgICovXG4gIHJlYWRvbmx5IGF1dG9maWxsQ2hhbmdlID0gb3V0cHV0PGJvb2xlYW4+KHtcbiAgICBhbGlhczogJ25ncEF1dG9maWxsJyxcbiAgfSk7XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgLy8gVGhpcyB0ZWNobmlxdWUgaXMgYmFzZWQgb24gdGhhdCB1c2VkIGJ5IHRoZSBBbmd1bGFyIENES1xuICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL2NvbXBvbmVudHMvYmxvYi9tYWluL3NyYy9jZGsvdGV4dC1maWVsZC9faW5kZXguc2Nzc1xuICAgIHRoaXMuc3R5bGVJbmplY3Rvci5hZGQoXG4gICAgICAnbmdwLWF1dG9maWxsJyxcbiAgICAgIGBcbiAgICAgICAgQGtleWZyYW1lcyBuZ3AtYXV0b2ZpbGwtc3RhcnQgeyB9XG4gICAgICAgIEBrZXlmcmFtZXMgbmdwLWF1dG9maWxsLWVuZCB7fVxuXG4gICAgICAgIFtkYXRhLWF1dG9maWxsXTotd2Via2l0LWF1dG9maWxsIHtcbiAgICAgICAgICBhbmltYXRpb246IG5ncC1hdXRvZmlsbC1zdGFydCAwcyAxbXM7XG4gICAgICAgIH1cblxuICAgICAgICBbZGF0YS1hdXRvZmlsbF06bm90KDotd2Via2l0LWF1dG9maWxsKSB7XG4gICAgICAgICAgYW5pbWF0aW9uOiBuZ3AtYXV0b2ZpbGwtZW5kIDBzIDFtcztcbiAgICAgICAgfVxuICAgICAgYCxcbiAgICApO1xuICB9XG5cbiAgQEhvc3RMaXN0ZW5lcignYW5pbWF0aW9uc3RhcnQnLCBbJyRldmVudCddKVxuICBwcm90ZWN0ZWQgb25BbmltYXRpb25TdGFydChldmVudDogQW5pbWF0aW9uRXZlbnQpOiB2b2lkIHtcbiAgICBpZiAoZXZlbnQuYW5pbWF0aW9uTmFtZSA9PT0gJ25ncC1hdXRvZmlsbC1zdGFydCcpIHtcbiAgICAgIHRoaXMuYXV0b2ZpbGxlZC5zZXQodHJ1ZSk7XG4gICAgICB0aGlzLmF1dG9maWxsQ2hhbmdlLmVtaXQodHJ1ZSk7XG4gICAgfVxuXG4gICAgaWYgKGV2ZW50LmFuaW1hdGlvbk5hbWUgPT09ICduZ3AtYXV0b2ZpbGwtZW5kJykge1xuICAgICAgdGhpcy5hdXRvZmlsbGVkLnNldChmYWxzZSk7XG4gICAgICB0aGlzLmF1dG9maWxsQ2hhbmdlLmVtaXQoZmFsc2UpO1xuICAgIH1cbiAgfVxufVxuIl19