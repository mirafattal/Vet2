/**
 * Copyright © 2024 Angular Primitives.
 * https://github.com/ng-primitives/ng-primitives
 *
 * This source code is licensed under the Apache 2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */
import { Directive, ElementRef, HostListener, inject } from '@angular/core';
import { injectSlider } from '../slider/slider.token';
import { NgpSliderTrackToken } from './slider-track.token';
import * as i0 from "@angular/core";
export class NgpSliderTrack {
    constructor() {
        /**
         * Access the slider.
         */
        this.slider = injectSlider();
        /**
         * The element that represents the slider track.
         */
        this.element = inject(ElementRef);
    }
    /**
     * When the slider track is clicked, update the value.
     * @param event The click event.
     */
    handlePointerDown(event) {
        if (this.slider.disabled()) {
            return;
        }
        // get the position the click occurred within the slider track
        const position = this.slider.orientation() === 'horizontal' ? event.clientX : event.clientY;
        const rect = this.element.nativeElement.getBoundingClientRect();
        const percentage = (position - (this.slider.orientation() === 'horizontal' ? rect.left : rect.top)) /
            (this.slider.orientation() === 'horizontal' ? rect.width : rect.height);
        // update the value based on the position
        this.slider.value.set(this.slider.min() + (this.slider.max() - this.slider.min()) * percentage);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: NgpSliderTrack, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "18.2.13", type: NgpSliderTrack, isStandalone: true, selector: "[ngpSliderTrack]", host: { listeners: { "pointerdown": "handlePointerDown($event)" }, properties: { "attr.data-orientation": "slider.orientation()", "attr.data-disabled": "slider.disabled() ? \"\" : null" } }, providers: [{ provide: NgpSliderTrackToken, useExisting: NgpSliderTrack }], exportAs: ["ngpSliderTrack"], ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: NgpSliderTrack, decorators: [{
            type: Directive,
            args: [{
                    standalone: true,
                    selector: '[ngpSliderTrack]',
                    exportAs: 'ngpSliderTrack',
                    providers: [{ provide: NgpSliderTrackToken, useExisting: NgpSliderTrack }],
                    host: {
                        '[attr.data-orientation]': 'slider.orientation()',
                        '[attr.data-disabled]': 'slider.disabled() ? "" : null',
                    },
                }]
        }], propDecorators: { handlePointerDown: [{
                type: HostListener,
                args: ['pointerdown', ['$event']]
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2xpZGVyLXRyYWNrLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL25nLXByaW1pdGl2ZXMvc2xpZGVyL3NyYy9zbGlkZXItdHJhY2svc2xpZGVyLXRyYWNrLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7O0dBTUc7QUFDSCxPQUFPLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxZQUFZLEVBQUUsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzVFLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUN0RCxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQzs7QUFZM0QsTUFBTSxPQUFPLGNBQWM7SUFWM0I7UUFXRTs7V0FFRztRQUNnQixXQUFNLEdBQUcsWUFBWSxFQUFFLENBQUM7UUFFM0M7O1dBRUc7UUFDTSxZQUFPLEdBQUcsTUFBTSxDQUEwQixVQUFVLENBQUMsQ0FBQztLQXNCaEU7SUFwQkM7OztPQUdHO0lBRU8saUJBQWlCLENBQUMsS0FBbUI7UUFDN0MsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxFQUFFLENBQUM7WUFDM0IsT0FBTztRQUNULENBQUM7UUFFRCw4REFBOEQ7UUFDOUQsTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxXQUFXLEVBQUUsS0FBSyxZQUFZLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUM7UUFDNUYsTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMscUJBQXFCLEVBQUUsQ0FBQztRQUNoRSxNQUFNLFVBQVUsR0FDZCxDQUFDLFFBQVEsR0FBRyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsV0FBVyxFQUFFLEtBQUssWUFBWSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDaEYsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFdBQVcsRUFBRSxLQUFLLFlBQVksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBRTFFLHlDQUF5QztRQUN6QyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLEVBQUUsQ0FBQyxHQUFHLFVBQVUsQ0FBQyxDQUFDO0lBQ2xHLENBQUM7K0dBOUJVLGNBQWM7bUdBQWQsY0FBYyw4UEFOZCxDQUFDLEVBQUUsT0FBTyxFQUFFLG1CQUFtQixFQUFFLFdBQVcsRUFBRSxjQUFjLEVBQUUsQ0FBQzs7NEZBTS9ELGNBQWM7a0JBVjFCLFNBQVM7bUJBQUM7b0JBQ1QsVUFBVSxFQUFFLElBQUk7b0JBQ2hCLFFBQVEsRUFBRSxrQkFBa0I7b0JBQzVCLFFBQVEsRUFBRSxnQkFBZ0I7b0JBQzFCLFNBQVMsRUFBRSxDQUFDLEVBQUUsT0FBTyxFQUFFLG1CQUFtQixFQUFFLFdBQVcsZ0JBQWdCLEVBQUUsQ0FBQztvQkFDMUUsSUFBSSxFQUFFO3dCQUNKLHlCQUF5QixFQUFFLHNCQUFzQjt3QkFDakQsc0JBQXNCLEVBQUUsK0JBQStCO3FCQUN4RDtpQkFDRjs4QkFpQlcsaUJBQWlCO3NCQUQxQixZQUFZO3VCQUFDLGFBQWEsRUFBRSxDQUFDLFFBQVEsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IMKpIDIwMjQgQW5ndWxhciBQcmltaXRpdmVzLlxuICogaHR0cHM6Ly9naXRodWIuY29tL25nLXByaW1pdGl2ZXMvbmctcHJpbWl0aXZlc1xuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSAyLjAgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuaW1wb3J0IHsgRGlyZWN0aXZlLCBFbGVtZW50UmVmLCBIb3N0TGlzdGVuZXIsIGluamVjdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgaW5qZWN0U2xpZGVyIH0gZnJvbSAnLi4vc2xpZGVyL3NsaWRlci50b2tlbic7XG5pbXBvcnQgeyBOZ3BTbGlkZXJUcmFja1Rva2VuIH0gZnJvbSAnLi9zbGlkZXItdHJhY2sudG9rZW4nO1xuXG5ARGlyZWN0aXZlKHtcbiAgc3RhbmRhbG9uZTogdHJ1ZSxcbiAgc2VsZWN0b3I6ICdbbmdwU2xpZGVyVHJhY2tdJyxcbiAgZXhwb3J0QXM6ICduZ3BTbGlkZXJUcmFjaycsXG4gIHByb3ZpZGVyczogW3sgcHJvdmlkZTogTmdwU2xpZGVyVHJhY2tUb2tlbiwgdXNlRXhpc3Rpbmc6IE5ncFNsaWRlclRyYWNrIH1dLFxuICBob3N0OiB7XG4gICAgJ1thdHRyLmRhdGEtb3JpZW50YXRpb25dJzogJ3NsaWRlci5vcmllbnRhdGlvbigpJyxcbiAgICAnW2F0dHIuZGF0YS1kaXNhYmxlZF0nOiAnc2xpZGVyLmRpc2FibGVkKCkgPyBcIlwiIDogbnVsbCcsXG4gIH0sXG59KVxuZXhwb3J0IGNsYXNzIE5ncFNsaWRlclRyYWNrIHtcbiAgLyoqXG4gICAqIEFjY2VzcyB0aGUgc2xpZGVyLlxuICAgKi9cbiAgcHJvdGVjdGVkIHJlYWRvbmx5IHNsaWRlciA9IGluamVjdFNsaWRlcigpO1xuXG4gIC8qKlxuICAgKiBUaGUgZWxlbWVudCB0aGF0IHJlcHJlc2VudHMgdGhlIHNsaWRlciB0cmFjay5cbiAgICovXG4gIHJlYWRvbmx5IGVsZW1lbnQgPSBpbmplY3Q8RWxlbWVudFJlZjxIVE1MRWxlbWVudD4+KEVsZW1lbnRSZWYpO1xuXG4gIC8qKlxuICAgKiBXaGVuIHRoZSBzbGlkZXIgdHJhY2sgaXMgY2xpY2tlZCwgdXBkYXRlIHRoZSB2YWx1ZS5cbiAgICogQHBhcmFtIGV2ZW50IFRoZSBjbGljayBldmVudC5cbiAgICovXG4gIEBIb3N0TGlzdGVuZXIoJ3BvaW50ZXJkb3duJywgWyckZXZlbnQnXSlcbiAgcHJvdGVjdGVkIGhhbmRsZVBvaW50ZXJEb3duKGV2ZW50OiBQb2ludGVyRXZlbnQpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5zbGlkZXIuZGlzYWJsZWQoKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIGdldCB0aGUgcG9zaXRpb24gdGhlIGNsaWNrIG9jY3VycmVkIHdpdGhpbiB0aGUgc2xpZGVyIHRyYWNrXG4gICAgY29uc3QgcG9zaXRpb24gPSB0aGlzLnNsaWRlci5vcmllbnRhdGlvbigpID09PSAnaG9yaXpvbnRhbCcgPyBldmVudC5jbGllbnRYIDogZXZlbnQuY2xpZW50WTtcbiAgICBjb25zdCByZWN0ID0gdGhpcy5lbGVtZW50Lm5hdGl2ZUVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgY29uc3QgcGVyY2VudGFnZSA9XG4gICAgICAocG9zaXRpb24gLSAodGhpcy5zbGlkZXIub3JpZW50YXRpb24oKSA9PT0gJ2hvcml6b250YWwnID8gcmVjdC5sZWZ0IDogcmVjdC50b3ApKSAvXG4gICAgICAodGhpcy5zbGlkZXIub3JpZW50YXRpb24oKSA9PT0gJ2hvcml6b250YWwnID8gcmVjdC53aWR0aCA6IHJlY3QuaGVpZ2h0KTtcblxuICAgIC8vIHVwZGF0ZSB0aGUgdmFsdWUgYmFzZWQgb24gdGhlIHBvc2l0aW9uXG4gICAgdGhpcy5zbGlkZXIudmFsdWUuc2V0KHRoaXMuc2xpZGVyLm1pbigpICsgKHRoaXMuc2xpZGVyLm1heCgpIC0gdGhpcy5zbGlkZXIubWluKCkpICogcGVyY2VudGFnZSk7XG4gIH1cbn1cbiJdfQ==