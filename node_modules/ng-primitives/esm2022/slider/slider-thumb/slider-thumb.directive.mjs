/**
 * Copyright © 2024 Angular Primitives.
 * https://github.com/ng-primitives/ng-primitives
 *
 * This source code is licensed under the Apache 2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */
import { Directive, HostListener } from '@angular/core';
import { NgpFocusVisible, NgpHover, NgpPress } from 'ng-primitives/interactions';
import { injectSlider } from '../slider/slider.token';
import { NgpSliderThumbToken } from './slider-thumb.token';
import * as i0 from "@angular/core";
import * as i1 from "ng-primitives/interactions";
export class NgpSliderThumb {
    constructor() {
        /**
         * Access the slider.
         */
        this.slider = injectSlider();
        /**
         * Store the dragging state.
         */
        this.dragging = false;
    }
    handlePointerDown(event) {
        event.preventDefault();
        if (this.slider.disabled()) {
            return;
        }
        this.dragging = true;
    }
    handlePointerUp() {
        if (this.slider.disabled()) {
            return;
        }
        this.dragging = false;
    }
    handlePointerMove(event) {
        if (this.slider.disabled() || !this.dragging) {
            return;
        }
        const rect = this.slider.track()?.element.nativeElement.getBoundingClientRect();
        if (!rect) {
            return;
        }
        const percentage = this.slider.orientation() === 'horizontal'
            ? (event.clientX - rect.left) / rect.width
            : 1 - (event.clientY - rect.top) / rect.height;
        this.slider.value.set(this.slider.min() +
            (this.slider.max() - this.slider.min()) * Math.max(0, Math.min(1, percentage)));
    }
    /**
     * Handle keyboard events.
     * @param event
     */
    handleKeydown(event) {
        const multiplier = event.shiftKey ? 10 : 1;
        switch (event.key) {
            case 'ArrowLeft':
            case 'ArrowDown':
                this.slider.value.update(value => Math.max(value - this.slider.step() * multiplier, this.slider.min()));
                break;
            case 'ArrowRight':
            case 'ArrowUp':
                this.slider.value.update(value => Math.min(value + this.slider.step() * multiplier, this.slider.max()));
                break;
            case 'Home':
                this.slider.value.set(this.slider.min());
                break;
            case 'End':
                this.slider.value.set(this.slider.max());
                break;
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: NgpSliderThumb, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "18.2.13", type: NgpSliderThumb, isStandalone: true, selector: "[ngpSliderThumb]", host: { attributes: { "role": "slider" }, listeners: { "pointerdown": "handlePointerDown($event)", "document:pointerup": "handlePointerUp()", "document:pointermove": "handlePointerMove($event)", "keydown": "handleKeydown($event)" }, properties: { "attr.aria-valuemin": "slider.min()", "attr.aria-valuemax": "slider.max()", "attr.aria-valuenow": "slider.value()", "attr.aria-orientation": "slider.orientation()", "tabindex": "slider.disabled() ? -1 : 0", "attr.data-orientation": "slider.orientation()", "attr.data-disabled": "slider.disabled() ? \"\" : null", "style.inset-inline-start.%": "slider.orientation() === \"horizontal\" ? slider.percentage() : undefined", "style.inset-block-start.%": "slider.orientation() === \"vertical\" ? slider.percentage() : undefined" } }, providers: [{ provide: NgpSliderThumbToken, useExisting: NgpSliderThumb }], exportAs: ["ngpSliderThumb"], hostDirectives: [{ directive: i1.NgpHover }, { directive: i1.NgpFocusVisible }, { directive: i1.NgpPress }], ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: NgpSliderThumb, decorators: [{
            type: Directive,
            args: [{
                    standalone: true,
                    selector: '[ngpSliderThumb]',
                    exportAs: 'ngpSliderThumb',
                    providers: [{ provide: NgpSliderThumbToken, useExisting: NgpSliderThumb }],
                    host: {
                        role: 'slider',
                        '[attr.aria-valuemin]': 'slider.min()',
                        '[attr.aria-valuemax]': 'slider.max()',
                        '[attr.aria-valuenow]': 'slider.value()',
                        '[attr.aria-orientation]': 'slider.orientation()',
                        '[tabindex]': 'slider.disabled() ? -1 : 0',
                        '[attr.data-orientation]': 'slider.orientation()',
                        '[attr.data-disabled]': 'slider.disabled() ? "" : null',
                        '[style.inset-inline-start.%]': 'slider.orientation() === "horizontal" ? slider.percentage() : undefined',
                        '[style.inset-block-start.%]': 'slider.orientation() === "vertical" ? slider.percentage() : undefined',
                    },
                    hostDirectives: [NgpHover, NgpFocusVisible, NgpPress],
                }]
        }], propDecorators: { handlePointerDown: [{
                type: HostListener,
                args: ['pointerdown', ['$event']]
            }], handlePointerUp: [{
                type: HostListener,
                args: ['document:pointerup']
            }], handlePointerMove: [{
                type: HostListener,
                args: ['document:pointermove', ['$event']]
            }], handleKeydown: [{
                type: HostListener,
                args: ['keydown', ['$event']]
            }] } });
//# sourceMappingURL=data:application/json;base64,