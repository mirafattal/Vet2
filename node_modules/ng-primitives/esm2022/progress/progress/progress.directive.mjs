import { Directive, computed, input, numberAttribute } from '@angular/core';
import { NgpProgressToken } from './progress.token';
import * as i0 from "@angular/core";
export class NgpProgress {
    constructor() {
        /**
         * Define the progress value.
         */
        this.value = input(0, {
            alias: 'ngpProgressValue',
            transform: numberAttribute,
        });
        /**
         * Define the progress max value.
         * @default 100
         */
        this.max = input(100, {
            alias: 'ngpProgressMax',
            transform: numberAttribute,
        });
        /**
         * Define a function that returns the progress value label.
         * @param value The current value
         * @param max The maximum value
         * @returns The value label
         */
        this.valueLabel = input((value, max) => `${Math.round((value / max) * 100)}%`);
        /**
         * Get the state of the progress bar.
         * @returns 'indeterminate' | 'loading' | 'complete'
         * @internal
         */
        this.state = computed(() => this.value() == null ? 'indeterminate' : this.value() === this.max() ? 'complete' : 'loading');
        /**
         * Get the progress value label.
         */
        this.label = computed(() => this.valueLabel()(this.value(), this.max()));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: NgpProgress, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "17.1.0", version: "18.2.13", type: NgpProgress, isStandalone: true, selector: "[ngpProgress]", inputs: { value: { classPropertyName: "value", publicName: "ngpProgressValue", isSignal: true, isRequired: false, transformFunction: null }, max: { classPropertyName: "max", publicName: "ngpProgressMax", isSignal: true, isRequired: false, transformFunction: null }, valueLabel: { classPropertyName: "valueLabel", publicName: "valueLabel", isSignal: true, isRequired: false, transformFunction: null } }, host: { attributes: { "role": "progressbar" }, properties: { "attr.aria-valuemax": "max()", "attr.aria-valuemin": "0", "attr.aria-valuenow": "value()", "attr.aria-valuetext": "label()", "attr.data-state": "state()", "attr.data-value": "value()", "attr.data-max": "max()" } }, providers: [{ provide: NgpProgressToken, useExisting: NgpProgress }], ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: NgpProgress, decorators: [{
            type: Directive,
            args: [{
                    selector: '[ngpProgress]',
                    standalone: true,
                    providers: [{ provide: NgpProgressToken, useExisting: NgpProgress }],
                    host: {
                        role: 'progressbar',
                        '[attr.aria-valuemax]': 'max()',
                        '[attr.aria-valuemin]': '0',
                        '[attr.aria-valuenow]': 'value()',
                        '[attr.aria-valuetext]': 'label()',
                        '[attr.data-state]': 'state()',
                        '[attr.data-value]': 'value()',
                        '[attr.data-max]': 'max()',
                    },
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvZ3Jlc3MuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvbmctcHJpbWl0aXZlcy9wcm9ncmVzcy9zcmMvcHJvZ3Jlc3MvcHJvZ3Jlc3MuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQVFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsUUFBUSxFQUFFLEtBQUssRUFBRSxlQUFlLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDNUUsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sa0JBQWtCLENBQUM7O0FBaUJwRCxNQUFNLE9BQU8sV0FBVztJQWZ4QjtRQWdCRTs7V0FFRztRQUNNLFVBQUssR0FBRyxLQUFLLENBQXNCLENBQUMsRUFBRTtZQUM3QyxLQUFLLEVBQUUsa0JBQWtCO1lBQ3pCLFNBQVMsRUFBRSxlQUFlO1NBQzNCLENBQUMsQ0FBQztRQUVIOzs7V0FHRztRQUNNLFFBQUcsR0FBRyxLQUFLLENBQXNCLEdBQUcsRUFBRTtZQUM3QyxLQUFLLEVBQUUsZ0JBQWdCO1lBQ3ZCLFNBQVMsRUFBRSxlQUFlO1NBQzNCLENBQUMsQ0FBQztRQUVIOzs7OztXQUtHO1FBQ00sZUFBVSxHQUFHLEtBQUssQ0FDekIsQ0FBQyxLQUFLLEVBQUUsR0FBRyxFQUFFLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxLQUFLLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxDQUFDLEdBQUcsQ0FDdEQsQ0FBQztRQUVGOzs7O1dBSUc7UUFDZ0IsVUFBSyxHQUFHLFFBQVEsQ0FBQyxHQUFHLEVBQUUsQ0FDdkMsSUFBSSxDQUFDLEtBQUssRUFBRSxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLEtBQUssSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FDOUYsQ0FBQztRQUVGOztXQUVHO1FBQ2dCLFVBQUssR0FBRyxRQUFRLENBQUMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsRUFBRSxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDO0tBQ3hGOytHQXpDWSxXQUFXO21HQUFYLFdBQVcsbXVCQVpYLENBQUMsRUFBRSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsV0FBVyxFQUFFLFdBQVcsRUFBRSxDQUFDOzs0RkFZekQsV0FBVztrQkFmdkIsU0FBUzttQkFBQztvQkFDVCxRQUFRLEVBQUUsZUFBZTtvQkFDekIsVUFBVSxFQUFFLElBQUk7b0JBQ2hCLFNBQVMsRUFBRSxDQUFDLEVBQUUsT0FBTyxFQUFFLGdCQUFnQixFQUFFLFdBQVcsYUFBYSxFQUFFLENBQUM7b0JBQ3BFLElBQUksRUFBRTt3QkFDSixJQUFJLEVBQUUsYUFBYTt3QkFDbkIsc0JBQXNCLEVBQUUsT0FBTzt3QkFDL0Isc0JBQXNCLEVBQUUsR0FBRzt3QkFDM0Isc0JBQXNCLEVBQUUsU0FBUzt3QkFDakMsdUJBQXVCLEVBQUUsU0FBUzt3QkFDbEMsbUJBQW1CLEVBQUUsU0FBUzt3QkFDOUIsbUJBQW1CLEVBQUUsU0FBUzt3QkFDOUIsaUJBQWlCLEVBQUUsT0FBTztxQkFDM0I7aUJBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCDCqSAyMDI0IEFuZ3VsYXIgUHJpbWl0aXZlcy5cbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9uZy1wcmltaXRpdmVzL25nLXByaW1pdGl2ZXNcbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgMi4wIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbmltcG9ydCB7IE51bWJlcklucHV0IH0gZnJvbSAnQGFuZ3VsYXIvY2RrL2NvZXJjaW9uJztcbmltcG9ydCB7IERpcmVjdGl2ZSwgY29tcHV0ZWQsIGlucHV0LCBudW1iZXJBdHRyaWJ1dGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE5ncFByb2dyZXNzVG9rZW4gfSBmcm9tICcuL3Byb2dyZXNzLnRva2VuJztcblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW25ncFByb2dyZXNzXScsXG4gIHN0YW5kYWxvbmU6IHRydWUsXG4gIHByb3ZpZGVyczogW3sgcHJvdmlkZTogTmdwUHJvZ3Jlc3NUb2tlbiwgdXNlRXhpc3Rpbmc6IE5ncFByb2dyZXNzIH1dLFxuICBob3N0OiB7XG4gICAgcm9sZTogJ3Byb2dyZXNzYmFyJyxcbiAgICAnW2F0dHIuYXJpYS12YWx1ZW1heF0nOiAnbWF4KCknLFxuICAgICdbYXR0ci5hcmlhLXZhbHVlbWluXSc6ICcwJyxcbiAgICAnW2F0dHIuYXJpYS12YWx1ZW5vd10nOiAndmFsdWUoKScsXG4gICAgJ1thdHRyLmFyaWEtdmFsdWV0ZXh0XSc6ICdsYWJlbCgpJyxcbiAgICAnW2F0dHIuZGF0YS1zdGF0ZV0nOiAnc3RhdGUoKScsXG4gICAgJ1thdHRyLmRhdGEtdmFsdWVdJzogJ3ZhbHVlKCknLFxuICAgICdbYXR0ci5kYXRhLW1heF0nOiAnbWF4KCknLFxuICB9LFxufSlcbmV4cG9ydCBjbGFzcyBOZ3BQcm9ncmVzcyB7XG4gIC8qKlxuICAgKiBEZWZpbmUgdGhlIHByb2dyZXNzIHZhbHVlLlxuICAgKi9cbiAgcmVhZG9ubHkgdmFsdWUgPSBpbnB1dDxudW1iZXIsIE51bWJlcklucHV0PigwLCB7XG4gICAgYWxpYXM6ICduZ3BQcm9ncmVzc1ZhbHVlJyxcbiAgICB0cmFuc2Zvcm06IG51bWJlckF0dHJpYnV0ZSxcbiAgfSk7XG5cbiAgLyoqXG4gICAqIERlZmluZSB0aGUgcHJvZ3Jlc3MgbWF4IHZhbHVlLlxuICAgKiBAZGVmYXVsdCAxMDBcbiAgICovXG4gIHJlYWRvbmx5IG1heCA9IGlucHV0PG51bWJlciwgTnVtYmVySW5wdXQ+KDEwMCwge1xuICAgIGFsaWFzOiAnbmdwUHJvZ3Jlc3NNYXgnLFxuICAgIHRyYW5zZm9ybTogbnVtYmVyQXR0cmlidXRlLFxuICB9KTtcblxuICAvKipcbiAgICogRGVmaW5lIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIHRoZSBwcm9ncmVzcyB2YWx1ZSBsYWJlbC5cbiAgICogQHBhcmFtIHZhbHVlIFRoZSBjdXJyZW50IHZhbHVlXG4gICAqIEBwYXJhbSBtYXggVGhlIG1heGltdW0gdmFsdWVcbiAgICogQHJldHVybnMgVGhlIHZhbHVlIGxhYmVsXG4gICAqL1xuICByZWFkb25seSB2YWx1ZUxhYmVsID0gaW5wdXQ8TmdwUHJvZ3Jlc3NWYWx1ZUxhYmVsRm4+KFxuICAgICh2YWx1ZSwgbWF4KSA9PiBgJHtNYXRoLnJvdW5kKCh2YWx1ZSAvIG1heCkgKiAxMDApfSVgLFxuICApO1xuXG4gIC8qKlxuICAgKiBHZXQgdGhlIHN0YXRlIG9mIHRoZSBwcm9ncmVzcyBiYXIuXG4gICAqIEByZXR1cm5zICdpbmRldGVybWluYXRlJyB8ICdsb2FkaW5nJyB8ICdjb21wbGV0ZSdcbiAgICogQGludGVybmFsXG4gICAqL1xuICBwcm90ZWN0ZWQgcmVhZG9ubHkgc3RhdGUgPSBjb21wdXRlZCgoKSA9PlxuICAgIHRoaXMudmFsdWUoKSA9PSBudWxsID8gJ2luZGV0ZXJtaW5hdGUnIDogdGhpcy52YWx1ZSgpID09PSB0aGlzLm1heCgpID8gJ2NvbXBsZXRlJyA6ICdsb2FkaW5nJyxcbiAgKTtcblxuICAvKipcbiAgICogR2V0IHRoZSBwcm9ncmVzcyB2YWx1ZSBsYWJlbC5cbiAgICovXG4gIHByb3RlY3RlZCByZWFkb25seSBsYWJlbCA9IGNvbXB1dGVkKCgpID0+IHRoaXMudmFsdWVMYWJlbCgpKHRoaXMudmFsdWUoKSwgdGhpcy5tYXgoKSkpO1xufVxuXG5leHBvcnQgdHlwZSBOZ3BQcm9ncmVzc1ZhbHVlTGFiZWxGbiA9ICh2YWx1ZTogbnVtYmVyLCBtYXg6IG51bWJlcikgPT4gc3RyaW5nO1xuIl19