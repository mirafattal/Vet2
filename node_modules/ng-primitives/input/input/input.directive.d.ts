/**
 * Copyright © 2024 Angular Primitives.
 * https://github.com/ng-primitives/ng-primitives
 *
 * This source code is licensed under the Apache 2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */
import { BooleanInput } from '@angular/cdk/coercion';
import { NgpCanDisable } from 'ng-primitives/internal';
import * as i0 from "@angular/core";
import * as i1 from "ng-primitives/form-field";
import * as i2 from "ng-primitives/interactions";
import * as i3 from "ng-primitives/autofill";
export declare class NgpInput implements NgpCanDisable {
    /**
     * Access the underlying input element.
     * @internal
     */
    private readonly elementRef;
    /**
     * Whether the element is disabled.
     */
    readonly disabled: import("@angular/core").InputSignalWithTransform<boolean, BooleanInput>;
    /**
     * Sync the input value.
     * @internal
     */
    readonly value: import("@angular/core").WritableSignal<string>;
    /**
     * Set the element input value and dispatch input event.
     * @param value The value to set.
     * @description The HTML input event triggers when a user interacts with an input field and changes its value. However, if the value is changed programmatically, the input event doesn't fire automatically, so we manually dispatch the InputEvent.
     * @internal
     */
    setInputValue(value: string): void;
    protected valueDidChange(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<NgpInput, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<NgpInput, "input[ngpInput]", ["ngpInput"], { "disabled": { "alias": "disabled"; "required": false; "isSignal": true; }; }, {}, never, never, true, [{ directive: typeof i1.NgpFormControl; inputs: {}; outputs: {}; }, { directive: typeof i2.NgpHover; inputs: {}; outputs: {}; }, { directive: typeof i2.NgpFocus; inputs: {}; outputs: {}; }, { directive: typeof i2.NgpPress; inputs: {}; outputs: {}; }, { directive: typeof i3.NgpAutofill; inputs: {}; outputs: {}; }]>;
}
