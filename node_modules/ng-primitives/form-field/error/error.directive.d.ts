/**
 * Copyright © 2024 Angular Primitives.
 * https://github.com/ng-primitives/ng-primitives
 *
 * This source code is licensed under the Apache 2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */
import { OnChanges, OnDestroy, SimpleChanges } from '@angular/core';
import * as i0 from "@angular/core";
export declare class NgpError implements OnChanges, OnDestroy {
    /**
     * Access the form field that the description is associated with.
     */
    protected readonly formField: import("ng-primitives/form-field").NgpFormField | null;
    /**
     * The id of the error message. If not provided, a unique id will be generated.
     */
    readonly id: import("@angular/core").InputSignal<string>;
    /**
     * The validator associated with the error message.
     */
    readonly validator: import("@angular/core").InputSignal<string | null>;
    /**
     * Determine if there is an error message.
     */
    protected readonly hasError: import("@angular/core").Signal<boolean>;
    /**
     * Determine whether the validator associated with this error is failing.
     */
    protected readonly state: import("@angular/core").Signal<"fail" | "pass">;
    constructor();
    ngOnChanges(changes: SimpleChanges): void;
    ngOnDestroy(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<NgpError, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<NgpError, "[ngpError]", ["ngpError"], { "id": { "alias": "id"; "required": false; "isSignal": true; }; "validator": { "alias": "ngpErrorValidator"; "required": false; "isSignal": true; }; }, {}, never, never, true, never>;
}
