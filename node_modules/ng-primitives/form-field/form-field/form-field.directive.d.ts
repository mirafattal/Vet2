/**
 * Copyright © 2024 Angular Primitives.
 * https://github.com/ng-primitives/ng-primitives
 *
 * This source code is licensed under the Apache 2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */
import { OnDestroy } from '@angular/core';
import * as i0 from "@angular/core";
export declare class NgpFormField implements OnDestroy {
    /**
     * Store the form label.
     * @internal
     */
    readonly labels: import("@angular/core").WritableSignal<string[]>;
    /**
     * Store the form descriptions.
     * @internal
     */
    readonly descriptions: import("@angular/core").WritableSignal<string[]>;
    /**
     * Store the id of the associated form control.
     * @internal
     */
    readonly formControl: import("@angular/core").WritableSignal<string | null>;
    /**
     * Find any NgControl within the form field.
     * @internal
     */
    private readonly ngControl;
    /**
     * Store the validation error messages.
     * @internal
     */
    readonly errors: import("@angular/core").WritableSignal<string[]>;
    /**
     * Whether the control is pristine.
     * @internal
     */
    readonly pristine: import("@angular/core").WritableSignal<boolean | null>;
    /**
     * Whether the control is touched.
     * @internal
     */
    readonly touched: import("@angular/core").WritableSignal<boolean | null>;
    /**
     * Whether the control is dirty.
     * @internal
     */
    readonly dirty: import("@angular/core").WritableSignal<boolean | null>;
    /**
     * Whether the control is valid.
     */
    readonly valid: import("@angular/core").WritableSignal<boolean | null>;
    /**
     * Whether the control is invalid.
     * @internal
     */
    readonly invalid: import("@angular/core").WritableSignal<boolean | null>;
    /**
     * Whether the control is pending.
     * @internal
     */
    readonly pending: import("@angular/core").WritableSignal<boolean | null>;
    /**
     * Whether the control is disabled.
     * @internal
     */
    readonly disabled: import("@angular/core").WritableSignal<boolean | null>;
    /**
     * Store the current status subscription.
     */
    private subscription?;
    constructor();
    ngOnDestroy(): void;
    /**
     * Setup a listener for the form control status.
     * @param control
     */
    private setupSubscriptions;
    private updateStatus;
    /**
     * Register the id of the associated form control.
     * @param id
     * @internal
     */
    setFormControl(id: string): void;
    /**
     * Register a label with the form field.
     * @param label
     * @internal
     */
    addLabel(label: string): void;
    /**
     * Register a description with the form field.
     * @param description
     * @internal
     */
    addDescription(description: string): void;
    /**
     * Remove the associated form control.
     * @internal
     */
    removeFormControl(): void;
    /**
     * Remove a label from the form field.
     * @param label
     * @internal
     */
    removeLabel(label: string): void;
    /**
     * Remove a description from the form field.
     * @param description
     * @internal
     */
    removeDescription(description: string): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<NgpFormField, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<NgpFormField, "[ngpFormField]", ["ngpFormField"], {}, {}, ["ngControl"], never, true, never>;
}
