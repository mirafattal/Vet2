/**
 * Copyright © 2024 Angular Primitives.
 * https://github.com/ng-primitives/ng-primitives
 *
 * This source code is licensed under the Apache 2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */
import { BooleanInput } from '@angular/cdk/coercion';
import { NgpCanDisable } from 'ng-primitives/internal';
import * as i0 from "@angular/core";
import * as i1 from "ng-primitives/form-field";
import * as i2 from "ng-primitives/interactions";
export declare class NgpCheckbox implements NgpCanDisable {
    /**
     * The id of the checkbox.
     * @internal
     */
    readonly id: import("@angular/core").InputSignal<string>;
    /**
     * Defines whether the checkbox is checked.
     */
    readonly checked: import("@angular/core").ModelSignal<boolean>;
    /**
     * Defines whether the checkbox is indeterminate.
     */
    readonly indeterminate: import("@angular/core").ModelSignal<boolean>;
    /**
     * Whether the checkbox is required.
     */
    readonly required: import("@angular/core").InputSignalWithTransform<boolean, BooleanInput>;
    /**
     * Defines whether the checkbox is disabled.
     */
    readonly disabled: import("@angular/core").InputSignalWithTransform<boolean, BooleanInput>;
    protected onEnter(event: KeyboardEvent): void;
    toggle(event?: Event): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<NgpCheckbox, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<NgpCheckbox, "[ngpCheckbox]", never, { "id": { "alias": "id"; "required": false; "isSignal": true; }; "checked": { "alias": "ngpCheckboxChecked"; "required": false; "isSignal": true; }; "indeterminate": { "alias": "ngpCheckboxIndeterminate"; "required": false; "isSignal": true; }; "required": { "alias": "ngpCheckboxRequired"; "required": false; "isSignal": true; }; "disabled": { "alias": "ngpCheckboxDisabled"; "required": false; "isSignal": true; }; }, { "checked": "ngpCheckboxCheckedChange"; "indeterminate": "ngpCheckboxIndeterminateChange"; }, never, never, true, [{ directive: typeof i1.NgpFormControl; inputs: {}; outputs: {}; }, { directive: typeof i2.NgpHover; inputs: {}; outputs: {}; }, { directive: typeof i2.NgpFocusVisible; inputs: {}; outputs: {}; }, { directive: typeof i2.NgpPress; inputs: {}; outputs: {}; }]>;
}
