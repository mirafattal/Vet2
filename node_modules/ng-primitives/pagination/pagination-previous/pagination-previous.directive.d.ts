/**
 * Copyright © 2024 Angular Primitives.
 * https://github.com/ng-primitives/ng-primitives
 *
 * This source code is licensed under the Apache 2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */
import { BooleanInput } from '@angular/cdk/coercion';
import { NgpCanDisable } from 'ng-primitives/internal';
import * as i0 from "@angular/core";
import * as i1 from "ng-primitives/button";
export declare class NgpPaginationPrevious implements NgpCanDisable {
    /**
     * Access the pagination directive.
     */
    protected readonly pagination: import("ng-primitives/pagination").NgpPagination;
    /**
     * Whether the button is disabled.
     */
    readonly buttonDisabled: import("@angular/core").InputSignalWithTransform<boolean, BooleanInput>;
    /**
     * Whether the button is disabled.
     */
    readonly disabled: import("@angular/core").Signal<boolean>;
    /**
     * Go to the previous page.
     */
    goToPreviousPage(): void;
    /**
     * A click event may not be fired if this is on an anchor tag and the href is empty.
     * This is a workaround to ensure the click event is fired.
     */
    protected onEnter(event: KeyboardEvent): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<NgpPaginationPrevious, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<NgpPaginationPrevious, "[ngpPaginationPrevious]", ["ngpPaginationPrevious"], { "buttonDisabled": { "alias": "ngpPaginationPreviousDisabled"; "required": false; "isSignal": true; }; }, {}, never, never, true, [{ directive: typeof i1.NgpButton; inputs: {}; outputs: {}; }]>;
}
