/**
 * Copyright © 2024 Angular Primitives.
 * https://github.com/ng-primitives/ng-primitives
 *
 * This source code is licensed under the Apache 2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */
import { BooleanInput } from '@angular/cdk/coercion';
import { NgpCanDisable } from 'ng-primitives/internal';
import * as i0 from "@angular/core";
import * as i1 from "ng-primitives/form-field";
import * as i2 from "ng-primitives/interactions";
export declare class NgpSwitch implements NgpCanDisable {
    /**
     * Access the element ref.
     */
    private readonly elementRef;
    /**
     * Determine if the switch is a button
     */
    protected isButton: boolean;
    /**
     * Determine if the switch is checked.
     * @default false
     */
    readonly checked: import("@angular/core").ModelSignal<boolean>;
    /**
     * Determine if the switch is disabled.
     * @default false
     */
    readonly disabled: import("@angular/core").InputSignalWithTransform<boolean, BooleanInput>;
    /**
     * Toggle the checked state.
     */
    toggle(): void;
    /**
     * Handle the keydown event.
     */
    protected onKeyDown(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<NgpSwitch, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<NgpSwitch, "[ngpSwitch]", ["ngpSwitch"], { "checked": { "alias": "ngpSwitchChecked"; "required": false; "isSignal": true; }; "disabled": { "alias": "ngpSwitchDisabled"; "required": false; "isSignal": true; }; }, { "checked": "ngpSwitchCheckedChange"; }, never, never, true, [{ directive: typeof i1.NgpFormControl; inputs: {}; outputs: {}; }, { directive: typeof i2.NgpHover; inputs: {}; outputs: {}; }, { directive: typeof i2.NgpPress; inputs: {}; outputs: {}; }, { directive: typeof i2.NgpFocusVisible; inputs: {}; outputs: {}; }]>;
}
