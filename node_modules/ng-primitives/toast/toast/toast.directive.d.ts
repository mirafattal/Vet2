/**
 * Copyright © 2024 Angular Primitives.
 * https://github.com/ng-primitives/ng-primitives
 *
 * This source code is licensed under the Apache 2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */
import { BooleanInput, NumberInput } from '@angular/cdk/coercion';
import { NgpToastGravity, NgpToastPosition } from './toast-ref';
import * as i0 from "@angular/core";
export interface NgpToastContext {
    dismiss: () => void;
}
export declare class NgpToast {
    private readonly config;
    /** Access the ng-template */
    private readonly template;
    /** Access the view container */
    private readonly viewContainer;
    /** Access the injector */
    private readonly injector;
    /** Access the document */
    private readonly document;
    readonly duration: import("@angular/core").InputSignalWithTransform<number, NumberInput>;
    readonly gravity: import("@angular/core").InputSignal<NgpToastGravity>;
    readonly position: import("@angular/core").InputSignal<NgpToastPosition>;
    readonly stopOnHover: import("@angular/core").InputSignalWithTransform<boolean, BooleanInput>;
    readonly ariaLive: import("@angular/core").InputSignal<string>;
    /** Store the list of toasts */
    private toasts;
    /** Show the toast. */
    show(): void;
    /** Build the toast */
    private createToast;
    /** Position the toast on the DOM */
    private reposition;
    static ɵfac: i0.ɵɵFactoryDeclaration<NgpToast, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<NgpToast, "[ngpToast]", ["ngpToast"], { "duration": { "alias": "ngpToastDuration"; "required": false; "isSignal": true; }; "gravity": { "alias": "ngpToastGravity"; "required": false; "isSignal": true; }; "position": { "alias": "ngpToastPosition"; "required": false; "isSignal": true; }; "stopOnHover": { "alias": "ngpToastStopOnHover"; "required": false; "isSignal": true; }; "ariaLive": { "alias": "ngpToastAriaLive"; "required": false; "isSignal": true; }; }, {}, never, never, true, never>;
}
