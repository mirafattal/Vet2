/**
 * Copyright © 2024 Angular Primitives.
 * https://github.com/ng-primitives/ng-primitives
 *
 * This source code is licensed under the Apache 2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */
import { BooleanInput, NumberInput } from '@angular/cdk/coercion';
import { OnDestroy, TemplateRef } from '@angular/core';
import { Placement } from '@floating-ui/dom';
import * as i0 from "@angular/core";
export declare class NgpPopoverTrigger implements OnDestroy {
    /**
     * Access the trigger element
     */
    private readonly trigger;
    /**
     * Access the view container ref.
     */
    private readonly viewContainerRef;
    /**
     * Access the document.
     */
    private readonly document;
    /**
     * Access the injector.
     */
    private readonly injector;
    /**
     * Access the global popover configuration.
     */
    private readonly config;
    /**
     * Access the disposable utilities
     */
    private readonly disposables;
    /**
     * Access the popover template ref.
     */
    readonly popover: import("@angular/core").InputSignal<TemplateRef<void>>;
    /**
     * The open state of the popover.
     * @default false
     */
    readonly open: import("@angular/core").ModelSignal<boolean>;
    /**
     * Define if the trigger should be disabled.
     * @default false
     */
    readonly disabled: import("@angular/core").InputSignalWithTransform<boolean, BooleanInput>;
    /**
     * Define the placement of the popover relative to the trigger.
     * @default 'top'
     */
    readonly placement: import("@angular/core").InputSignal<Placement>;
    /**
     * Define the offset of the popover relative to the trigger.
     * @default 0
     */
    readonly offset: import("@angular/core").InputSignalWithTransform<number, NumberInput>;
    /**
     * Define the delay before the popover is displayed.
     * @default 0
     */
    readonly showDelay: import("@angular/core").InputSignalWithTransform<number, NumberInput>;
    /**
     * Define the delay before the popover is hidden.
     * @default 0
     */
    readonly hideDelay: import("@angular/core").InputSignalWithTransform<number, NumberInput>;
    /**
     * Define whether the popover should flip when there is not enough space for the popover.
     * @default true
     */
    readonly flip: import("@angular/core").InputSignalWithTransform<boolean, BooleanInput>;
    /**
     * Define the container in which the popover should be attached.
     * @default document.body
     */
    readonly container: import("@angular/core").InputSignal<HTMLElement | null>;
    /**
     * Define whether the popover should close when clicking outside of it.
     * @default true
     */
    readonly closeOnOutsideClick: import("@angular/core").InputSignalWithTransform<boolean, BooleanInput>;
    /**
     * Store the popover view ref.
     */
    private viewRef;
    /**
     * Derive the popover middleware from the provided configuration.
     */
    private readonly middleware;
    /**
     * Store the computed position of the popover.
     * @internal
     */
    readonly position: import("@angular/core").WritableSignal<{
        x: number;
        y: number;
    }>;
    /**
     * Store the state of the popover.
     * @internal
     */
    readonly state: import("@angular/core").WritableSignal<PopoverState>;
    /**
     * The dispose function to stop computing the position of the popover.
     */
    private dispose?;
    /**
     * A document-wide click listener that checks if the click
     * occurred outside of the popover and trigger elements.
     */
    private documentClickListener?;
    constructor();
    ngOnDestroy(): void;
    toggleOpenState(): void;
    private show;
    private hide;
    private onDocumentClick;
    private createPopover;
    private destroyPopover;
    static ɵfac: i0.ɵɵFactoryDeclaration<NgpPopoverTrigger, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<NgpPopoverTrigger, "[ngpPopoverTrigger]", ["ngpPopoverTrigger"], { "popover": { "alias": "ngpPopoverTrigger"; "required": true; "isSignal": true; }; "open": { "alias": "ngpPopoverTriggerOpen"; "required": false; "isSignal": true; }; "disabled": { "alias": "ngpPopoverTriggerDisabled"; "required": false; "isSignal": true; }; "placement": { "alias": "ngpPopoverTriggerPlacement"; "required": false; "isSignal": true; }; "offset": { "alias": "ngpPopoverTriggerOffset"; "required": false; "isSignal": true; }; "showDelay": { "alias": "ngpPopoverTriggerShowDelay"; "required": false; "isSignal": true; }; "hideDelay": { "alias": "ngpPopoverTriggerHideDelay"; "required": false; "isSignal": true; }; "flip": { "alias": "ngpPopoverTriggerFlip"; "required": false; "isSignal": true; }; "container": { "alias": "ngpPopoverTriggerContainer"; "required": false; "isSignal": true; }; "closeOnOutsideClick": { "alias": "ngpPopoverTriggerCloseOnOutsideClick"; "required": false; "isSignal": true; }; }, { "open": "ngpPopoverTriggerOpenChange"; }, never, never, true, never>;
}
export type PopoverState = 'closed' | 'opening' | 'open' | 'closing';
