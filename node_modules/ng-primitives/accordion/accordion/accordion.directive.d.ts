/**
 * Copyright © 2024 Angular Primitives.
 * https://github.com/ng-primitives/ng-primitives
 *
 * This source code is licensed under the Apache 2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */
import { BooleanInput } from '@angular/cdk/coercion';
import * as i0 from "@angular/core";
export declare class NgpAccordion<T> {
    /**
     * Access the global accordion configuration.
     */
    private readonly config;
    /**
     * The type of the accordion.
     */
    readonly type: import("@angular/core").InputSignal<NgpAccordionType>;
    /**
     * Whether the accordion is collapsible.
     */
    readonly collapsible: import("@angular/core").InputSignalWithTransform<boolean, BooleanInput>;
    /**
     * The value of the accordion.
     */
    readonly value: import("@angular/core").ModelSignal<T | T[] | null>;
    /**
     * Whether the accordion is disabled.
     */
    readonly disabled: import("@angular/core").InputSignalWithTransform<boolean, BooleanInput>;
    /**
     * The accordion orientation.
     */
    readonly orientation: import("@angular/core").InputSignal<"vertical" | "horizontal">;
    /**
     * @param value The value to check.
     * @returns Whether the value is open.
     * @internal
     */
    isOpen(value: T): boolean;
    toggle(value: T): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<NgpAccordion<any>, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<NgpAccordion<any>, "[ngpAccordion]", ["ngpAccordion"], { "type": { "alias": "ngpAccordionType"; "required": false; "isSignal": true; }; "collapsible": { "alias": "ngpAccordionCollapsible"; "required": false; "isSignal": true; }; "value": { "alias": "ngpAccordionValue"; "required": false; "isSignal": true; }; "disabled": { "alias": "ngpAccordionDisabled"; "required": false; "isSignal": true; }; "orientation": { "alias": "ngpAccordionOrientation"; "required": false; "isSignal": true; }; }, { "value": "ngpAccordionValueChange"; }, never, never, true, never>;
}
export type NgpAccordionType = 'single' | 'multiple';
