/**
 * Copyright © 2024 Angular Primitives.
 * https://github.com/ng-primitives/ng-primitives
 *
 * This source code is licensed under the Apache 2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */
import { BooleanInput } from '@angular/cdk/coercion';
import * as i0 from "@angular/core";
import * as i1 from "ng-primitives/interactions";
export declare class NgpFileUpload {
    /**
     * Access the host element.
     */
    private readonly elementRef;
    /**
     * The accepted file types.
     */
    readonly fileTypes: import("@angular/core").InputSignalWithTransform<string[] | undefined, string>;
    /**
     * Whether to allow multiple files to be selected.
     */
    readonly multiple: import("@angular/core").InputSignalWithTransform<boolean, BooleanInput>;
    /**
     * Whether to allow the user to select directories.
     */
    readonly directory: import("@angular/core").InputSignalWithTransform<boolean, BooleanInput>;
    /**
     * Whether drag-and-drop is enabled.
     */
    readonly dragAndDrop: import("@angular/core").InputSignalWithTransform<boolean, BooleanInput>;
    /**
     * Whether the file upload is disabled.
     */
    readonly disabled: import("@angular/core").InputSignalWithTransform<boolean, BooleanInput>;
    /**
     * Emits when the user selects files.
     */
    readonly selected: import("@angular/core").OutputEmitterRef<FileList | null>;
    /**
     * Emits when the user drags a file over the file upload.
     */
    readonly dragOver: import("@angular/core").OutputEmitterRef<boolean>;
    /**
     * Whether the user is currently dragging a file over the file upload.
     */
    private readonly isDragOver;
    /**
     * Store the file input element.
     */
    private input;
    constructor();
    protected showFileDialog(): void;
    protected onDragEnter(event: DragEvent): void;
    protected onDragOver(event: DragEvent): void;
    protected onDragLeave(event: DragEvent): void;
    protected onDrop(event: DragEvent): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<NgpFileUpload, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<NgpFileUpload, "[ngpFileUpload]", ["ngpFileUpload"], { "fileTypes": { "alias": "ngpFileUploadFileTypes"; "required": false; "isSignal": true; }; "multiple": { "alias": "ngpFileUploadMultiple"; "required": false; "isSignal": true; }; "directory": { "alias": "ngpFileUploadDirectory"; "required": false; "isSignal": true; }; "dragAndDrop": { "alias": "ngpFileUploadDragDrop"; "required": false; "isSignal": true; }; "disabled": { "alias": "ngpFileUploadDisabled"; "required": false; "isSignal": true; }; }, { "selected": "ngpFileUploadSelected"; "dragOver": "ngpFileUploadDragOver"; }, never, never, true, [{ directive: typeof i1.NgpHover; inputs: {}; outputs: {}; }, { directive: typeof i1.NgpFocusVisible; inputs: {}; outputs: {}; }, { directive: typeof i1.NgpPress; inputs: {}; outputs: {}; }]>;
}
