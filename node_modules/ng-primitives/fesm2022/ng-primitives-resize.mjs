import * as i0 from '@angular/core';
import { inject, ElementRef, NgZone, DestroyRef, output, Directive } from '@angular/core';
import { takeUntilDestroyed } from '@angular/core/rxjs-interop';
import { Observable } from 'rxjs';

/**
 * Copyright © 2024 Angular Primitives.
 * https://github.com/ng-primitives/ng-primitives
 *
 * This source code is licensed under the Apache 2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */
/**
 * A simple helper function to create a resize observer as an RxJS Observable.
 * @param element The element to observe for resize events.
 * @returns The resize event as an Observable.
 */
function fromResizeEvent(element) {
    return new Observable(observer => {
        const resizeObserver = new ResizeObserver(entries => {
            // if there are no entries, ignore the event
            if (!entries.length) {
                return;
            }
            // otherwise, take the first entry and emit the dimensions
            const entry = entries[0];
            if ('borderBoxSize' in entry) {
                const borderSizeEntry = entry['borderBoxSize'];
                // this may be different across browsers so normalize it
                const borderSize = Array.isArray(borderSizeEntry) ? borderSizeEntry[0] : borderSizeEntry;
                observer.next({ width: borderSize['inlineSize'], height: borderSize['blockSize'] });
            }
            else {
                // fallback for browsers that don't support borderBoxSize
                observer.next({
                    width: element.offsetWidth,
                    height: element.offsetHeight,
                });
            }
        });
        resizeObserver.observe(element);
        return () => resizeObserver.disconnect();
    });
}

/**
 * Copyright © 2024 Angular Primitives.
 * https://github.com/ng-primitives/ng-primitives
 *
 * This source code is licensed under the Apache 2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */
class NgpResize {
    constructor() {
        /**
         * Access the element.
         */
        this.element = inject(ElementRef);
        /**
         * Access zone.js
         */
        this.ngZone = inject(NgZone);
        /**
         * Access the destroy ref
         */
        this.destroyRef = inject(DestroyRef);
        /**
         * Emit when the element is resized.
         */
        this.didResize = output({
            alias: 'ngpResize',
        });
    }
    ngOnInit() {
        // oberve the element for resize events
        fromResizeEvent(this.element.nativeElement)
            .pipe(takeUntilDestroyed(this.destroyRef))
            .subscribe(event => this.ngZone.run(() => this.didResize.emit(event)));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: NgpResize, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "18.2.13", type: NgpResize, isStandalone: true, selector: "[ngpResize]", outputs: { didResize: "ngpResize" }, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: NgpResize, decorators: [{
            type: Directive,
            args: [{
                    selector: '[ngpResize]',
                    standalone: true,
                }]
        }] });

/**
 * Copyright © 2024 Angular Primitives.
 * https://github.com/ng-primitives/ng-primitives
 *
 * This source code is licensed under the Apache 2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */

/**
 * Generated bundle index. Do not edit.
 */

export { NgpResize, fromResizeEvent };
//# sourceMappingURL=ng-primitives-resize.mjs.map
