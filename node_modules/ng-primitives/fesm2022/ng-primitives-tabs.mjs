import * as i0 from '@angular/core';
import { InjectionToken, inject, input, booleanAttribute, computed, Directive, HostListener, model, contentChildren } from '@angular/core';
import * as i2 from 'ng-primitives/interactions';
import { NgpHover, NgpFocusVisible, NgpPress } from 'ng-primitives/interactions';
import * as i1 from 'ng-primitives/roving-focus';
import { NgpRovingFocusItem, NgpRovingFocusGroup } from 'ng-primitives/roving-focus';
import { NgpOrientationToken } from 'ng-primitives/internal';
import { uniqueId } from 'ng-primitives/utils';

/**
 * Copyright © 2024 Angular Primitives.
 * https://github.com/ng-primitives/ng-primitives
 *
 * This source code is licensed under the Apache 2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */
const defaultTabsConfig = {
    orientation: 'horizontal',
    activateOnFocus: true,
    wrap: true,
};
const NgpTabsConfigToken = new InjectionToken('NgpTabsConfigToken');
/**
 * Provide the default Tabs configuration
 * @param config The Tabs configuration
 * @returns The provider
 */
function provideTabsConfig(config) {
    return [
        {
            provide: NgpTabsConfigToken,
            useValue: { ...defaultTabsConfig, ...config },
        },
    ];
}
/**
 * Inject the Tabs configuration
 * @returns The global Tabs configuration
 */
function injectTabsConfig() {
    return inject(NgpTabsConfigToken, { optional: true }) ?? defaultTabsConfig;
}

/**
 * Copyright © 2024 Angular Primitives.
 * https://github.com/ng-primitives/ng-primitives
 *
 * This source code is licensed under the Apache 2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */
const NgpTabsetToken = new InjectionToken('NgpTabsetToken');
/**
 * Inject the Tabset directive instance
 * @returns The Tabset directive instance
 */
function injectTabset() {
    return inject(NgpTabsetToken);
}

class NgpTabButton {
    constructor() {
        /**
         * Access the tabset
         */
        this.tabset = injectTabset();
        /**
         * The value of the tab this trigger controls
         */
        this.value = input.required({ alias: 'ngpTabButtonValue' });
        /**
         * Whether the tab is disabled
         * @default false
         */
        this.disabled = input(false, {
            alias: 'ngpTabButtonDisabled',
            transform: booleanAttribute,
        });
        /**
         * Determine the id of the tab button
         * @internal
         */
        this.id = input();
        /**
         * Determine a unique id for the tab button if not provided
         * @internal
         */
        this.defaultId = computed(() => `${this.tabset.id()}-button-${this.value()}`);
        /**
         * Determine the aria-controls of the tab button
         * @internal
         */
        this.ariaControls = computed(() => `${this.tabset.id()}-panel-${this.value()}`);
        /**
         * Whether the tab is active
         */
        this.active = computed(() => this.tabset.value() === this.value());
    }
    /**
     * Select the tab this trigger controls
     */
    select() {
        this.tabset.select(this.value());
    }
    /**
     * On focus select the tab this trigger controls if activateOnFocus is true
     */
    activateOnFocus() {
        if (this.tabset.activateOnFocus()) {
            this.select();
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: NgpTabButton, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "17.1.0", version: "18.2.13", type: NgpTabButton, isStandalone: true, selector: "[ngpTabButton]", inputs: { value: { classPropertyName: "value", publicName: "ngpTabButtonValue", isSignal: true, isRequired: true, transformFunction: null }, disabled: { classPropertyName: "disabled", publicName: "ngpTabButtonDisabled", isSignal: true, isRequired: false, transformFunction: null }, id: { classPropertyName: "id", publicName: "id", isSignal: true, isRequired: false, transformFunction: null } }, host: { attributes: { "role": "tab" }, listeners: { "click": "select()", "focus": "activateOnFocus()" }, properties: { "attr.id": "id() ?? defaultId()", "attr.aria-controls": "ariaControls()", "attr.data-active": "active() ? \"\" : null", "attr.data-disabled": "disabled() ? \"\" : null", "attr.data-orientation": "tabset.orientation()" } }, exportAs: ["ngpTabButton"], hostDirectives: [{ directive: i1.NgpRovingFocusItem }, { directive: i2.NgpHover }, { directive: i2.NgpFocusVisible }, { directive: i2.NgpPress }], ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: NgpTabButton, decorators: [{
            type: Directive,
            args: [{
                    standalone: true,
                    selector: '[ngpTabButton]',
                    exportAs: 'ngpTabButton',
                    host: {
                        role: 'tab',
                        '[attr.id]': 'id() ?? defaultId()',
                        '[attr.aria-controls]': 'ariaControls()',
                        '[attr.data-active]': 'active() ? "" : null',
                        '[attr.data-disabled]': 'disabled() ? "" : null',
                        '[attr.data-orientation]': 'tabset.orientation()',
                    },
                    hostDirectives: [NgpRovingFocusItem, NgpHover, NgpFocusVisible, NgpPress],
                }]
        }], propDecorators: { select: [{
                type: HostListener,
                args: ['click']
            }], activateOnFocus: [{
                type: HostListener,
                args: ['focus']
            }] } });

/**
 * Copyright © 2024 Angular Primitives.
 * https://github.com/ng-primitives/ng-primitives
 *
 * This source code is licensed under the Apache 2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */
class NgpTabList {
    constructor() {
        /**
         * Access the tabset
         */
        this.tabset = injectTabset();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: NgpTabList, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "18.2.13", type: NgpTabList, isStandalone: true, selector: "[ngpTabList]", host: { attributes: { "role": "tablist" }, properties: { "attr.aria-orientation": "tabset.orientation()", "attr.data-orientation": "tabset.orientation()" } }, exportAs: ["ngpTabList"], ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: NgpTabList, decorators: [{
            type: Directive,
            args: [{
                    standalone: true,
                    selector: '[ngpTabList]',
                    exportAs: 'ngpTabList',
                    host: {
                        role: 'tablist',
                        '[attr.aria-orientation]': 'tabset.orientation()',
                        '[attr.data-orientation]': 'tabset.orientation()',
                    },
                }]
        }] });

/**
 * Copyright © 2024 Angular Primitives.
 * https://github.com/ng-primitives/ng-primitives
 *
 * This source code is licensed under the Apache 2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */
const NgpTabPanelToken = new InjectionToken('NgpTabPanelToken');
/**
 * Inject the TabPanel directive instance
 * @returns The TabPanel directive instance
 */
function injectTabPanel() {
    return inject(NgpTabPanelToken);
}

/**
 * Copyright © 2024 Angular Primitives.
 * https://github.com/ng-primitives/ng-primitives
 *
 * This source code is licensed under the Apache 2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */
class NgpTabPanel {
    constructor() {
        /**
         * Access the tabset
         */
        this.tabset = injectTabset();
        /**
         * The value of the tab
         */
        this.value = input.required({ alias: 'ngpTabPanelValue' });
        /**
         * Determine the id of the tab panel
         * @internal
         */
        this.id = input();
        /**
         * Determine a unique id for the tab panel if not provided
         * @internal
         */
        this.defaultId = computed(() => `${this.tabset.id()}-panel-${this.value()}`);
        /**
         * Determine the aria-labelledby of the tab panel
         * @internal
         */
        this.labelledBy = computed(() => `${this.tabset.id()}-button-${this.value()}`);
        /**
         * Whether the tab is active
         */
        this.active = computed(() => this.tabset.selectedTab() === this.value());
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: NgpTabPanel, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "17.1.0", version: "18.2.13", type: NgpTabPanel, isStandalone: true, selector: "[ngpTabPanel]", inputs: { value: { classPropertyName: "value", publicName: "ngpTabPanelValue", isSignal: true, isRequired: true, transformFunction: null }, id: { classPropertyName: "id", publicName: "id", isSignal: true, isRequired: false, transformFunction: null } }, host: { attributes: { "role": "tabpanel", "tabIndex": "0" }, properties: { "attr.aria-labelledby": "labelledBy()", "attr.data-active": "active() ? \"\" : null", "attr.data-orientation": "tabset.orientation()" } }, providers: [{ provide: NgpTabPanelToken, useExisting: NgpTabPanel }], exportAs: ["ngpTabPanel"], ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: NgpTabPanel, decorators: [{
            type: Directive,
            args: [{
                    standalone: true,
                    selector: '[ngpTabPanel]',
                    exportAs: 'ngpTabPanel',
                    providers: [{ provide: NgpTabPanelToken, useExisting: NgpTabPanel }],
                    host: {
                        role: 'tabpanel',
                        tabIndex: '0',
                        '[attr.aria-labelledby]': 'labelledBy()',
                        '[attr.data-active]': 'active() ? "" : null',
                        '[attr.data-orientation]': 'tabset.orientation()',
                    },
                }]
        }] });

class NgpTabset {
    constructor() {
        /**
         * Access the global tabset configuration
         */
        this.config = injectTabsConfig();
        /**
         * Define the id for the tabset
         */
        this.id = input(uniqueId('ngp-tabset'));
        /**
         * Define the active tab
         */
        this.value = model(null, {
            alias: 'ngpTabsetValue',
        });
        /**
         * The orientation of the tabset
         * @default 'horizontal'
         */
        this.orientation = input(this.config.orientation, {
            alias: 'ngpTabsetOrientation',
        });
        /**
         * Whether tabs should activate on focus
         */
        this.activateOnFocus = input(this.config.activateOnFocus, {
            alias: 'ngpTabsetActivateOnFocus',
            transform: booleanAttribute,
        });
        /**
         * Access the tabs within the tabset
         */
        this.panels = contentChildren(NgpTabPanelToken, { descendants: true });
        /**
         * Get the id of the selected tab
         */
        this.selectedTab = computed(() => {
            const panels = this.panels();
            // if there is a value set and a tab with that value exists, return the value
            if (panels.some(panel => panel.value() === this.value())) {
                return this.value();
            }
            // otherwise return the first tab
            return panels[0]?.value();
        });
    }
    /**
     * Select a tab by its value
     * @param value The value of the tab to select
     */
    select(value) {
        this.value.set(value);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: NgpTabset, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "17.2.0", version: "18.2.13", type: NgpTabset, isStandalone: true, selector: "[ngpTabset]", inputs: { id: { classPropertyName: "id", publicName: "id", isSignal: true, isRequired: false, transformFunction: null }, value: { classPropertyName: "value", publicName: "ngpTabsetValue", isSignal: true, isRequired: false, transformFunction: null }, orientation: { classPropertyName: "orientation", publicName: "ngpTabsetOrientation", isSignal: true, isRequired: false, transformFunction: null }, activateOnFocus: { classPropertyName: "activateOnFocus", publicName: "ngpTabsetActivateOnFocus", isSignal: true, isRequired: false, transformFunction: null } }, outputs: { value: "ngpTabsetValueChange" }, host: { properties: { "attr.id": "id()", "attr.data-orientation": "orientation()" } }, providers: [
            { provide: NgpTabsetToken, useExisting: NgpTabset },
            { provide: NgpOrientationToken, useExisting: NgpTabset },
        ], queries: [{ propertyName: "panels", predicate: NgpTabPanelToken, descendants: true, isSignal: true }], exportAs: ["ngpTabset"], hostDirectives: [{ directive: i1.NgpRovingFocusGroup }], ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: NgpTabset, decorators: [{
            type: Directive,
            args: [{
                    standalone: true,
                    selector: '[ngpTabset]',
                    exportAs: 'ngpTabset',
                    providers: [
                        { provide: NgpTabsetToken, useExisting: NgpTabset },
                        { provide: NgpOrientationToken, useExisting: NgpTabset },
                    ],
                    hostDirectives: [NgpRovingFocusGroup],
                    host: {
                        '[attr.id]': 'id()',
                        '[attr.data-orientation]': 'orientation()',
                    },
                }]
        }] });

/**
 * Copyright © 2024 Angular Primitives.
 * https://github.com/ng-primitives/ng-primitives
 *
 * This source code is licensed under the Apache 2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */

/**
 * Generated bundle index. Do not edit.
 */

export { NgpTabButton, NgpTabList, NgpTabPanel, NgpTabPanelToken, NgpTabset, NgpTabsetToken, provideTabsConfig };
//# sourceMappingURL=ng-primitives-tabs.mjs.map
