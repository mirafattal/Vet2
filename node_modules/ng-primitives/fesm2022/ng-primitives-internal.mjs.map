{"version":3,"file":"ng-primitives-internal.mjs","sources":["../../../../packages/ng-primitives/internal/src/disabled/disabled.ts","../../../../packages/ng-primitives/internal/src/interactions/focus-visible.ts","../../../../packages/ng-primitives/internal/src/interactions/hover.ts","../../../../packages/ng-primitives/internal/src/interactions/press.ts","../../../../packages/ng-primitives/internal/src/interactions/button.ts","../../../../packages/ng-primitives/internal/src/interactions/focus.ts","../../../../packages/ng-primitives/internal/src/interactions/index.ts","../../../../packages/ng-primitives/internal/src/orientation/orientation.ts","../../../../packages/ng-primitives/internal/src/style-injector/style-injector.ts","../../../../packages/ng-primitives/internal/src/index.ts","../../../../packages/ng-primitives/internal/src/ng-primitives-internal.ts"],"sourcesContent":["/**\n * Copyright © 2024 Angular Primitives.\n * https://github.com/ng-primitives/ng-primitives\n *\n * This source code is licensed under the Apache 2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport { computed, inject, InjectionToken, signal, Signal } from '@angular/core';\n\nexport const NgpDisabledToken = new InjectionToken<NgpCanDisable>('NgpDisabledToken');\n\nexport interface NgpCanDisable {\n  /**\n   * Whether the element is disabled.\n   */\n  readonly disabled: Signal<boolean>;\n}\n\n/**\n * Determine if we are in a disabled context.\n * @param disabled The disabled signal for the local context.\n * @returns The disabled signal.\n */\nexport function injectDisabled(\n  disabled: Signal<boolean> = signal<boolean>(false),\n): Signal<boolean> {\n  const provider = inject(NgpDisabledToken, { optional: true, self: true });\n\n  return computed(() => provider?.disabled() || disabled());\n}\n","/**\n * Copyright © 2024 Angular Primitives.\n * https://github.com/ng-primitives/ng-primitives\n *\n * This source code is licensed under the Apache 2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport { FocusMonitor, FocusOrigin } from '@angular/cdk/a11y';\nimport { effect, ElementRef, inject, Signal, signal } from '@angular/core';\nimport { takeUntilDestroyed } from '@angular/core/rxjs-interop';\nimport { onBooleanChange } from 'ng-primitives/utils';\n\nexport interface NgpFocusVisibleOptions {\n  disabled?: Signal<boolean>;\n  focusChange?: (value: boolean) => void;\n}\n\nexport interface NgpFocusVisibleState {\n  isFocused: Signal<boolean>;\n}\n\nexport function setupFocusVisible({\n  focusChange,\n  disabled = signal(false),\n}: NgpFocusVisibleOptions): NgpFocusVisibleState {\n  /**\n   * Access the element that the directive is applied to.\n   */\n  const elementRef = inject<ElementRef<HTMLElement>>(ElementRef);\n\n  /**\n   * Access the focus monitor.\n   */\n  const focusMonitor = inject(FocusMonitor);\n\n  /**\n   * Whether the element is currently focused.\n   */\n  const isFocused = signal<boolean>(false);\n\n  // handle focus state\n  focusMonitor\n    .monitor(elementRef.nativeElement)\n    .pipe(takeUntilDestroyed())\n    .subscribe(origin =>\n      // null indicates the element was blurred\n      origin === null ? onBlur() : onFocus(origin),\n    );\n\n  // if the component becomes disabled and it is focused, hide the focus\n  onBooleanChange(disabled, () => focus(false));\n\n  // anytime the focus state changes we want to update the attribute\n  effect(() =>\n    isFocused()\n      ? elementRef.nativeElement.setAttribute('data-focus-visible', '')\n      : elementRef.nativeElement.removeAttribute('data-focus-visible'),\n  );\n\n  function onFocus(origin: FocusOrigin): void {\n    if (disabled() || isFocused()) {\n      return;\n    }\n\n    // for some elements the focus visible state should always appear on focus\n    if (alwaysShowFocus()) {\n      focus(true);\n      return;\n    }\n\n    // if the focus origin is keyboard or program(focused programmatically), then the focus is visible\n    if (origin === 'keyboard' || origin === 'program') {\n      focus(true);\n      return;\n    }\n  }\n\n  function onBlur(): void {\n    if (disabled() || !isFocused()) {\n      return;\n    }\n\n    focus(false);\n  }\n\n  /**\n   * Trigger the focus signal along with the focusChange event.\n   */\n  function focus(value: boolean) {\n    if (isFocused() === value) {\n      return;\n    }\n\n    isFocused.set(value);\n    focusChange?.(value);\n  }\n\n  function alwaysShowFocus(): boolean {\n    const nonTextInputTypes = [\n      'checkbox',\n      'radio',\n      'range',\n      'color',\n      'file',\n      'image',\n      'button',\n      'submit',\n      'reset',\n    ];\n\n    // if this is an input element and it is a text input\n    if (\n      elementRef.nativeElement instanceof HTMLInputElement &&\n      !nonTextInputTypes.includes(elementRef.nativeElement.type)\n    ) {\n      return true;\n    }\n\n    // if this is a textarea\n    if (elementRef.nativeElement instanceof HTMLTextAreaElement) {\n      return true;\n    }\n\n    // if this is an element with contenteditable\n    if (\n      elementRef.nativeElement.isContentEditable ||\n      elementRef.nativeElement.hasAttribute('contenteditable')\n    ) {\n      return true;\n    }\n\n    return false;\n  }\n\n  return {\n    isFocused,\n  };\n}\n","/**\n * Copyright © 2024 Angular Primitives.\n * https://github.com/ng-primitives/ng-primitives\n *\n * This source code is licensed under the Apache 2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport { DOCUMENT, isPlatformBrowser } from '@angular/common';\nimport { effect, ElementRef, inject, Injectable, PLATFORM_ID, Signal, signal } from '@angular/core';\nimport { injectDisposables, onBooleanChange } from 'ng-primitives/utils';\n\n/**\n * We use a service here as this value is a singleton\n * and allows us to register the dom events once.\n */\n@Injectable({\n  providedIn: 'root',\n})\nclass GlobalPointerEvents {\n  /**\n   * Whether global mouse events should be ignored.\n   */\n  ignoreEmulatedMouseEvents: boolean = false;\n\n  /**\n   * Access the document.\n   */\n  private readonly document = inject(DOCUMENT);\n\n  /**\n   * Determine the platform id.\n   */\n  private readonly platformId = inject(PLATFORM_ID);\n\n  constructor() {\n    // we only want to setup events on the client\n    if (isPlatformBrowser(this.platformId)) {\n      this.setupGlobalTouchEvents();\n    }\n  }\n\n  private setupGlobalTouchEvents(): void {\n    this.document.addEventListener('pointerup', this.handleGlobalPointerEvent.bind(this));\n    this.document.addEventListener('touchend', this.setGlobalIgnoreEmulatedMouseEvents.bind(this));\n  }\n\n  private setGlobalIgnoreEmulatedMouseEvents(): void {\n    this.ignoreEmulatedMouseEvents = true;\n    // Clear globalIgnoreEmulatedMouseEvents after a short timeout. iOS fires onPointerEnter\n    // with pointerType=\"mouse\" immediately after onPointerUp and before onFocus. On other\n    // devices that don't have this quirk, we don't want to ignore a mouse hover sometime in\n    // the distant future because a user previously touched the element.\n    setTimeout(() => (this.ignoreEmulatedMouseEvents = false), 50);\n  }\n\n  private handleGlobalPointerEvent(event: PointerEvent): void {\n    if (event.pointerType === 'touch') {\n      this.setGlobalIgnoreEmulatedMouseEvents();\n    }\n  }\n}\n\ninterface NgpHoverOptions {\n  disabled?: Signal<boolean>;\n  hoverStart?: () => void;\n  hoverEnd?: () => void;\n}\n\nexport interface NgpHoverState {\n  hovered: Signal<boolean>;\n}\n\n/**\n * Programatically add the hover functionality to an element.\n * This is useful in cases where we can't necessarily use a HostDirective,\n * because there is a chance the directive has already been used.\n */\nexport function setupHover({\n  hoverStart,\n  hoverEnd,\n  disabled = signal(false),\n}: NgpHoverOptions): NgpHoverState {\n  /**\n   * Access the element.\n   */\n  const elementRef = inject<ElementRef<HTMLElement>>(ElementRef);\n\n  /**\n   * Access the global pointer events handler.\n   */\n  const globalPointerEvents = inject(GlobalPointerEvents);\n\n  /**\n   * Access the disposable helper.\n   */\n  const disposables = injectDisposables();\n\n  /**\n   * Store the current hover state.\n   */\n  const hovered = signal<boolean>(false);\n\n  /**\n   * Whether this element should ignore emulated mouse events.\n   */\n  let ignoreEmulatedMouseEvents: boolean = false;\n\n  /**\n   * Setup event listeners.\n   */\n  disposables.addEventListener(elementRef.nativeElement, 'pointerenter', onPointerEnter);\n  disposables.addEventListener(elementRef.nativeElement, 'pointerleave', onPointerLeave);\n  disposables.addEventListener(elementRef.nativeElement, 'touchstart', onTouchStart);\n  disposables.addEventListener(elementRef.nativeElement, 'mouseenter', onMouseEnter);\n  disposables.addEventListener(elementRef.nativeElement, 'mouseleave', onMouseLeave);\n\n  // anytime the disabled state changes to true, we must reset the hover state\n  if (disabled) {\n    onBooleanChange(disabled, reset);\n  }\n\n  // anytime the hover state changes we want to update the attribute\n  effect(() =>\n    hovered()\n      ? elementRef.nativeElement.setAttribute('data-hover', '')\n      : elementRef.nativeElement.removeAttribute('data-hover'),\n  );\n\n  /**\n   * Reset the hover state.\n   */\n  function reset(): void {\n    onHoverEnd('mouse');\n  }\n\n  /**\n   * Trigger the hover start events.\n   * @param event\n   * @param pointerType\n   */\n  function onHoverStart(event: Event, pointerType: string): void {\n    if (\n      disabled() ||\n      pointerType === 'touch' ||\n      hovered() ||\n      !(event.currentTarget as Element)?.contains(event.target as Element)\n    ) {\n      return;\n    }\n\n    hovered.set(true);\n    hoverStart?.();\n  }\n\n  /**\n   * Trigger the hover end events.\n   * @param pointerType\n   */\n  function onHoverEnd(pointerType: string): void {\n    if (pointerType === 'touch' || !hovered()) {\n      return;\n    }\n\n    hovered.set(false);\n    hoverEnd?.();\n  }\n\n  function onPointerEnter(event: PointerEvent): void {\n    if (globalPointerEvents.ignoreEmulatedMouseEvents && event.pointerType === 'mouse') {\n      return;\n    }\n\n    onHoverStart(event, event.pointerType);\n  }\n\n  function onPointerLeave(event: PointerEvent): void {\n    if (!disabled() && (event.currentTarget as Element)?.contains(event.target as Element)) {\n      onHoverEnd(event.pointerType);\n    }\n  }\n\n  function onTouchStart(): void {\n    ignoreEmulatedMouseEvents = true;\n  }\n\n  function onMouseEnter(event: MouseEvent): void {\n    if (!ignoreEmulatedMouseEvents && !globalPointerEvents.ignoreEmulatedMouseEvents) {\n      onHoverStart(event, 'mouse');\n    }\n\n    ignoreEmulatedMouseEvents = false;\n  }\n\n  function onMouseLeave(event: MouseEvent): void {\n    if (!disabled() && (event.currentTarget as Element)?.contains(event.target as Element)) {\n      onHoverEnd('mouse');\n    }\n  }\n\n  return { hovered };\n}\n","/**\n * Copyright © 2024 Angular Primitives.\n * https://github.com/ng-primitives/ng-primitives\n *\n * This source code is licensed under the Apache 2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport { ElementRef, Signal, effect, inject, signal } from '@angular/core';\nimport { injectDisposables } from 'ng-primitives/utils';\n\ninterface NgpPressState {\n  pressed: Signal<boolean>;\n}\n\ninterface NgpPressOptions {\n  disabled?: Signal<boolean>;\n  pressStart?: () => void;\n  pressEnd?: () => void;\n}\n\nexport function setupPress({\n  pressStart,\n  pressEnd,\n  disabled = signal(false),\n}: NgpPressOptions): NgpPressState {\n  /**\n   * Access the element reference.\n   */\n  const elementRef = inject<ElementRef<HTMLElement>>(ElementRef);\n\n  /**\n   * Access the disposables helper.\n   */\n  const disposables = injectDisposables();\n\n  /**\n   * Whether the element is currently pressed.\n   */\n  const pressed = signal<boolean>(false);\n\n  // setup event listeners\n  disposables.addEventListener(elementRef.nativeElement, 'pointerdown', onPointerDown);\n\n  // anytime the press state changes we want to update the attribute\n  effect(() =>\n    pressed() && !disabled()\n      ? elementRef.nativeElement.setAttribute('data-press', '')\n      : elementRef.nativeElement.removeAttribute('data-press'),\n  );\n\n  /**\n   * Reset the press state.\n   */\n  function reset(): void {\n    // if we are not pressing, then do nothing\n    if (!pressed()) {\n      return;\n    }\n\n    // clear any existing disposables\n    disposableListeners.forEach(dispose => dispose());\n    pressed.set(false);\n    pressEnd?.();\n  }\n\n  /**\n   * Store the list of disposables.\n   */\n  let disposableListeners: (() => void)[] = [];\n\n  function onPointerDown(): void {\n    if (disabled()) {\n      return;\n    }\n\n    // clear any existing disposables\n    disposableListeners.forEach(dispose => dispose());\n\n    // update the press state\n    pressed.set(true);\n    pressStart?.();\n\n    // setup global event listeners to catch events on elements outside the directive\n    const ownerDocument = elementRef.nativeElement.ownerDocument ?? document;\n\n    // if the pointer up event happens on any elements, then we are no longer pressing on this element\n    const pointerUp = disposables.addEventListener(\n      ownerDocument,\n      'pointerup',\n      () => reset(),\n      false,\n    );\n\n    // Instead of relying on the `pointerleave` event, which is not consistently called on iOS Safari,\n    // we use the `pointermove` event to determine if we are still \"pressing\".\n    // By checking if the target is still within the element, we can determine if the press is ongoing.\n    const pointerMove = disposables.addEventListener(\n      ownerDocument,\n      'pointermove',\n      () => onPointerMove as EventListener,\n      false,\n    );\n\n    // if the pointer is cancelled, then we are no longer pressing on this element\n    const pointerCancel = disposables.addEventListener(\n      ownerDocument,\n      'pointercancel',\n      () => reset(),\n      false,\n    );\n\n    disposableListeners = [pointerUp, pointerMove, pointerCancel];\n  }\n\n  function onPointerMove(event: PointerEvent): void {\n    if (\n      elementRef.nativeElement !== event.target &&\n      !elementRef.nativeElement.contains(event.target as Node)\n    ) {\n      reset();\n    }\n  }\n\n  return { pressed };\n}\n","/**\n * Copyright © 2024 Angular Primitives.\n * https://github.com/ng-primitives/ng-primitives\n *\n * This source code is licensed under the Apache 2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport { signal, Signal } from '@angular/core';\nimport { setupFocusVisible } from './focus-visible';\nimport { setupHover } from './hover';\nimport { setupPress } from './press';\n\nexport interface NgpButtonOptions {\n  disabled?: Signal<boolean>;\n}\n\n/**\n * Setup the button interactions without relying on HostDirectives.\n */\nexport function setupButton({ disabled = signal(false) }: NgpButtonOptions): void {\n  setupHover({ disabled });\n  setupPress({ disabled });\n  setupFocusVisible({ disabled });\n}\n","/**\n * Copyright © 2024 Angular Primitives.\n * https://github.com/ng-primitives/ng-primitives\n *\n * This source code is licensed under the Apache 2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport { ElementRef, Signal, effect, inject, signal } from '@angular/core';\nimport { injectDisposables } from 'ng-primitives/utils';\n\nexport interface NgpFocusOptions {\n  disabled?: Signal<boolean>;\n  focus?: () => void;\n  blur?: () => void;\n}\n\nexport interface NgpFocusState {\n  isFocused: Signal<boolean>;\n}\n\nexport function setupFocus({\n  focus,\n  blur,\n  disabled = signal(false),\n}: NgpFocusOptions): NgpFocusState {\n  /**\n   * Access the element reference.\n   */\n  const elementRef = inject<ElementRef<HTMLElement>>(ElementRef);\n\n  /**\n   * Access the disposables helper.\n   */\n  const disposables = injectDisposables();\n\n  /**\n   * Whether the element is currently focused.\n   */\n  const isFocused = signal<boolean>(false);\n\n  // setup event listeners\n  disposables.addEventListener(elementRef.nativeElement, 'focus', onFocus);\n  disposables.addEventListener(elementRef.nativeElement, 'blur', onBlur);\n\n  // anytime the focus state changes we want to update the attribute\n  effect(() =>\n    isFocused()\n      ? elementRef.nativeElement.setAttribute('data-focus', '')\n      : elementRef.nativeElement.removeAttribute('data-focus'),\n  );\n\n  /**\n   * Listen for focus events.\n   * @param event\n   */\n  function onFocus(event: FocusEvent): void {\n    if (disabled()) {\n      return;\n    }\n\n    const ownerDocument = (event.target as HTMLElement)?.ownerDocument ?? document;\n\n    // ensure this element is still focused\n    if (ownerDocument.activeElement === event.target && event.currentTarget === event.target) {\n      focus?.();\n      isFocused.set(true);\n    }\n  }\n\n  /**\n   * Listen for blur events.\n   * @param event\n   */\n  function onBlur(event: FocusEvent): void {\n    if (disabled()) {\n      return;\n    }\n\n    if (event.currentTarget === event.target) {\n      blur?.();\n      isFocused.set(false);\n    }\n  }\n\n  return {\n    isFocused,\n  };\n}\n","/**\n * Copyright © 2024 Angular Primitives.\n * https://github.com/ng-primitives/ng-primitives\n *\n * This source code is licensed under the Apache 2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nexport * from './button';\nexport * from './focus';\nexport * from './focus-visible';\nexport * from './hover';\nexport * from './press';\n","/**\n * Copyright © 2024 Angular Primitives.\n * https://github.com/ng-primitives/ng-primitives\n *\n * This source code is licensed under the Apache 2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport { inject, InjectionToken, signal, Signal } from '@angular/core';\n\nexport const NgpOrientationToken = new InjectionToken<NgpCanOrientate>('NgpOrientationToken');\n\nexport interface NgpCanOrientate {\n  /**\n   * The desired orientation.\n   */\n  readonly orientation: Signal<NgpOrientation>;\n}\n\n/**\n * Determine if we are in a orientation context.\n * @param orientation The orientation signal for the local context.\n * @returns The orientation signal.\n */\nexport function injectOrientation(\n  orientation: Signal<NgpOrientation> = signal<NgpOrientation>('horizontal'),\n): Signal<NgpOrientation> {\n  const provider = inject(NgpOrientationToken, { optional: true });\n\n  return provider ? provider.orientation : orientation;\n}\n\nexport type NgpOrientation = 'horizontal' | 'vertical';\n","/**\n * Copyright © 2024 Angular Primitives.\n * https://github.com/ng-primitives/ng-primitives\n *\n * This source code is licensed under the Apache 2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport { DOCUMENT, isPlatformBrowser } from '@angular/common';\nimport { inject, Injectable, PLATFORM_ID } from '@angular/core';\n\n/**\n * A utility service for injecting styles into the document.\n * Angular doesn't allow directives to specify styles, only components.\n * As we ship directives, occasionally we need to associate styles with them.\n * This service allows us to programmatically inject styles into the document.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class StyleInjector {\n  /**\n   * Access the document.\n   */\n  private readonly document = inject(DOCUMENT);\n\n  /**\n   * Detect the platform.\n   */\n  private readonly platformId = inject(PLATFORM_ID);\n\n  /**\n   * Store the map of style elements with their unique identifiers.\n   */\n  private readonly styleElements = new Map<string, HTMLStyleElement>();\n\n  constructor() {\n    if (isPlatformBrowser(this.platformId)) {\n      this.collectServerStyles();\n    }\n  }\n\n  /**\n   * Inject a style into the document.\n   * @param id The unique identifier for the style.\n   * @param style The style to inject.\n   */\n  add(id: string, style: string): void {\n    if (this.styleElements.has(id)) {\n      return;\n    }\n\n    const styleElement = this.document.createElement('style');\n    styleElement.setAttribute('data-ngp-style', id);\n    styleElement.textContent = style;\n\n    this.document.head.appendChild(styleElement);\n    this.styleElements.set(id, styleElement);\n  }\n\n  /**\n   * Remove a style from the document.\n   * @param id The unique identifier for the style.\n   */\n  remove(id: string): void {\n    const styleElement = this.styleElements.get(id);\n\n    if (styleElement) {\n      this.document.head.removeChild(styleElement);\n      this.styleElements.delete(id);\n    }\n  }\n\n  /**\n   * Collect any styles that were rendered by the server.\n   */\n  private collectServerStyles(): void {\n    const styleElements = this.document.querySelectorAll<HTMLStyleElement>('style[data-ngp-style]');\n\n    styleElements.forEach(styleElement => {\n      const id = styleElement.getAttribute('data-ngp-style');\n\n      if (id) {\n        this.styleElements.set(id, styleElement);\n      }\n    });\n  }\n}\n\nexport function injectStyleInjector(): StyleInjector {\n  return inject(StyleInjector);\n}\n","/**\n * Copyright © 2024 Angular Primitives.\n * https://github.com/ng-primitives/ng-primitives\n *\n * This source code is licensed under the Apache 2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nexport * from './disabled/disabled';\nexport * from './interactions/index';\nexport * from './orientation/orientation';\nexport * from './style-injector/style-injector';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":[],"mappings":"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"}