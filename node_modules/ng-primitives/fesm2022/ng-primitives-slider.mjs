import * as i0 from '@angular/core';
import { InjectionToken, inject, Directive, HostListener, ElementRef, model, input, numberAttribute, booleanAttribute, contentChild, computed } from '@angular/core';
import * as i1 from 'ng-primitives/interactions';
import { NgpHover, NgpFocusVisible, NgpPress } from 'ng-primitives/interactions';
import * as i1$1 from 'ng-primitives/form-field';
import { NgpFormControl } from 'ng-primitives/form-field';
import { NgpDisabledToken } from 'ng-primitives/internal';

/**
 * Copyright © 2024 Angular Primitives.
 * https://github.com/ng-primitives/ng-primitives
 *
 * This source code is licensed under the Apache 2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */
const NgpSliderToken = new InjectionToken('NgpSliderToken');
/**
 * Inject the Slider directive instance
 */
function injectSlider() {
    return inject(NgpSliderToken);
}

/**
 * Copyright © 2024 Angular Primitives.
 * https://github.com/ng-primitives/ng-primitives
 *
 * This source code is licensed under the Apache 2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */
const NgpSliderRangeToken = new InjectionToken('NgpSliderRangeToken');
/**
 * Inject the SliderRange directive instance
 */
function injectSliderRange() {
    return inject(NgpSliderRangeToken);
}

/**
 * Copyright © 2024 Angular Primitives.
 * https://github.com/ng-primitives/ng-primitives
 *
 * This source code is licensed under the Apache 2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */
class NgpSliderRange {
    constructor() {
        /**
         * Access the slider.
         */
        this.slider = injectSlider();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: NgpSliderRange, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "18.2.13", type: NgpSliderRange, isStandalone: true, selector: "[ngpSliderRange]", host: { properties: { "attr.data-orientation": "slider.orientation()", "attr.data-disabled": "slider.disabled() ? \"\" : null", "style.width.%": "slider.orientation() === \"horizontal\" ? slider.percentage() : undefined", "style.height.%": "slider.orientation() === \"vertical\" ? slider.percentage() : undefined" } }, providers: [{ provide: NgpSliderRangeToken, useExisting: NgpSliderRange }], exportAs: ["ngpSliderRange"], ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: NgpSliderRange, decorators: [{
            type: Directive,
            args: [{
                    standalone: true,
                    selector: '[ngpSliderRange]',
                    exportAs: 'ngpSliderRange',
                    providers: [{ provide: NgpSliderRangeToken, useExisting: NgpSliderRange }],
                    host: {
                        '[attr.data-orientation]': 'slider.orientation()',
                        '[attr.data-disabled]': 'slider.disabled() ? "" : null',
                        '[style.width.%]': 'slider.orientation() === "horizontal" ? slider.percentage() : undefined',
                        '[style.height.%]': 'slider.orientation() === "vertical" ? slider.percentage() : undefined',
                    },
                }]
        }] });

/**
 * Copyright © 2024 Angular Primitives.
 * https://github.com/ng-primitives/ng-primitives
 *
 * This source code is licensed under the Apache 2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */
const NgpSliderThumbToken = new InjectionToken('NgpSliderThumbToken');
/**
 * Inject the SliderThumb directive instance
 */
function injectSliderThumb() {
    return inject(NgpSliderThumbToken);
}

/**
 * Copyright © 2024 Angular Primitives.
 * https://github.com/ng-primitives/ng-primitives
 *
 * This source code is licensed under the Apache 2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */
class NgpSliderThumb {
    constructor() {
        /**
         * Access the slider.
         */
        this.slider = injectSlider();
        /**
         * Store the dragging state.
         */
        this.dragging = false;
    }
    handlePointerDown(event) {
        event.preventDefault();
        if (this.slider.disabled()) {
            return;
        }
        this.dragging = true;
    }
    handlePointerUp() {
        if (this.slider.disabled()) {
            return;
        }
        this.dragging = false;
    }
    handlePointerMove(event) {
        if (this.slider.disabled() || !this.dragging) {
            return;
        }
        const rect = this.slider.track()?.element.nativeElement.getBoundingClientRect();
        if (!rect) {
            return;
        }
        const percentage = this.slider.orientation() === 'horizontal'
            ? (event.clientX - rect.left) / rect.width
            : 1 - (event.clientY - rect.top) / rect.height;
        this.slider.value.set(this.slider.min() +
            (this.slider.max() - this.slider.min()) * Math.max(0, Math.min(1, percentage)));
    }
    /**
     * Handle keyboard events.
     * @param event
     */
    handleKeydown(event) {
        const multiplier = event.shiftKey ? 10 : 1;
        switch (event.key) {
            case 'ArrowLeft':
            case 'ArrowDown':
                this.slider.value.update(value => Math.max(value - this.slider.step() * multiplier, this.slider.min()));
                break;
            case 'ArrowRight':
            case 'ArrowUp':
                this.slider.value.update(value => Math.min(value + this.slider.step() * multiplier, this.slider.max()));
                break;
            case 'Home':
                this.slider.value.set(this.slider.min());
                break;
            case 'End':
                this.slider.value.set(this.slider.max());
                break;
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: NgpSliderThumb, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "18.2.13", type: NgpSliderThumb, isStandalone: true, selector: "[ngpSliderThumb]", host: { attributes: { "role": "slider" }, listeners: { "pointerdown": "handlePointerDown($event)", "document:pointerup": "handlePointerUp()", "document:pointermove": "handlePointerMove($event)", "keydown": "handleKeydown($event)" }, properties: { "attr.aria-valuemin": "slider.min()", "attr.aria-valuemax": "slider.max()", "attr.aria-valuenow": "slider.value()", "attr.aria-orientation": "slider.orientation()", "tabindex": "slider.disabled() ? -1 : 0", "attr.data-orientation": "slider.orientation()", "attr.data-disabled": "slider.disabled() ? \"\" : null", "style.inset-inline-start.%": "slider.orientation() === \"horizontal\" ? slider.percentage() : undefined", "style.inset-block-start.%": "slider.orientation() === \"vertical\" ? slider.percentage() : undefined" } }, providers: [{ provide: NgpSliderThumbToken, useExisting: NgpSliderThumb }], exportAs: ["ngpSliderThumb"], hostDirectives: [{ directive: i1.NgpHover }, { directive: i1.NgpFocusVisible }, { directive: i1.NgpPress }], ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: NgpSliderThumb, decorators: [{
            type: Directive,
            args: [{
                    standalone: true,
                    selector: '[ngpSliderThumb]',
                    exportAs: 'ngpSliderThumb',
                    providers: [{ provide: NgpSliderThumbToken, useExisting: NgpSliderThumb }],
                    host: {
                        role: 'slider',
                        '[attr.aria-valuemin]': 'slider.min()',
                        '[attr.aria-valuemax]': 'slider.max()',
                        '[attr.aria-valuenow]': 'slider.value()',
                        '[attr.aria-orientation]': 'slider.orientation()',
                        '[tabindex]': 'slider.disabled() ? -1 : 0',
                        '[attr.data-orientation]': 'slider.orientation()',
                        '[attr.data-disabled]': 'slider.disabled() ? "" : null',
                        '[style.inset-inline-start.%]': 'slider.orientation() === "horizontal" ? slider.percentage() : undefined',
                        '[style.inset-block-start.%]': 'slider.orientation() === "vertical" ? slider.percentage() : undefined',
                    },
                    hostDirectives: [NgpHover, NgpFocusVisible, NgpPress],
                }]
        }], propDecorators: { handlePointerDown: [{
                type: HostListener,
                args: ['pointerdown', ['$event']]
            }], handlePointerUp: [{
                type: HostListener,
                args: ['document:pointerup']
            }], handlePointerMove: [{
                type: HostListener,
                args: ['document:pointermove', ['$event']]
            }], handleKeydown: [{
                type: HostListener,
                args: ['keydown', ['$event']]
            }] } });

/**
 * Copyright © 2024 Angular Primitives.
 * https://github.com/ng-primitives/ng-primitives
 *
 * This source code is licensed under the Apache 2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */
const NgpSliderTrackToken = new InjectionToken('NgpSliderTrackToken');
/**
 * Inject the SliderTrack directive instance
 */
function injectSliderTrack() {
    return inject(NgpSliderTrackToken);
}

/**
 * Copyright © 2024 Angular Primitives.
 * https://github.com/ng-primitives/ng-primitives
 *
 * This source code is licensed under the Apache 2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */
class NgpSliderTrack {
    constructor() {
        /**
         * Access the slider.
         */
        this.slider = injectSlider();
        /**
         * The element that represents the slider track.
         */
        this.element = inject(ElementRef);
    }
    /**
     * When the slider track is clicked, update the value.
     * @param event The click event.
     */
    handlePointerDown(event) {
        if (this.slider.disabled()) {
            return;
        }
        // get the position the click occurred within the slider track
        const position = this.slider.orientation() === 'horizontal' ? event.clientX : event.clientY;
        const rect = this.element.nativeElement.getBoundingClientRect();
        const percentage = (position - (this.slider.orientation() === 'horizontal' ? rect.left : rect.top)) /
            (this.slider.orientation() === 'horizontal' ? rect.width : rect.height);
        // update the value based on the position
        this.slider.value.set(this.slider.min() + (this.slider.max() - this.slider.min()) * percentage);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: NgpSliderTrack, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "18.2.13", type: NgpSliderTrack, isStandalone: true, selector: "[ngpSliderTrack]", host: { listeners: { "pointerdown": "handlePointerDown($event)" }, properties: { "attr.data-orientation": "slider.orientation()", "attr.data-disabled": "slider.disabled() ? \"\" : null" } }, providers: [{ provide: NgpSliderTrackToken, useExisting: NgpSliderTrack }], exportAs: ["ngpSliderTrack"], ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: NgpSliderTrack, decorators: [{
            type: Directive,
            args: [{
                    standalone: true,
                    selector: '[ngpSliderTrack]',
                    exportAs: 'ngpSliderTrack',
                    providers: [{ provide: NgpSliderTrackToken, useExisting: NgpSliderTrack }],
                    host: {
                        '[attr.data-orientation]': 'slider.orientation()',
                        '[attr.data-disabled]': 'slider.disabled() ? "" : null',
                    },
                }]
        }], propDecorators: { handlePointerDown: [{
                type: HostListener,
                args: ['pointerdown', ['$event']]
            }] } });

class NgpSlider {
    constructor() {
        /**
         * The value of the slider.
         */
        this.value = model(0, {
            alias: 'ngpSliderValue',
        });
        /**
         * The minimum value of the slider.
         */
        this.min = input(0, {
            alias: 'ngpSliderMin',
            transform: numberAttribute,
        });
        /**
         * The maximum value of the slider.
         */
        this.max = input(100, {
            alias: 'ngpSliderMax',
            transform: numberAttribute,
        });
        /**
         * The step value of the slider.
         */
        this.step = input(1, {
            alias: 'ngpSliderStep',
            transform: numberAttribute,
        });
        /**
         * The orientation of the slider.
         */
        this.orientation = input('horizontal', {
            alias: 'ngpSliderOrientation',
        });
        /**
         * The disabled state of the slider.
         */
        this.disabled = input(false, {
            alias: 'ngpSliderDisabled',
            transform: booleanAttribute,
        });
        /**
         * Access the slider track.
         */
        this.track = contentChild(NgpSliderTrackToken);
        /**
         * The value as a percentage based on the min and max values.
         */
        this.percentage = computed(() => ((this.value() - this.min()) / (this.max() - this.min())) * 100);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: NgpSlider, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "17.2.0", version: "18.2.13", type: NgpSlider, isStandalone: true, selector: "[ngpSlider]", inputs: { value: { classPropertyName: "value", publicName: "ngpSliderValue", isSignal: true, isRequired: false, transformFunction: null }, min: { classPropertyName: "min", publicName: "ngpSliderMin", isSignal: true, isRequired: false, transformFunction: null }, max: { classPropertyName: "max", publicName: "ngpSliderMax", isSignal: true, isRequired: false, transformFunction: null }, step: { classPropertyName: "step", publicName: "ngpSliderStep", isSignal: true, isRequired: false, transformFunction: null }, orientation: { classPropertyName: "orientation", publicName: "ngpSliderOrientation", isSignal: true, isRequired: false, transformFunction: null }, disabled: { classPropertyName: "disabled", publicName: "ngpSliderDisabled", isSignal: true, isRequired: false, transformFunction: null } }, outputs: { value: "ngpSliderValueChange" }, host: { properties: { "attr.data-orientation": "orientation()" } }, providers: [
            { provide: NgpSliderToken, useExisting: NgpSlider },
            { provide: NgpDisabledToken, useExisting: NgpSlider },
        ], queries: [{ propertyName: "track", first: true, predicate: NgpSliderTrackToken, descendants: true, isSignal: true }], exportAs: ["ngpSlider"], hostDirectives: [{ directive: i1$1.NgpFormControl }], ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: NgpSlider, decorators: [{
            type: Directive,
            args: [{
                    standalone: true,
                    selector: '[ngpSlider]',
                    exportAs: 'ngpSlider',
                    providers: [
                        { provide: NgpSliderToken, useExisting: NgpSlider },
                        { provide: NgpDisabledToken, useExisting: NgpSlider },
                    ],
                    hostDirectives: [NgpFormControl],
                    host: {
                        '[attr.data-orientation]': 'orientation()',
                    },
                }]
        }] });

/**
 * Copyright © 2024 Angular Primitives.
 * https://github.com/ng-primitives/ng-primitives
 *
 * This source code is licensed under the Apache 2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */

/**
 * Generated bundle index. Do not edit.
 */

export { NgpSlider, NgpSliderRange, NgpSliderRangeToken, NgpSliderThumb, NgpSliderThumbToken, NgpSliderToken, NgpSliderTrack, NgpSliderTrackToken };
//# sourceMappingURL=ng-primitives-slider.mjs.map
