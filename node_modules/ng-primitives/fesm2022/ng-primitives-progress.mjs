import * as i0 from '@angular/core';
import { InjectionToken, inject, Directive, input, numberAttribute, computed } from '@angular/core';

/**
 * Copyright © 2024 Angular Primitives.
 * https://github.com/ng-primitives/ng-primitives
 *
 * This source code is licensed under the Apache 2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */
const NgpProgressToken = new InjectionToken('NgpProgressDirective');
/**
 *
 */
function injectProgress() {
    return inject(NgpProgressToken);
}

/**
 * Copyright © 2024 Angular Primitives.
 * https://github.com/ng-primitives/ng-primitives
 *
 * This source code is licensed under the Apache 2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */
class NgpProgressIndicator {
    constructor() {
        /**
         * Access the progress directive.
         */
        this.progress = injectProgress();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: NgpProgressIndicator, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "18.2.13", type: NgpProgressIndicator, isStandalone: true, selector: "[ngpProgressIndicator]", host: { properties: { "attr.data-state": "progress.state()", "attr.data-value": "progress.value()", "attr.data-max": "progress.max()" } }, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: NgpProgressIndicator, decorators: [{
            type: Directive,
            args: [{
                    selector: '[ngpProgressIndicator]',
                    standalone: true,
                    host: {
                        '[attr.data-state]': 'progress.state()',
                        '[attr.data-value]': 'progress.value()',
                        '[attr.data-max]': 'progress.max()',
                    },
                }]
        }] });

class NgpProgress {
    constructor() {
        /**
         * Define the progress value.
         */
        this.value = input(0, {
            alias: 'ngpProgressValue',
            transform: numberAttribute,
        });
        /**
         * Define the progress max value.
         * @default 100
         */
        this.max = input(100, {
            alias: 'ngpProgressMax',
            transform: numberAttribute,
        });
        /**
         * Define a function that returns the progress value label.
         * @param value The current value
         * @param max The maximum value
         * @returns The value label
         */
        this.valueLabel = input((value, max) => `${Math.round((value / max) * 100)}%`);
        /**
         * Get the state of the progress bar.
         * @returns 'indeterminate' | 'loading' | 'complete'
         * @internal
         */
        this.state = computed(() => this.value() == null ? 'indeterminate' : this.value() === this.max() ? 'complete' : 'loading');
        /**
         * Get the progress value label.
         */
        this.label = computed(() => this.valueLabel()(this.value(), this.max()));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: NgpProgress, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "17.1.0", version: "18.2.13", type: NgpProgress, isStandalone: true, selector: "[ngpProgress]", inputs: { value: { classPropertyName: "value", publicName: "ngpProgressValue", isSignal: true, isRequired: false, transformFunction: null }, max: { classPropertyName: "max", publicName: "ngpProgressMax", isSignal: true, isRequired: false, transformFunction: null }, valueLabel: { classPropertyName: "valueLabel", publicName: "valueLabel", isSignal: true, isRequired: false, transformFunction: null } }, host: { attributes: { "role": "progressbar" }, properties: { "attr.aria-valuemax": "max()", "attr.aria-valuemin": "0", "attr.aria-valuenow": "value()", "attr.aria-valuetext": "label()", "attr.data-state": "state()", "attr.data-value": "value()", "attr.data-max": "max()" } }, providers: [{ provide: NgpProgressToken, useExisting: NgpProgress }], ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: NgpProgress, decorators: [{
            type: Directive,
            args: [{
                    selector: '[ngpProgress]',
                    standalone: true,
                    providers: [{ provide: NgpProgressToken, useExisting: NgpProgress }],
                    host: {
                        role: 'progressbar',
                        '[attr.aria-valuemax]': 'max()',
                        '[attr.aria-valuemin]': '0',
                        '[attr.aria-valuenow]': 'value()',
                        '[attr.aria-valuetext]': 'label()',
                        '[attr.data-state]': 'state()',
                        '[attr.data-value]': 'value()',
                        '[attr.data-max]': 'max()',
                    },
                }]
        }] });

/**
 * Copyright © 2024 Angular Primitives.
 * https://github.com/ng-primitives/ng-primitives
 *
 * This source code is licensed under the Apache 2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */

/**
 * Generated bundle index. Do not edit.
 */

export { NgpProgress, NgpProgressIndicator };
//# sourceMappingURL=ng-primitives-progress.mjs.map
