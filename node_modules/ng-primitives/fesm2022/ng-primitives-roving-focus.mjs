import { Directionality } from '@angular/cdk/bidi';
import * as i0 from '@angular/core';
import { InjectionToken, inject, model, input, booleanAttribute, signal, Directive, ElementRef, computed, HostListener } from '@angular/core';
import { injectOrientation } from 'ng-primitives/internal';
import { FocusMonitor } from '@angular/cdk/a11y';

/**
 * Copyright © 2024 Angular Primitives.
 * https://github.com/ng-primitives/ng-primitives
 *
 * This source code is licensed under the Apache 2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */
const NgpRovingFocusGroupToken = new InjectionToken('NgpRovingFocusGroupToken');
/**
 * Inject the RovingFocusGroup directive instance
 * @returns The RovingFocusGroup directive instance
 */
function injectRovingFocusGroup() {
    return inject(NgpRovingFocusGroupToken);
}

class NgpRovingFocusGroup {
    constructor() {
        /**
         * Access the directionality service.
         */
        this.directionality = inject(Directionality);
        /**
         * Determine the orientation of the roving focus group.
         * @default 'vertical'
         */
        this.orientation = model('vertical', {
            alias: 'ngpRovingFocusGroupOrientation',
        });
        /**
         * Determine the orientation of the roving focus group.
         */
        this.groupOrientation = injectOrientation(this.orientation);
        /**
         * Determine if focus should wrap when the end or beginning is reached.
         */
        this.wrap = input(true, {
            alias: 'ngpRovingFocusGroupWrap',
            transform: booleanAttribute,
        });
        /**
         * Determine if the home and end keys should navigate to the first and last items.
         */
        this.homeEnd = input(true, {
            alias: 'ngpRovingFocusGroupHomeEnd',
            transform: booleanAttribute,
        });
        /**
         * Determine if the roving focus group is disabled.
         */
        this.disabled = input(false, {
            alias: 'ngpRovingFocusGroupDisabled',
            transform: booleanAttribute,
        });
        /**
         * Store the items in the roving focus group.
         */
        this.items = signal([]);
        /**
         * Store the active item in the roving focus group.
         * @internal
         */
        this.activeItem = signal(null);
    }
    /**
     * Get the items in the roving focus group sorted by order.
     */
    get sortedItems() {
        return this.items().sort((a, b) => {
            // sort the items by their position in the document
            return a.elementRef.nativeElement.compareDocumentPosition(b.elementRef.nativeElement) &
                Node.DOCUMENT_POSITION_FOLLOWING
                ? -1
                : 1;
        });
    }
    /**
     * Register an item with the roving focus group.
     * @param item The item to register
     * @internal
     */
    register(item) {
        this.items.update(items => [...items, item]);
        // if there is no active item, make the first item the tabbable item
        if (!this.activeItem()) {
            this.activeItem.set(item);
        }
    }
    /**
     * Unregister an item with the roving focus group.
     * @param item The item to unregister
     * @internal
     */
    unregister(item) {
        this.items.update(items => items.filter(i => i !== item));
        // check if the unregistered item is the active item
        if (this.activeItem() === item) {
            // if the active item is unregistered, activate the first item
            this.activeItem.set(this.items()[0] ?? null);
        }
    }
    /**
     * Activate an item in the roving focus group.
     * @param item The item to activate
     * @param origin The origin of the focus change
     */
    setActiveItem(item, origin = 'program') {
        this.activeItem.set(item);
        item?.focus(origin);
    }
    /**
     * Activate the first item in the roving focus group.
     * @param origin The origin of the focus change
     */
    activateFirstItem(origin) {
        // find the first item that is not disabled
        const item = this.sortedItems.find(i => !i.disabled()) ?? null;
        // set the first item as the active item
        this.setActiveItem(item, origin);
    }
    /**
     * Activate the last item in the roving focus group.
     * @param origin The origin of the focus change
     */
    activateLastItem(origin) {
        // find the last item that is not disabled
        const item = [...this.sortedItems].reverse().find(i => !i.disabled()) ?? null;
        // set the last item as the active item
        this.setActiveItem(item, origin);
    }
    /**
     * Activate the next item in the roving focus group.
     * @param origin The origin of the focus change
     */
    activateNextItem(origin) {
        const activeItem = this.activeItem();
        // if there is no active item, activate the first item
        if (!activeItem) {
            this.activateFirstItem(origin);
            return;
        }
        // find the index of the active item
        const index = this.sortedItems.indexOf(activeItem);
        // find the next item that is not disabled
        const item = this.sortedItems.slice(index + 1).find(i => !i.disabled()) ?? null;
        // if we are at the end of the list, wrap to the beginning
        if (!item && this.wrap()) {
            this.activateFirstItem(origin);
            return;
        }
        // if there is no next item, do nothing
        if (!item) {
            return;
        }
        // set the next item as the active item
        this.setActiveItem(item, origin);
    }
    /**
     * Activate the previous item in the roving focus group.
     * @param origin The origin of the focus change
     */
    activatePreviousItem(origin) {
        const activeItem = this.activeItem();
        // if there is no active item, activate the last item
        if (!activeItem) {
            this.activateLastItem(origin);
            return;
        }
        // find the index of the active item
        const index = this.sortedItems.indexOf(activeItem);
        // find the previous item that is not disabled
        const item = this.sortedItems
            .slice(0, index)
            .reverse()
            .find(i => !i.disabled()) ?? null;
        // if we are at the beginning of the list, wrap to the end
        if (!item && this.wrap()) {
            this.activateLastItem(origin);
            return;
        }
        // if there is no previous item, do nothing
        if (!item) {
            return;
        }
        // set the previous item as the active item
        this.setActiveItem(item, origin);
    }
    /**
     * Handle keyboard navigation for the roving focus group.
     * @param event The keyboard event
     * @internal
     */
    onKeydown(event) {
        if (this.disabled()) {
            return;
        }
        switch (event.key) {
            case 'ArrowUp':
                if (this.groupOrientation() === 'vertical') {
                    event.preventDefault();
                    this.activatePreviousItem('keyboard');
                }
                break;
            case 'ArrowDown':
                if (this.groupOrientation() === 'vertical') {
                    event.preventDefault();
                    this.activateNextItem('keyboard');
                }
                break;
            case 'ArrowLeft':
                if (this.groupOrientation() === 'horizontal') {
                    event.preventDefault();
                    if (this.directionality.value === 'ltr') {
                        this.activatePreviousItem('keyboard');
                    }
                    else {
                        this.activateNextItem('keyboard');
                    }
                }
                break;
            case 'ArrowRight':
                if (this.groupOrientation() === 'horizontal') {
                    event.preventDefault();
                    if (this.directionality.value === 'ltr') {
                        this.activateNextItem('keyboard');
                    }
                    else {
                        this.activatePreviousItem('keyboard');
                    }
                }
                break;
            case 'Home':
                if (this.homeEnd()) {
                    event.preventDefault();
                    this.activateFirstItem('keyboard');
                }
                break;
            case 'End':
                if (this.homeEnd()) {
                    event.preventDefault();
                    this.activateLastItem('keyboard');
                }
                break;
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: NgpRovingFocusGroup, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "17.1.0", version: "18.2.13", type: NgpRovingFocusGroup, isStandalone: true, selector: "[ngpRovingFocusGroup]", inputs: { orientation: { classPropertyName: "orientation", publicName: "ngpRovingFocusGroupOrientation", isSignal: true, isRequired: false, transformFunction: null }, wrap: { classPropertyName: "wrap", publicName: "ngpRovingFocusGroupWrap", isSignal: true, isRequired: false, transformFunction: null }, homeEnd: { classPropertyName: "homeEnd", publicName: "ngpRovingFocusGroupHomeEnd", isSignal: true, isRequired: false, transformFunction: null }, disabled: { classPropertyName: "disabled", publicName: "ngpRovingFocusGroupDisabled", isSignal: true, isRequired: false, transformFunction: null } }, outputs: { orientation: "ngpRovingFocusGroupOrientationChange" }, providers: [{ provide: NgpRovingFocusGroupToken, useExisting: NgpRovingFocusGroup }], exportAs: ["ngpRovingFocusGroup"], ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: NgpRovingFocusGroup, decorators: [{
            type: Directive,
            args: [{
                    standalone: true,
                    selector: '[ngpRovingFocusGroup]',
                    exportAs: 'ngpRovingFocusGroup',
                    providers: [{ provide: NgpRovingFocusGroupToken, useExisting: NgpRovingFocusGroup }],
                }]
        }] });

/**
 * Copyright © 2024 Angular Primitives.
 * https://github.com/ng-primitives/ng-primitives
 *
 * This source code is licensed under the Apache 2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */
const NgpRovingFocusItemToken = new InjectionToken('NgpRovingFocusItemToken');
/**
 * Inject the RovingFocusItem directive instance
 * @returns The RovingFocusItem directive instance
 */
function injectRovingFocusItem() {
    return inject(NgpRovingFocusItemToken);
}

/**
 * Copyright © 2024 Angular Primitives.
 * https://github.com/ng-primitives/ng-primitives
 *
 * This source code is licensed under the Apache 2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */
class NgpRovingFocusItem {
    constructor() {
        /**
         * Access the group the roving focus item belongs to.
         */
        this.group = injectRovingFocusGroup();
        /**
         * Access the focus monitor service.
         */
        this.focusMonitor = inject(FocusMonitor);
        /**
         * Access the element the roving focus item is attached to.
         */
        this.elementRef = inject(ElementRef);
        /**
         * Define if the item is disabled.
         */
        this.disabled = input(false, {
            alias: 'ngpRovingFocusItemDisabled',
            transform: booleanAttribute,
        });
        /**
         * Derive the tabindex of the roving focus item.
         */
        this.tabindex = computed(() => !this.group.disabled() && this.group.activeItem() === this ? 0 : -1);
    }
    /**
     * Initialize the roving focus item.
     */
    ngOnInit() {
        this.group.register(this);
    }
    /**
     * Clean up the roving focus item.
     */
    ngOnDestroy() {
        this.group.unregister(this);
    }
    /**
     * Forward the keydown event to the roving focus group.
     * @param event The keyboard event
     */
    onKeydown(event) {
        if (this.disabled()) {
            return;
        }
        this.group.onKeydown(event);
    }
    /**
     * Activate the roving focus item on click.
     */
    activate() {
        if (this.disabled()) {
            return;
        }
        this.group.setActiveItem(this, 'mouse');
    }
    /**
     * Focus the roving focus item.
     * @param origin The origin of the focus
     */
    focus(origin) {
        this.focusMonitor.focusVia(this.elementRef, origin);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: NgpRovingFocusItem, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "17.1.0", version: "18.2.13", type: NgpRovingFocusItem, isStandalone: true, selector: "[ngpRovingFocusItem]", inputs: { disabled: { classPropertyName: "disabled", publicName: "ngpRovingFocusItemDisabled", isSignal: true, isRequired: false, transformFunction: null } }, host: { listeners: { "keydown": "onKeydown($event)", "click": "activate()" }, properties: { "attr.tabindex": "tabindex()" } }, providers: [{ provide: NgpRovingFocusItemToken, useExisting: NgpRovingFocusItem }], exportAs: ["ngpRovingFocusItem"], ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: NgpRovingFocusItem, decorators: [{
            type: Directive,
            args: [{
                    standalone: true,
                    selector: '[ngpRovingFocusItem]',
                    exportAs: 'ngpRovingFocusItem',
                    providers: [{ provide: NgpRovingFocusItemToken, useExisting: NgpRovingFocusItem }],
                    host: {
                        '[attr.tabindex]': 'tabindex()',
                    },
                }]
        }], propDecorators: { onKeydown: [{
                type: HostListener,
                args: ['keydown', ['$event']]
            }], activate: [{
                type: HostListener,
                args: ['click']
            }] } });

/**
 * Copyright © 2024 Angular Primitives.
 * https://github.com/ng-primitives/ng-primitives
 *
 * This source code is licensed under the Apache 2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */

/**
 * Generated bundle index. Do not edit.
 */

export { NgpRovingFocusGroup, NgpRovingFocusGroupToken, NgpRovingFocusItem, NgpRovingFocusItemToken, injectRovingFocusGroup };
//# sourceMappingURL=ng-primitives-roving-focus.mjs.map
