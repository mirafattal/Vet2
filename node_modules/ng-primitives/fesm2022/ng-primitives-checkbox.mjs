import * as i0 from '@angular/core';
import { InjectionToken, inject, input, model, booleanAttribute, Directive, HostListener } from '@angular/core';
import * as i1 from 'ng-primitives/form-field';
import { NgpFormControl } from 'ng-primitives/form-field';
import * as i2 from 'ng-primitives/interactions';
import { NgpHover, NgpFocusVisible, NgpPress } from 'ng-primitives/interactions';
import { NgpDisabledToken } from 'ng-primitives/internal';
import { uniqueId } from 'ng-primitives/utils';

/**
 * Copyright © 2024 Angular Primitives.
 * https://github.com/ng-primitives/ng-primitives
 *
 * This source code is licensed under the Apache 2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */
const NgpCheckboxToken = new InjectionToken('NgpCheckboxToken');
/**
 * Inject the Checkbox directive instance
 * @returns The Checkbox directive instance
 */
function injectCheckbox() {
    return inject(NgpCheckboxToken);
}

class NgpCheckbox {
    constructor() {
        /**
         * The id of the checkbox.
         * @internal
         */
        this.id = input(uniqueId('ngp-checkbox'));
        /**
         * Defines whether the checkbox is checked.
         */
        this.checked = model(false, {
            alias: 'ngpCheckboxChecked',
        });
        /**
         * Defines whether the checkbox is indeterminate.
         */
        this.indeterminate = model(false, {
            alias: 'ngpCheckboxIndeterminate',
        });
        /**
         * Whether the checkbox is required.
         */
        this.required = input(false, {
            alias: 'ngpCheckboxRequired',
            transform: booleanAttribute,
        });
        /**
         * Defines whether the checkbox is disabled.
         */
        this.disabled = input(false, {
            alias: 'ngpCheckboxDisabled',
            transform: booleanAttribute,
        });
    }
    onEnter(event) {
        // According to WAI ARIA, Checkboxes don't activate on enter keypress
        event.preventDefault();
    }
    toggle(event) {
        if (this.disabled()) {
            return;
        }
        // prevent this firing twice in cases where the label is clicked and the checkbox is clicked by the one event
        event?.preventDefault();
        this.checked.set(this.indeterminate() ? true : !this.checked());
        // if the checkbox was indeterminate, it isn't anymore
        if (this.indeterminate()) {
            this.indeterminate.set(false);
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: NgpCheckbox, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "17.1.0", version: "18.2.13", type: NgpCheckbox, isStandalone: true, selector: "[ngpCheckbox]", inputs: { id: { classPropertyName: "id", publicName: "id", isSignal: true, isRequired: false, transformFunction: null }, checked: { classPropertyName: "checked", publicName: "ngpCheckboxChecked", isSignal: true, isRequired: false, transformFunction: null }, indeterminate: { classPropertyName: "indeterminate", publicName: "ngpCheckboxIndeterminate", isSignal: true, isRequired: false, transformFunction: null }, required: { classPropertyName: "required", publicName: "ngpCheckboxRequired", isSignal: true, isRequired: false, transformFunction: null }, disabled: { classPropertyName: "disabled", publicName: "ngpCheckboxDisabled", isSignal: true, isRequired: false, transformFunction: null } }, outputs: { checked: "ngpCheckboxCheckedChange", indeterminate: "ngpCheckboxIndeterminateChange" }, host: { attributes: { "role": "checkbox" }, listeners: { "keydown.enter": "onEnter($event)", "click": "toggle($event)", "keydown.space": "toggle($event)" }, properties: { "attr.aria-checked": "indeterminate() ? \"mixed\" : checked()", "attr.data-checked": "checked() ? \"\" : null", "attr.data-indeterminate": "indeterminate() ? \"\" : null", "tabindex": "disabled() ? -1 : 0" } }, providers: [
            { provide: NgpCheckboxToken, useExisting: NgpCheckbox },
            { provide: NgpDisabledToken, useExisting: NgpCheckbox },
        ], hostDirectives: [{ directive: i1.NgpFormControl }, { directive: i2.NgpHover }, { directive: i2.NgpFocusVisible }, { directive: i2.NgpPress }], ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: NgpCheckbox, decorators: [{
            type: Directive,
            args: [{
                    selector: '[ngpCheckbox]',
                    standalone: true,
                    providers: [
                        { provide: NgpCheckboxToken, useExisting: NgpCheckbox },
                        { provide: NgpDisabledToken, useExisting: NgpCheckbox },
                    ],
                    hostDirectives: [NgpFormControl, NgpHover, NgpFocusVisible, NgpPress],
                    host: {
                        role: 'checkbox',
                        '[attr.aria-checked]': 'indeterminate() ? "mixed" : checked()',
                        '[attr.data-checked]': 'checked() ? "" : null',
                        '[attr.data-indeterminate]': 'indeterminate() ? "" : null',
                        '[tabindex]': 'disabled() ? -1 : 0',
                    },
                }]
        }], propDecorators: { onEnter: [{
                type: HostListener,
                args: ['keydown.enter', ['$event']]
            }], toggle: [{
                type: HostListener,
                args: ['click', ['$event']]
            }, {
                type: HostListener,
                args: ['keydown.space', ['$event']]
            }] } });

/**
 * Copyright © 2024 Angular Primitives.
 * https://github.com/ng-primitives/ng-primitives
 *
 * This source code is licensed under the Apache 2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */

/**
 * Generated bundle index. Do not edit.
 */

export { NgpCheckbox, NgpCheckboxToken };
//# sourceMappingURL=ng-primitives-checkbox.mjs.map
