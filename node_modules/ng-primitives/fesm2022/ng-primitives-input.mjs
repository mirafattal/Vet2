import * as i0 from '@angular/core';
import { InjectionToken, inject, ElementRef, input, booleanAttribute, signal, Directive, HostListener } from '@angular/core';
import * as i3 from 'ng-primitives/autofill';
import { NgpAutofill } from 'ng-primitives/autofill';
import * as i1 from 'ng-primitives/form-field';
import { NgpFormControl } from 'ng-primitives/form-field';
import * as i2 from 'ng-primitives/interactions';
import { NgpHover, NgpFocus, NgpPress } from 'ng-primitives/interactions';
import { NgpDisabledToken } from 'ng-primitives/internal';

/**
 * Copyright © 2024 Angular Primitives.
 * https://github.com/ng-primitives/ng-primitives
 *
 * This source code is licensed under the Apache 2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */
const NgpInputToken = new InjectionToken('NgpInputToken');
/**
 * Inject the Input directive instance
 */
function injectInput() {
    return inject(NgpInputToken);
}

class NgpInput {
    constructor() {
        /**
         * Access the underlying input element.
         * @internal
         */
        this.elementRef = inject(ElementRef);
        /**
         * Whether the element is disabled.
         */
        this.disabled = input(false, {
            transform: booleanAttribute,
        });
        /**
         * Sync the input value.
         * @internal
         */
        this.value = signal(this.elementRef.nativeElement.value);
    }
    /**
     * Set the element input value and dispatch input event.
     * @param value The value to set.
     * @description The HTML input event triggers when a user interacts with an input field and changes its value. However, if the value is changed programmatically, the input event doesn't fire automatically, so we manually dispatch the InputEvent.
     * @internal
     */
    setInputValue(value) {
        this.elementRef.nativeElement.value = value;
        this.elementRef.nativeElement.dispatchEvent(new InputEvent('input'));
    }
    valueDidChange() {
        this.value.set(this.elementRef.nativeElement.value);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: NgpInput, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "17.1.0", version: "18.2.13", type: NgpInput, isStandalone: true, selector: "input[ngpInput]", inputs: { disabled: { classPropertyName: "disabled", publicName: "disabled", isSignal: true, isRequired: false, transformFunction: null } }, host: { listeners: { "input": "valueDidChange()" } }, providers: [
            { provide: NgpInputToken, useExisting: NgpInput },
            { provide: NgpDisabledToken, useExisting: NgpInput },
        ], exportAs: ["ngpInput"], hostDirectives: [{ directive: i1.NgpFormControl }, { directive: i2.NgpHover }, { directive: i2.NgpFocus }, { directive: i2.NgpPress }, { directive: i3.NgpAutofill }], ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: NgpInput, decorators: [{
            type: Directive,
            args: [{
                    standalone: true,
                    selector: 'input[ngpInput]',
                    exportAs: 'ngpInput',
                    providers: [
                        { provide: NgpInputToken, useExisting: NgpInput },
                        { provide: NgpDisabledToken, useExisting: NgpInput },
                    ],
                    hostDirectives: [NgpFormControl, NgpHover, NgpFocus, NgpPress, NgpAutofill],
                }]
        }], propDecorators: { valueDidChange: [{
                type: HostListener,
                args: ['input']
            }] } });

/**
 * Copyright © 2024 Angular Primitives.
 * https://github.com/ng-primitives/ng-primitives
 *
 * This source code is licensed under the Apache 2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */

/**
 * Generated bundle index. Do not edit.
 */

export { NgpInput, NgpInputToken };
//# sourceMappingURL=ng-primitives-input.mjs.map
