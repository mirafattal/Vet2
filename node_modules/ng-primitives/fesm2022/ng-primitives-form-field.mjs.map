{"version":3,"file":"ng-primitives-form-field.mjs","sources":["../../../../packages/ng-primitives/form-field/src/form-field/form-field.token.ts","../../../../packages/ng-primitives/form-field/src/form-field/form-field.directive.ts","../../../../packages/ng-primitives/form-field/src/label/label.token.ts","../../../../packages/ng-primitives/form-field/src/label/label.directive.ts","../../../../packages/ng-primitives/form-field/src/description/description.token.ts","../../../../packages/ng-primitives/form-field/src/description/description.directive.ts","../../../../packages/ng-primitives/form-field/src/form-control/form-control.token.ts","../../../../packages/ng-primitives/form-field/src/form-control/form-control.directive.ts","../../../../packages/ng-primitives/form-field/src/error/error.token.ts","../../../../packages/ng-primitives/form-field/src/error/error.directive.ts","../../../../packages/ng-primitives/form-field/src/index.ts","../../../../packages/ng-primitives/form-field/src/ng-primitives-form-field.ts"],"sourcesContent":["/**\n * Copyright © 2024 Angular Primitives.\n * https://github.com/ng-primitives/ng-primitives\n *\n * This source code is licensed under the Apache 2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport { InjectionToken, inject } from '@angular/core';\nimport type { NgpFormField } from './form-field.directive';\n\nexport const NgpFormFieldToken = new InjectionToken<NgpFormField>('NgpFormFieldToken');\n\n/**\n * Inject the FormField directive instance\n * @param primitive\n */\nexport function injectFormField(): NgpFormField | null {\n  return inject(NgpFormFieldToken, { optional: true });\n}\n","/**\n * Copyright © 2024 Angular Primitives.\n * https://github.com/ng-primitives/ng-primitives\n *\n * This source code is licensed under the Apache 2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport { Directive, OnDestroy, contentChild, signal } from '@angular/core';\nimport { NgControl } from '@angular/forms';\nimport { onChange } from 'ng-primitives/utils';\nimport { Subscription } from 'rxjs';\nimport { NgpFormFieldToken } from './form-field.token';\n\n@Directive({\n  standalone: true,\n  selector: '[ngpFormField]',\n  exportAs: 'ngpFormField',\n  providers: [{ provide: NgpFormFieldToken, useExisting: NgpFormField }],\n  host: {\n    '[attr.data-invalid]': 'invalid() ? \"\" : null',\n    '[attr.data-valid]': 'valid() ? \"\" : null',\n    '[attr.data-touched]': 'touched() ? \"\" : null',\n    '[attr.data-pristine]': 'pristine() ? \"\" : null',\n    '[attr.data-dirty]': 'dirty() ? \"\" : null',\n    '[attr.data-pending]': 'pending() ? \"\" : null',\n    '[attr.data-disabled]': 'disabled() ? \"\" : null',\n  },\n})\nexport class NgpFormField implements OnDestroy {\n  /**\n   * Store the form label.\n   * @internal\n   */\n  readonly labels = signal<string[]>([]);\n\n  /**\n   * Store the form descriptions.\n   * @internal\n   */\n  readonly descriptions = signal<string[]>([]);\n\n  /**\n   * Store the id of the associated form control.\n   * @internal\n   */\n  readonly formControl = signal<string | null>(null);\n\n  /**\n   * Find any NgControl within the form field.\n   * @internal\n   */\n  private readonly ngControl = contentChild(NgControl);\n\n  /**\n   * Store the validation error messages.\n   * @internal\n   */\n  readonly errors = signal<string[]>([]);\n\n  /**\n   * Whether the control is pristine.\n   * @internal\n   */\n  readonly pristine = signal<boolean | null>(null);\n\n  /**\n   * Whether the control is touched.\n   * @internal\n   */\n  readonly touched = signal<boolean | null>(null);\n\n  /**\n   * Whether the control is dirty.\n   * @internal\n   */\n  readonly dirty = signal<boolean | null>(null);\n\n  /**\n   * Whether the control is valid.\n   */\n  readonly valid = signal<boolean | null>(null);\n\n  /**\n   * Whether the control is invalid.\n   * @internal\n   */\n  readonly invalid = signal<boolean | null>(null);\n\n  /**\n   * Whether the control is pending.\n   * @internal\n   */\n  readonly pending = signal<boolean | null>(null);\n\n  /**\n   * Whether the control is disabled.\n   * @internal\n   */\n  readonly disabled = signal<boolean | null>(null);\n\n  /**\n   * Store the current status subscription.\n   */\n  private subscription?: Subscription;\n\n  constructor() {\n    // any time the ngControl changes, setup the subscriptions.\n    onChange(this.ngControl, this.setupSubscriptions.bind(this));\n  }\n\n  ngOnDestroy(): void {\n    this.subscription?.unsubscribe();\n  }\n\n  /**\n   * Setup a listener for the form control status.\n   * @param control\n   */\n  private setupSubscriptions(control: NgControl | null | undefined): void {\n    // Unsubscribe from the previous subscriptions.\n    this.subscription?.unsubscribe();\n\n    // set the initial values\n    this.updateStatus();\n\n    // Listen for changes to the form control.\n    this.subscription = control?.valueChanges?.subscribe(this.updateStatus.bind(this));\n  }\n\n  private updateStatus(): void {\n    const control = this.ngControl();\n\n    if (!control) {\n      return;\n    }\n\n    this.pristine.set(control.pristine);\n    this.touched.set(control.touched);\n    this.dirty.set(control.dirty);\n    this.valid.set(control.valid);\n    this.invalid.set(control.invalid);\n    this.pending.set(control.pending);\n    this.disabled.set(control.disabled);\n    this.errors.set(control?.errors ? Object.keys(control.errors) : []);\n  }\n\n  /**\n   * Register the id of the associated form control.\n   * @param id\n   * @internal\n   */\n  setFormControl(id: string): void {\n    this.formControl.set(id);\n  }\n\n  /**\n   * Register a label with the form field.\n   * @param label\n   * @internal\n   */\n  addLabel(label: string): void {\n    this.labels.update(labels => [...labels, label]);\n  }\n\n  /**\n   * Register a description with the form field.\n   * @param description\n   * @internal\n   */\n  addDescription(description: string): void {\n    this.descriptions.update(descriptions => [...descriptions, description]);\n  }\n\n  /**\n   * Remove the associated form control.\n   * @internal\n   */\n  removeFormControl(): void {\n    this.formControl.set(null);\n  }\n\n  /**\n   * Remove a label from the form field.\n   * @param label\n   * @internal\n   */\n  removeLabel(label: string): void {\n    this.labels.update(labels => labels.filter(l => l !== label));\n  }\n\n  /**\n   * Remove a description from the form field.\n   * @param description\n   * @internal\n   */\n  removeDescription(description: string): void {\n    this.descriptions.update(descriptions => descriptions.filter(d => d !== description));\n  }\n}\n","/**\n * Copyright © 2024 Angular Primitives.\n * https://github.com/ng-primitives/ng-primitives\n *\n * This source code is licensed under the Apache 2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport { InjectionToken, inject } from '@angular/core';\nimport type { NgpLabel } from './label.directive';\n\nexport const NgpLabelToken = new InjectionToken<NgpLabel>('NgpLabelToken');\n\n/**\n * Inject the Label directive instance\n */\nexport function injectLabel(): NgpLabel {\n  return inject(NgpLabelToken);\n}\n","/**\n * Copyright © 2024 Angular Primitives.\n * https://github.com/ng-primitives/ng-primitives\n *\n * This source code is licensed under the Apache 2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport {\n  Directive,\n  ElementRef,\n  HostListener,\n  computed,\n  effect,\n  inject,\n  input,\n} from '@angular/core';\nimport { uniqueId } from 'ng-primitives/utils';\nimport { injectFormField } from '../form-field/form-field.token';\nimport { NgpLabelToken } from './label.token';\n\n@Directive({\n  standalone: true,\n  selector: '[ngpLabel]',\n  exportAs: 'ngpLabel',\n  providers: [{ provide: NgpLabelToken, useExisting: NgpLabel }],\n  host: {\n    '[attr.id]': 'id()',\n    '[attr.for]': 'htmlFor()',\n    '[attr.data-invalid]': 'formField?.invalid() ? \"\" : null',\n    '[attr.data-valid]': 'formField?.valid() ? \"\" : null',\n    '[attr.data-touched]': 'formField?.touched() ? \"\" : null',\n    '[attr.data-pristine]': 'formField?.pristine() ? \"\" : null',\n    '[attr.data-dirty]': 'formField?.dirty() ? \"\" : null',\n    '[attr.data-pending]': 'formField?.pending() ? \"\" : null',\n    '[attr.data-disabled]': 'formField?.disabled() ? \"\" : null',\n  },\n})\nexport class NgpLabel {\n  /**\n   * Access the element that the label is associated with.\n   */\n  private readonly elementRef = inject<ElementRef<HTMLElement>>(ElementRef);\n\n  /**\n   * Access the form field that the label is associated with.\n   */\n  protected readonly formField = injectFormField();\n\n  /**\n   * The id of the label. If not provided, a unique id will be generated.\n   */\n  readonly id = input<string>(uniqueId('ngp-label'));\n\n  /**\n   * Determine if the label is an HTML label element.\n   */\n  protected readonly isLabel = this.elementRef.nativeElement instanceof HTMLLabelElement;\n\n  /**\n   * Derive the for attribute value if the label is an HTML label element.\n   */\n  protected readonly htmlFor = computed(() => this.formField?.formControl());\n\n  constructor() {\n    effect(\n      onCleanup => {\n        this.formField?.addLabel(this.id());\n        onCleanup(() => this.formField?.removeLabel(this.id()));\n      },\n      { allowSignalWrites: true },\n    );\n  }\n\n  @HostListener('click', ['$event'])\n  protected onClick(event: MouseEvent): void {\n    // by default a label will perform a click on the associated form control, however\n    // this only works if the associated form control is an input element which may not always\n    // be the case, so we prevent the default behavior and handle the click event ourselves.\n    // This was inspired by the HeadlessUI approach:\n    // https://github.com/tailwindlabs/headlessui/blob/main/packages/%40headlessui-react/src/components/label/label.tsx#L58\n    if (this.isLabel) {\n      event.preventDefault();\n    }\n\n    // to find the associated form control we can lookup via the known id\n    const targetId = this.htmlFor();\n\n    if (!targetId) {\n      return;\n    }\n\n    const target = document.getElementById(targetId);\n\n    if (!target) {\n      return;\n    }\n\n    // if the target is disabled then do nothing\n    const disabled = target.getAttribute('disabled');\n    const ariaDisabled = target.getAttribute('aria-disabled');\n\n    if (disabled === '' || disabled === 'true' || ariaDisabled === 'true') {\n      return;\n    }\n\n    // radio buttons, checkboxes and switches should all be clicked immediately as they require state changes\n    if (\n      (target instanceof HTMLInputElement &&\n        (target.type === 'radio' || target.type === 'checkbox')) ||\n      target.role === 'radio' ||\n      target.role === 'checkbox' ||\n      target.role === 'switch'\n    ) {\n      target.click();\n    }\n\n    // Move focus to the element, this allows you to start using keyboard shortcuts since the\n    // bound element is now focused.\n    target.focus({ preventScroll: true });\n  }\n}\n","/**\n * Copyright © 2024 Angular Primitives.\n * https://github.com/ng-primitives/ng-primitives\n *\n * This source code is licensed under the Apache 2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport { InjectionToken, inject } from '@angular/core';\nimport type { NgpDescription } from './description.directive';\n\nexport const NgpDescriptionToken = new InjectionToken<NgpDescription>('NgpDescriptionToken');\n\n/**\n * Inject the Description directive instance\n */\nexport function injectDescription(): NgpDescription {\n  return inject(NgpDescriptionToken);\n}\n","/**\n * Copyright © 2024 Angular Primitives.\n * https://github.com/ng-primitives/ng-primitives\n *\n * This source code is licensed under the Apache 2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport { Directive, effect, input } from '@angular/core';\nimport { uniqueId } from 'ng-primitives/utils';\nimport { injectFormField } from '../form-field/form-field.token';\nimport { NgpDescriptionToken } from './description.token';\n\n@Directive({\n  standalone: true,\n  selector: '[ngpDescription]',\n  exportAs: 'ngpDescription',\n  providers: [{ provide: NgpDescriptionToken, useExisting: NgpDescription }],\n  host: {\n    '[attr.id]': 'id()',\n    '[attr.data-invalid]': 'formField?.invalid() ? \"\" : null',\n    '[attr.data-valid]': 'formField?.valid() ? \"\" : null',\n    '[attr.data-touched]': 'formField?.touched() ? \"\" : null',\n    '[attr.data-pristine]': 'formField?.pristine() ? \"\" : null',\n    '[attr.data-dirty]': 'formField?.dirty() ? \"\" : null',\n    '[attr.data-pending]': 'formField?.pending() ? \"\" : null',\n    '[attr.data-disabled]': 'formField?.disabled() ? \"\" : null',\n  },\n})\nexport class NgpDescription {\n  /**\n   * Access the form field that the description is associated with.\n   */\n  protected readonly formField = injectFormField();\n\n  /**\n   * The id of the description. If not provided, a unique id will be generated.\n   */\n  readonly id = input<string>(uniqueId('ngp-description'));\n\n  constructor() {\n    effect(\n      onCleanup => {\n        this.formField?.addDescription(this.id());\n        onCleanup(() => this.formField?.removeDescription(this.id()));\n      },\n      { allowSignalWrites: true },\n    );\n  }\n}\n","/**\n * Copyright © 2024 Angular Primitives.\n * https://github.com/ng-primitives/ng-primitives\n *\n * This source code is licensed under the Apache 2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport { InjectionToken, inject } from '@angular/core';\nimport type { NgpFormControl } from './form-control.directive';\n\nexport const NgpFormControlToken = new InjectionToken<NgpFormControl>('NgpFormControlToken');\n\n/**\n * Inject the FormControl directive instance\n */\nexport function injectFormControl(): NgpFormControl {\n  return inject(NgpFormControlToken);\n}\n","/**\n * Copyright © 2024 Angular Primitives.\n * https://github.com/ng-primitives/ng-primitives\n *\n * This source code is licensed under the Apache 2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport { Directive, computed, effect, input } from '@angular/core';\nimport { injectDisabled } from 'ng-primitives/internal';\nimport { uniqueId } from 'ng-primitives/utils';\nimport { injectFormField } from '../form-field/form-field.token';\nimport { NgpFormControlToken } from './form-control.token';\n\n@Directive({\n  standalone: true,\n  selector: '[ngpFormControl]',\n  exportAs: 'ngpFormControl',\n  providers: [{ provide: NgpFormControlToken, useExisting: NgpFormControl }],\n  host: {\n    '[id]': 'id()',\n    '[attr.aria-labelledby]': 'ariaLabelledBy()',\n    '[attr.aria-describedby]': 'ariaDescribedBy()',\n    '[attr.data-invalid]': 'formField?.invalid() ? \"\" : null',\n    '[attr.data-valid]': 'formField?.valid() ? \"\" : null',\n    '[attr.data-touched]': 'formField?.touched() ? \"\" : null',\n    '[attr.data-pristine]': 'formField?.pristine() ? \"\" : null',\n    '[attr.data-dirty]': 'formField?.dirty() ? \"\" : null',\n    '[attr.data-pending]': 'formField?.pending() ? \"\" : null',\n    '[attr.data-disabled]': 'formField?.disabled() || disabled() ? \"\" : null',\n  },\n})\nexport class NgpFormControl {\n  /**\n   * Access the form field that the form control is associated with.\n   */\n  protected readonly formField = injectFormField();\n\n  /**\n   * Whether the form control is disabled by a parent.\n   */\n  protected readonly disabled = injectDisabled();\n\n  /**\n   * The id of the form control. If not provided, a unique id will be generated.\n   */\n  readonly id = input<string>(uniqueId('ngp-form-control'));\n\n  /**\n   * Determine the aria-labelledby attribute value.\n   */\n  protected readonly ariaLabelledBy = computed(() => this.formField?.labels().join(' '));\n\n  /**\n   * Determine the aria-describedby attribute value.\n   */\n  protected readonly ariaDescribedBy = computed(() => this.formField?.descriptions().join(' '));\n\n  constructor() {\n    effect(\n      onCleanup => {\n        this.formField?.setFormControl(this.id());\n        onCleanup(() => this.formField?.removeFormControl());\n      },\n      { allowSignalWrites: true },\n    );\n  }\n}\n","/**\n * Copyright © 2024 Angular Primitives.\n * https://github.com/ng-primitives/ng-primitives\n *\n * This source code is licensed under the Apache 2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport { InjectionToken, inject } from '@angular/core';\nimport type { NgpError } from './error.directive';\n\nexport const NgpErrorToken = new InjectionToken<NgpError>('NgpErrorToken');\n\n/**\n * Inject the Error directive instance\n */\nexport function injectError(): NgpError {\n  return inject(NgpErrorToken);\n}\n","/**\n * Copyright © 2024 Angular Primitives.\n * https://github.com/ng-primitives/ng-primitives\n *\n * This source code is licensed under the Apache 2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport { Directive, OnChanges, OnDestroy, SimpleChanges, computed, input } from '@angular/core';\nimport { onBooleanChange, uniqueId } from 'ng-primitives/utils';\nimport { injectFormField } from '../form-field/form-field.token';\nimport { NgpErrorToken } from './error.token';\n\n@Directive({\n  standalone: true,\n  selector: '[ngpError]',\n  exportAs: 'ngpError',\n  providers: [{ provide: NgpErrorToken, useExisting: NgpError }],\n  host: {\n    '[attr.id]': 'id()',\n    '[attr.data-invalid]': 'formField?.invalid() ? \"\" : null',\n    '[attr.data-valid]': 'formField?.valid() ? \"\" : null',\n    '[attr.data-touched]': 'formField?.touched() ? \"\" : null',\n    '[attr.data-pristine]': 'formField?.pristine() ? \"\" : null',\n    '[attr.data-dirty]': 'formField?.dirty() ? \"\" : null',\n    '[attr.data-pending]': 'formField?.pending() ? \"\" : null',\n    '[attr.data-disabled]': 'formField?.disabled() ? \"\" : null',\n    '[attr.data-validator]': 'state()',\n  },\n})\nexport class NgpError implements OnChanges, OnDestroy {\n  /**\n   * Access the form field that the description is associated with.\n   */\n  protected readonly formField = injectFormField();\n\n  /**\n   * The id of the error message. If not provided, a unique id will be generated.\n   */\n  readonly id = input<string>(uniqueId('ngp-error'));\n\n  /**\n   * The validator associated with the error message.\n   */\n  readonly validator = input<string | null>(null, {\n    alias: 'ngpErrorValidator',\n  });\n\n  /**\n   * Determine if there is an error message.\n   */\n  protected readonly hasError = computed(() => {\n    const errors = this.formField?.errors() ?? [];\n    const validator = this.validator();\n\n    return validator ? errors?.includes(validator) : errors?.length > 0;\n  });\n\n  /**\n   * Determine whether the validator associated with this error is failing.\n   */\n  protected readonly state = computed(() => (this.hasError() ? 'fail' : 'pass'));\n\n  constructor() {\n    // add or remove the error message when the error state changes\n    onBooleanChange(\n      this.hasError,\n      () => this.formField?.addDescription(this.id()),\n      () => this.formField?.removeDescription(this.id()),\n    );\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if ('id' in changes) {\n      this.formField?.removeDescription(changes['id'].previousValue);\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.formField?.removeDescription(this.id());\n  }\n}\n","/**\n * Copyright © 2024 Angular Primitives.\n * https://github.com/ng-primitives/ng-primitives\n *\n * This source code is licensed under the Apache 2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nexport { NgpFormField } from './form-field/form-field.directive';\nexport { NgpFormFieldToken } from './form-field/form-field.token';\nexport { NgpLabel } from './label/label.directive';\nexport { NgpLabelToken } from './label/label.token';\nexport { NgpDescription } from './description/description.directive';\nexport { NgpDescriptionToken } from './description/description.token';\nexport { NgpFormControl } from './form-control/form-control.directive';\nexport { NgpFormControlToken } from './form-control/form-control.token';\nexport { NgpError } from './error/error.directive';\nexport { NgpErrorToken } from './error/error.token';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":[],"mappings":"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"}