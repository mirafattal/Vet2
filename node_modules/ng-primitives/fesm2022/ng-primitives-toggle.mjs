import * as i0 from '@angular/core';
import { inject, ElementRef, model, input, booleanAttribute, Directive, HostListener } from '@angular/core';

class NgpToggle {
    constructor() {
        /**
         * Access the element.
         */
        this.element = inject(ElementRef);
        /**
         * Whether the toggle is selected.
         * @default false
         */
        this.selected = model(false, { alias: 'ngpToggleSelected' });
        /**
         * Whether the toggle is disabled.
         * @default false
         */
        this.disabled = input(false, {
            alias: 'ngpToggleDisabled',
            transform: booleanAttribute,
        });
        /**
         * Determine if the element is a button.
         */
        this.isButton = this.element.nativeElement.tagName === 'BUTTON';
    }
    /**
     * Toggle the selected state.
     */
    toggle() {
        if (this.disabled()) {
            return;
        }
        this.selected.update(selected => !selected);
    }
    /**
     * If the element is not a button or a link the space key should toggle the selected state.
     */
    onKeyDown(event) {
        if (!this.isButton && this.element.nativeElement.tagName !== 'A') {
            event.preventDefault();
            this.toggle();
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: NgpToggle, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "17.1.0", version: "18.2.13", type: NgpToggle, isStandalone: true, selector: "[ngpToggle]", inputs: { selected: { classPropertyName: "selected", publicName: "ngpToggleSelected", isSignal: true, isRequired: false, transformFunction: null }, disabled: { classPropertyName: "disabled", publicName: "ngpToggleDisabled", isSignal: true, isRequired: false, transformFunction: null } }, outputs: { selected: "ngpToggleSelectedChange" }, host: { listeners: { "click": "toggle()", "keydown.space": "onKeyDown($event)" }, properties: { "attr.type": "isButton ? \"button\" : null", "attr.aria-pressed": "selected()", "attr.data-selected": "selected() ? \"\" : null", "attr.data-disabled": "disabled() ? \"\" : null" } }, exportAs: ["ngpToggle"], ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: NgpToggle, decorators: [{
            type: Directive,
            args: [{
                    selector: '[ngpToggle]',
                    exportAs: 'ngpToggle',
                    standalone: true,
                    host: {
                        '[attr.type]': 'isButton ? "button" : null',
                        '[attr.aria-pressed]': 'selected()',
                        '[attr.data-selected]': 'selected() ? "" : null',
                        '[attr.data-disabled]': 'disabled() ? "" : null',
                    },
                }]
        }], propDecorators: { toggle: [{
                type: HostListener,
                args: ['click']
            }], onKeyDown: [{
                type: HostListener,
                args: ['keydown.space', ['$event']]
            }] } });

/**
 * Copyright © 2024 Angular Primitives.
 * https://github.com/ng-primitives/ng-primitives
 *
 * This source code is licensed under the Apache 2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */

/**
 * Generated bundle index. Do not edit.
 */

export { NgpToggle };
//# sourceMappingURL=ng-primitives-toggle.mjs.map
