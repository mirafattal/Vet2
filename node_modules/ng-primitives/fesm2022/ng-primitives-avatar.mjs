import * as i0 from '@angular/core';
import { InjectionToken, inject, signal, Directive, input, numberAttribute, computed, ElementRef, HostListener } from '@angular/core';
import { injectDisposables } from 'ng-primitives/utils';
import * as i1 from 'ng-primitives/interactions';
import { NgpHover, NgpFocusVisible, NgpPress } from 'ng-primitives/interactions';
import * as i1$1 from 'ng-primitives/a11y';
import { injectVisuallyHidden, NgpVisuallyHidden } from 'ng-primitives/a11y';

/**
 * Copyright © 2024 Angular Primitives.
 * https://github.com/ng-primitives/ng-primitives
 *
 * This source code is licensed under the Apache 2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */
const NgpAvatarToken = new InjectionToken('NgpAvatarToken');
/**
 * Provide the avatar
 * @returns The provider
 */
function injectAvatar() {
    return inject(NgpAvatarToken);
}

/**
 * Copyright © 2024 Angular Primitives.
 * https://github.com/ng-primitives/ng-primitives
 *
 * This source code is licensed under the Apache 2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */
class NgpAvatar {
    constructor() {
        /**
         * Store the current state of the avatar.
         * @internal
         */
        this.state = signal(NgpAvatarState.Idle);
    }
    /**
     * Set the avatar state.
     * @param state The state to set.
     * @internal
     */
    setState(state) {
        this.state.set(state);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: NgpAvatar, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "18.2.13", type: NgpAvatar, isStandalone: true, selector: "[ngpAvatar]", host: { properties: { "attr.data-state": "state()" } }, providers: [{ provide: NgpAvatarToken, useExisting: NgpAvatar }], hostDirectives: [{ directive: i1.NgpHover }, { directive: i1.NgpFocusVisible }, { directive: i1.NgpPress }], ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: NgpAvatar, decorators: [{
            type: Directive,
            args: [{
                    selector: '[ngpAvatar]',
                    standalone: true,
                    providers: [{ provide: NgpAvatarToken, useExisting: NgpAvatar }],
                    host: {
                        '[attr.data-state]': 'state()',
                    },
                    hostDirectives: [NgpHover, NgpFocusVisible, NgpPress],
                }]
        }] });
var NgpAvatarState;
(function (NgpAvatarState) {
    NgpAvatarState["Idle"] = "idle";
    NgpAvatarState["Loading"] = "loading";
    NgpAvatarState["Loaded"] = "loaded";
    NgpAvatarState["Error"] = "error";
})(NgpAvatarState || (NgpAvatarState = {}));

/**
 * Copyright © 2024 Angular Primitives.
 * https://github.com/ng-primitives/ng-primitives
 *
 * This source code is licensed under the Apache 2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */
const defaultAvatarConfig = {
    delay: 0,
};
const NgpAvatarConfigToken = new InjectionToken('NgpAvatarConfigToken');
/**
 * Provide the avatar config
 * @param config The avatar config
 * @returns The provider
 */
function provideAvatarConfig(config) {
    return [
        {
            provide: NgpAvatarConfigToken,
            useValue: { ...defaultAvatarConfig, ...config },
        },
    ];
}
/**
 * Inject the avatar config
 * @returns The global avatar config
 */
function injectAvatarConfig() {
    return inject(NgpAvatarConfigToken, { optional: true }) ?? defaultAvatarConfig;
}

class NgpAvatarFallback {
    constructor() {
        /**
         * Access the avatar
         */
        this.avatar = injectAvatar();
        /**
         * Access the global configuration.
         */
        this.config = injectAvatarConfig();
        /**
         * Access the disposable utilities.
         */
        this.disposables = injectDisposables();
        /**
         * Define a delay before the fallback is shown. This is useful to only show the fallback for those with slower connections.
         * @default 0
         */
        this.delay = input(this.config.delay, {
            alias: 'ngpAvatarFallbackDelay',
            transform: numberAttribute,
        });
        /**
         * Determine if this element should be hidden.
         * @returns True if the element should be visible
         */
        this.visible = computed(() => 
        // we need to check if the element can render and if the avatar is not in a loaded state
        this.delayElapsed() && this.avatar.state() !== NgpAvatarState.Loaded);
        /**
         * Determine the delay has elapsed, and we can show the fallback.
         */
        this.delayElapsed = signal(false);
    }
    ngOnInit() {
        this.disposables.setTimeout(() => this.delayElapsed.set(true), this.delay());
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: NgpAvatarFallback, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "17.1.0", version: "18.2.13", type: NgpAvatarFallback, isStandalone: true, selector: "[ngpAvatarFallback]", inputs: { delay: { classPropertyName: "delay", publicName: "ngpAvatarFallbackDelay", isSignal: true, isRequired: false, transformFunction: null } }, host: { properties: { "style.display": "visible() ? null : \"none\"" } }, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: NgpAvatarFallback, decorators: [{
            type: Directive,
            args: [{
                    selector: '[ngpAvatarFallback]',
                    standalone: true,
                    host: {
                        '[style.display]': 'visible() ? null : "none"',
                    },
                }]
        }] });

/**
 * Copyright © 2024 Angular Primitives.
 * https://github.com/ng-primitives/ng-primitives
 *
 * This source code is licensed under the Apache 2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */
class NgpAvatarImage {
    constructor() {
        /**
         * Control the visibility of the image.
         */
        this.visuallyHidden = injectVisuallyHidden();
        /**
         * Access the avatar
         */
        this.avatar = injectAvatar();
        /**
         * Access the image element ref.
         */
        this.elementRef = inject(ElementRef);
    }
    ngOnInit() {
        // mark the avatar as loading
        this.setState(NgpAvatarState.Loading);
        // if there is no src, we can report this as an error
        if (!this.elementRef.nativeElement.src) {
            this.setState(NgpAvatarState.Error);
        }
        // if the image has already loaded, we can report this to the avatar
        if (this.elementRef.nativeElement.complete) {
            this.setState(NgpAvatarState.Loaded);
        }
    }
    onLoad() {
        this.setState(NgpAvatarState.Loaded);
    }
    onError() {
        this.setState(NgpAvatarState.Error);
    }
    setState(state) {
        this.avatar.setState(state);
        // if the state is loaded then we should make the image visible
        this.visuallyHidden.setVisibility(state === NgpAvatarState.Loaded);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: NgpAvatarImage, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "18.2.13", type: NgpAvatarImage, isStandalone: true, selector: "img[ngpAvatarImage]", host: { listeners: { "load": "onLoad()", "error": "onError()" } }, hostDirectives: [{ directive: i1$1.NgpVisuallyHidden }], ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: NgpAvatarImage, decorators: [{
            type: Directive,
            args: [{
                    selector: 'img[ngpAvatarImage]',
                    standalone: true,
                    hostDirectives: [NgpVisuallyHidden],
                }]
        }], propDecorators: { onLoad: [{
                type: HostListener,
                args: ['load']
            }], onError: [{
                type: HostListener,
                args: ['error']
            }] } });

/**
 * Copyright © 2024 Angular Primitives.
 * https://github.com/ng-primitives/ng-primitives
 *
 * This source code is licensed under the Apache 2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */

/**
 * Generated bundle index. Do not edit.
 */

export { NgpAvatar, NgpAvatarFallback, NgpAvatarImage, NgpAvatarState, NgpAvatarToken, provideAvatarConfig };
//# sourceMappingURL=ng-primitives-avatar.mjs.map
