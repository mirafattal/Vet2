import * as i0 from '@angular/core';
import { InjectionToken, inject, Directive, ElementRef, model, input, booleanAttribute, HostListener } from '@angular/core';
import * as i1 from 'ng-primitives/interactions';
import { NgpHover, NgpFocusVisible, NgpPress } from 'ng-primitives/interactions';
import * as i1$1 from 'ng-primitives/form-field';
import { NgpFormControl } from 'ng-primitives/form-field';
import { NgpDisabledToken } from 'ng-primitives/internal';

/**
 * Copyright © 2024 Angular Primitives.
 * https://github.com/ng-primitives/ng-primitives
 *
 * This source code is licensed under the Apache 2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */
const NgpSwitchToken = new InjectionToken('NgpSwitchToken');
/**
 * Inject the Switch directive instance
 * @returns The switch directive instance
 */
function injectSwitch() {
    return inject(NgpSwitchToken);
}

/**
 * Copyright © 2024 Angular Primitives.
 * https://github.com/ng-primitives/ng-primitives
 *
 * This source code is licensed under the Apache 2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */
class NgpSwitchThumb {
    constructor() {
        /**
         * Access the switch directive.
         */
        this.switch = injectSwitch();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: NgpSwitchThumb, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "18.2.13", type: NgpSwitchThumb, isStandalone: true, selector: "[ngpSwitchThumb]", host: { properties: { "attr.data-checked": "switch.checked() ? \"\" : null", "attr.data-disabled": "switch.disabled() ? \"\" : null" } }, hostDirectives: [{ directive: i1.NgpHover }, { directive: i1.NgpFocusVisible }, { directive: i1.NgpPress }], ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: NgpSwitchThumb, decorators: [{
            type: Directive,
            args: [{
                    selector: '[ngpSwitchThumb]',
                    standalone: true,
                    host: {
                        '[attr.data-checked]': 'switch.checked() ? "" : null',
                        '[attr.data-disabled]': 'switch.disabled() ? "" : null',
                    },
                    hostDirectives: [NgpHover, NgpFocusVisible, NgpPress],
                }]
        }] });

class NgpSwitch {
    constructor() {
        /**
         * Access the element ref.
         */
        this.elementRef = inject(ElementRef);
        /**
         * Determine if the switch is a button
         */
        this.isButton = this.elementRef.nativeElement.tagName === 'BUTTON';
        /**
         * Determine if the switch is checked.
         * @default false
         */
        this.checked = model(false, {
            alias: 'ngpSwitchChecked',
        });
        /**
         * Determine if the switch is disabled.
         * @default false
         */
        this.disabled = input(false, {
            alias: 'ngpSwitchDisabled',
            transform: booleanAttribute,
        });
    }
    /**
     * Toggle the checked state.
     */
    toggle() {
        if (this.disabled()) {
            return;
        }
        this.checked.update(checked => !checked);
    }
    /**
     * Handle the keydown event.
     */
    onKeyDown() {
        // If the switch is not a button then the space key will not toggle the checked state automatically,
        // so we need to do it manually.
        if (!this.isButton) {
            this.toggle();
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: NgpSwitch, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "17.1.0", version: "18.2.13", type: NgpSwitch, isStandalone: true, selector: "[ngpSwitch]", inputs: { checked: { classPropertyName: "checked", publicName: "ngpSwitchChecked", isSignal: true, isRequired: false, transformFunction: null }, disabled: { classPropertyName: "disabled", publicName: "ngpSwitchDisabled", isSignal: true, isRequired: false, transformFunction: null } }, outputs: { checked: "ngpSwitchCheckedChange" }, host: { attributes: { "role": "switch" }, listeners: { "click": "toggle()", "keydown.space": "onKeyDown()" }, properties: { "attr.type": "isButton ? \"button\" : null", "attr.aria-checked": "checked()", "attr.data-checked": "checked() ? \"\" : null", "attr.disabled": "isButton && disabled() ? \"\" : null" } }, providers: [
            { provide: NgpSwitchToken, useExisting: NgpSwitch },
            { provide: NgpDisabledToken, useExisting: NgpSwitch },
        ], exportAs: ["ngpSwitch"], hostDirectives: [{ directive: i1$1.NgpFormControl }, { directive: i1.NgpHover }, { directive: i1.NgpPress }, { directive: i1.NgpFocusVisible }], ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: NgpSwitch, decorators: [{
            type: Directive,
            args: [{
                    standalone: true,
                    selector: '[ngpSwitch]',
                    exportAs: 'ngpSwitch',
                    providers: [
                        { provide: NgpSwitchToken, useExisting: NgpSwitch },
                        { provide: NgpDisabledToken, useExisting: NgpSwitch },
                    ],
                    hostDirectives: [NgpFormControl, NgpHover, NgpPress, NgpFocusVisible],
                    host: {
                        role: 'switch',
                        '[attr.type]': 'isButton ? "button" : null',
                        '[attr.aria-checked]': 'checked()',
                        '[attr.data-checked]': 'checked() ? "" : null',
                        '[attr.disabled]': 'isButton && disabled() ? "" : null',
                    },
                }]
        }], propDecorators: { toggle: [{
                type: HostListener,
                args: ['click']
            }], onKeyDown: [{
                type: HostListener,
                args: ['keydown.space']
            }] } });

/**
 * Copyright © 2024 Angular Primitives.
 * https://github.com/ng-primitives/ng-primitives
 *
 * This source code is licensed under the Apache 2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */

/**
 * Generated bundle index. Do not edit.
 */

export { NgpSwitch, NgpSwitchThumb, NgpSwitchToken };
//# sourceMappingURL=ng-primitives-switch.mjs.map
