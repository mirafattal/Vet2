import * as i0 from '@angular/core';
import { InjectionToken, inject, model, input, numberAttribute, booleanAttribute, computed, Directive, HostListener } from '@angular/core';
import * as i1 from 'ng-primitives/button';
import { NgpButton } from 'ng-primitives/button';
import { NgpDisabledToken } from 'ng-primitives/internal';

/**
 * Copyright © 2024 Angular Primitives.
 * https://github.com/ng-primitives/ng-primitives
 *
 * This source code is licensed under the Apache 2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */
const NgpPaginationToken = new InjectionToken('NgpPaginationToken');
/**
 * Inject the Pagination directive instance
 */
function injectPagination() {
    return inject(NgpPaginationToken);
}

class NgpPagination {
    constructor() {
        /**
         * The currently selected page.
         */
        this.page = model(1, {
            alias: 'ngpPaginationPage',
        });
        /**
         * The total number of pages.
         */
        this.pageCount = input(0, {
            alias: 'ngpPaginationPageCount',
            transform: numberAttribute,
        });
        /**
         * Whether the pagination is disabled.
         */
        this.disabled = input(false, {
            alias: 'ngpPaginationDisabled',
            transform: booleanAttribute,
        });
        /**
         * Determine if we are on the first page.
         * @internal
         */
        this.firstPage = computed(() => this.page() === 1);
        /**
         * Determine if we are on the last page.
         * @internal
         */
        this.lastPage = computed(() => this.page() === this.pageCount());
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: NgpPagination, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "17.1.0", version: "18.2.13", type: NgpPagination, isStandalone: true, selector: "[ngpPagination]", inputs: { page: { classPropertyName: "page", publicName: "ngpPaginationPage", isSignal: true, isRequired: false, transformFunction: null }, pageCount: { classPropertyName: "pageCount", publicName: "ngpPaginationPageCount", isSignal: true, isRequired: false, transformFunction: null }, disabled: { classPropertyName: "disabled", publicName: "ngpPaginationDisabled", isSignal: true, isRequired: false, transformFunction: null } }, outputs: { page: "ngpPaginationPageChange" }, host: { attributes: { "role": "navigation" }, properties: { "attr.data-page": "page()", "attr.data-page-count": "pageCount()", "attr.data-first-page": "firstPage() ? \"\" : null", "attr.data-last-page": "lastPage() ? \"\" : null", "attr.data-disabled": "disabled() ? \"\" : null" } }, providers: [{ provide: NgpPaginationToken, useExisting: NgpPagination }], exportAs: ["ngpPagination"], ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: NgpPagination, decorators: [{
            type: Directive,
            args: [{
                    standalone: true,
                    selector: '[ngpPagination]',
                    exportAs: 'ngpPagination',
                    providers: [{ provide: NgpPaginationToken, useExisting: NgpPagination }],
                    host: {
                        role: 'navigation',
                        '[attr.data-page]': 'page()',
                        '[attr.data-page-count]': 'pageCount()',
                        '[attr.data-first-page]': 'firstPage() ? "" : null',
                        '[attr.data-last-page]': 'lastPage() ? "" : null',
                        '[attr.data-disabled]': 'disabled() ? "" : null',
                    },
                }]
        }] });

/**
 * Copyright © 2024 Angular Primitives.
 * https://github.com/ng-primitives/ng-primitives
 *
 * This source code is licensed under the Apache 2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */
const NgpPaginationButtonToken = new InjectionToken('NgpPaginationButtonToken');
/**
 * Inject the PaginationButton directive instance
 */
function injectPaginationButton() {
    return inject(NgpPaginationButtonToken);
}

class NgpPaginationButton {
    constructor() {
        /**
         * Access the pagination directive.
         */
        this.pagination = injectPagination();
        /**
         * Define the page this button represents.
         */
        this.page = input.required({
            alias: 'ngpPaginationButtonPage',
            transform: numberAttribute,
        });
        /**
         * Whether the button is disabled.
         */
        this.buttonDisabled = input(false, {
            alias: 'ngpPaginationButtonDisabled',
            transform: booleanAttribute,
        });
        /**
         * Whether the button is disabled.
         */
        this.disabled = computed(() => this.buttonDisabled() || this.pagination.disabled());
        /**
         * Whether this page is the currently selected page.
         */
        this.selected = computed(() => this.page() === this.pagination.page());
    }
    /**
     * Go to the page this button represents.
     */
    goToPage() {
        if (this.disabled()) {
            return;
        }
        this.pagination.page.set(this.page());
    }
    /**
     * A click event may not be fired if this is on an anchor tag and the href is empty.
     * This is a workaround to ensure the click event is fired.
     */
    onEnter(event) {
        event.preventDefault();
        event.stopPropagation();
        this.goToPage();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: NgpPaginationButton, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "17.1.0", version: "18.2.13", type: NgpPaginationButton, isStandalone: true, selector: "[ngpPaginationButton]", inputs: { page: { classPropertyName: "page", publicName: "ngpPaginationButtonPage", isSignal: true, isRequired: true, transformFunction: null }, buttonDisabled: { classPropertyName: "buttonDisabled", publicName: "ngpPaginationButtonDisabled", isSignal: true, isRequired: false, transformFunction: null } }, host: { listeners: { "click": "goToPage()", "keydown.enter": "onEnter($event)", "keydown.space": "onEnter($event)" }, properties: { "tabindex": "disabled() ? -1 : 0", "attr.data-disabled": "disabled() || pagination.disabled() ? \"\" : null", "attr.data-page": "page()", "attr.data-selected": "selected() ? \"\" : null", "attr.aria-current": "selected()" } }, providers: [
            { provide: NgpPaginationButtonToken, useExisting: NgpPaginationButton },
            { provide: NgpDisabledToken, useExisting: NgpPaginationButton },
        ], exportAs: ["ngpPaginationButton"], hostDirectives: [{ directive: i1.NgpButton }], ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: NgpPaginationButton, decorators: [{
            type: Directive,
            args: [{
                    standalone: true,
                    selector: '[ngpPaginationButton]',
                    exportAs: 'ngpPaginationButton',
                    providers: [
                        { provide: NgpPaginationButtonToken, useExisting: NgpPaginationButton },
                        { provide: NgpDisabledToken, useExisting: NgpPaginationButton },
                    ],
                    hostDirectives: [NgpButton],
                    host: {
                        '[tabindex]': 'disabled() ? -1 : 0',
                        '[attr.data-disabled]': 'disabled() || pagination.disabled() ? "" : null',
                        '[attr.data-page]': 'page()',
                        '[attr.data-selected]': 'selected() ? "" : null',
                        '[attr.aria-current]': 'selected()',
                    },
                }]
        }], propDecorators: { goToPage: [{
                type: HostListener,
                args: ['click']
            }], onEnter: [{
                type: HostListener,
                args: ['keydown.enter', ['$event']]
            }, {
                type: HostListener,
                args: ['keydown.space', ['$event']]
            }] } });

/**
 * Copyright © 2024 Angular Primitives.
 * https://github.com/ng-primitives/ng-primitives
 *
 * This source code is licensed under the Apache 2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */
const NgpPaginationPreviousToken = new InjectionToken('NgpPaginationPreviousToken');
/**
 * Inject the PaginationPrevious directive instance
 */
function injectPaginationPrevious() {
    return inject(NgpPaginationPreviousToken);
}

class NgpPaginationPrevious {
    constructor() {
        /**
         * Access the pagination directive.
         */
        this.pagination = injectPagination();
        /**
         * Whether the button is disabled.
         */
        this.buttonDisabled = input(false, {
            alias: 'ngpPaginationPreviousDisabled',
            transform: booleanAttribute,
        });
        /**
         * Whether the button is disabled.
         */
        this.disabled = computed(() => this.buttonDisabled() || this.pagination.disabled() || this.pagination.firstPage());
    }
    /**
     * Go to the previous page.
     */
    goToPreviousPage() {
        if (this.disabled()) {
            return;
        }
        this.pagination.page.set(this.pagination.page() - 1);
    }
    /**
     * A click event may not be fired if this is on an anchor tag and the href is empty.
     * This is a workaround to ensure the click event is fired.
     */
    onEnter(event) {
        event.preventDefault();
        event.stopPropagation();
        this.goToPreviousPage();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: NgpPaginationPrevious, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "17.1.0", version: "18.2.13", type: NgpPaginationPrevious, isStandalone: true, selector: "[ngpPaginationPrevious]", inputs: { buttonDisabled: { classPropertyName: "buttonDisabled", publicName: "ngpPaginationPreviousDisabled", isSignal: true, isRequired: false, transformFunction: null } }, host: { listeners: { "click": "goToPreviousPage()", "keydown.enter": "onEnter($event)", "keydown.space": "onEnter($event)" }, properties: { "tabindex": "disabled() ? -1 : 0", "attr.data-disabled": "disabled() ? \"\" : null", "attr.data-first-page": "pagination.firstPage() ? \"\" : null" } }, providers: [
            { provide: NgpPaginationPreviousToken, useExisting: NgpPaginationPrevious },
            { provide: NgpDisabledToken, useExisting: NgpPaginationPrevious },
        ], exportAs: ["ngpPaginationPrevious"], hostDirectives: [{ directive: i1.NgpButton }], ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: NgpPaginationPrevious, decorators: [{
            type: Directive,
            args: [{
                    standalone: true,
                    selector: '[ngpPaginationPrevious]',
                    exportAs: 'ngpPaginationPrevious',
                    providers: [
                        { provide: NgpPaginationPreviousToken, useExisting: NgpPaginationPrevious },
                        { provide: NgpDisabledToken, useExisting: NgpPaginationPrevious },
                    ],
                    hostDirectives: [NgpButton],
                    host: {
                        '[tabindex]': 'disabled() ? -1 : 0',
                        '[attr.data-disabled]': 'disabled() ? "" : null',
                        '[attr.data-first-page]': 'pagination.firstPage() ? "" : null',
                    },
                }]
        }], propDecorators: { goToPreviousPage: [{
                type: HostListener,
                args: ['click']
            }], onEnter: [{
                type: HostListener,
                args: ['keydown.enter', ['$event']]
            }, {
                type: HostListener,
                args: ['keydown.space', ['$event']]
            }] } });

/**
 * Copyright © 2024 Angular Primitives.
 * https://github.com/ng-primitives/ng-primitives
 *
 * This source code is licensed under the Apache 2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */
const NgpPaginationNextToken = new InjectionToken('NgpPaginationNextToken');
/**
 * Inject the PaginationNext directive instance
 */
function injectPaginationNext() {
    return inject(NgpPaginationNextToken);
}

class NgpPaginationNext {
    constructor() {
        /**
         * Access the pagination directive.
         */
        this.pagination = injectPagination();
        /**
         * Whether the button is disabled.
         */
        this.buttonDisabled = input(false, {
            alias: 'ngpPaginationNextDisabled',
            transform: booleanAttribute,
        });
        /**
         * Whether the button is disabled.
         */
        this.disabled = computed(() => this.buttonDisabled() || this.pagination.disabled() || this.pagination.lastPage());
    }
    /**
     * Go to the next page.
     */
    goToNextPage() {
        if (this.disabled()) {
            return;
        }
        this.pagination.page.set(this.pagination.page() + 1);
    }
    /**
     * A click event may not be fired if this is on an anchor tag and the href is empty.
     * This is a workaround to ensure the click event is fired.
     */
    onEnter(event) {
        event.preventDefault();
        event.stopPropagation();
        this.goToNextPage();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: NgpPaginationNext, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "17.1.0", version: "18.2.13", type: NgpPaginationNext, isStandalone: true, selector: "[ngpPaginationNext]", inputs: { buttonDisabled: { classPropertyName: "buttonDisabled", publicName: "ngpPaginationNextDisabled", isSignal: true, isRequired: false, transformFunction: null } }, host: { listeners: { "click": "goToNextPage()", "keydown.enter": "onEnter($event)", "keydown.space": "onEnter($event)" }, properties: { "tabindex": "disabled() ? -1 : 0", "attr.data-disabled": "disabled() ? \"\" : null", "attr.data-last-page": "pagination.lastPage() ? \"\" : null" } }, providers: [
            { provide: NgpPaginationNextToken, useExisting: NgpPaginationNext },
            { provide: NgpDisabledToken, useExisting: NgpPaginationNext },
        ], exportAs: ["ngpPaginationNext"], hostDirectives: [{ directive: i1.NgpButton }], ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: NgpPaginationNext, decorators: [{
            type: Directive,
            args: [{
                    standalone: true,
                    selector: '[ngpPaginationNext]',
                    exportAs: 'ngpPaginationNext',
                    providers: [
                        { provide: NgpPaginationNextToken, useExisting: NgpPaginationNext },
                        { provide: NgpDisabledToken, useExisting: NgpPaginationNext },
                    ],
                    hostDirectives: [NgpButton],
                    host: {
                        '[tabindex]': 'disabled() ? -1 : 0',
                        '[attr.data-disabled]': 'disabled() ? "" : null',
                        '[attr.data-last-page]': 'pagination.lastPage() ? "" : null',
                    },
                }]
        }], propDecorators: { goToNextPage: [{
                type: HostListener,
                args: ['click']
            }], onEnter: [{
                type: HostListener,
                args: ['keydown.enter', ['$event']]
            }, {
                type: HostListener,
                args: ['keydown.space', ['$event']]
            }] } });

/**
 * Copyright © 2024 Angular Primitives.
 * https://github.com/ng-primitives/ng-primitives
 *
 * This source code is licensed under the Apache 2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */
const NgpPaginationFirstToken = new InjectionToken('NgpPaginationFirstToken');
/**
 * Inject the PaginationFirst directive instance
 */
function injectPaginationFirst() {
    return inject(NgpPaginationFirstToken);
}

class NgpPaginationFirst {
    constructor() {
        /**
         * Access the pagination directive.
         */
        this.pagination = injectPagination();
        /**
         * Whether the button is disabled.
         */
        this.buttonDisabled = input(false, {
            alias: 'ngpPaginationFirstDisabled',
            transform: booleanAttribute,
        });
        this.disabled = computed(() => this.buttonDisabled() || this.pagination.disabled() || this.pagination.firstPage());
    }
    /**
     * Go to the first page.
     */
    goToFirstPage() {
        if (this.disabled()) {
            return;
        }
        this.pagination.page.set(1);
    }
    /**
     * A click event may not be fired if this is on an anchor tag and the href is empty.
     * This is a workaround to ensure the click event is fired.
     */
    onEnter(event) {
        event.preventDefault();
        event.stopPropagation();
        this.goToFirstPage();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: NgpPaginationFirst, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "17.1.0", version: "18.2.13", type: NgpPaginationFirst, isStandalone: true, selector: "[ngpPaginationFirst]", inputs: { buttonDisabled: { classPropertyName: "buttonDisabled", publicName: "ngpPaginationFirstDisabled", isSignal: true, isRequired: false, transformFunction: null } }, host: { listeners: { "click": "goToFirstPage()", "keydown.enter": "onEnter($event)", "keydown.space": "onEnter($event)" }, properties: { "tabindex": "disabled() ? -1 : 0", "attr.data-disabled": "disabled() ? \"\" : null", "attr.data-first-page": "pagination.firstPage() ? \"\" : null" } }, providers: [
            { provide: NgpPaginationFirstToken, useExisting: NgpPaginationFirst },
            { provide: NgpDisabledToken, useExisting: NgpPaginationFirst },
        ], exportAs: ["ngpPaginationFirst"], hostDirectives: [{ directive: i1.NgpButton }], ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: NgpPaginationFirst, decorators: [{
            type: Directive,
            args: [{
                    standalone: true,
                    selector: '[ngpPaginationFirst]',
                    exportAs: 'ngpPaginationFirst',
                    providers: [
                        { provide: NgpPaginationFirstToken, useExisting: NgpPaginationFirst },
                        { provide: NgpDisabledToken, useExisting: NgpPaginationFirst },
                    ],
                    hostDirectives: [NgpButton],
                    host: {
                        '[tabindex]': 'disabled() ? -1 : 0',
                        '[attr.data-disabled]': 'disabled() ? "" : null',
                        '[attr.data-first-page]': 'pagination.firstPage() ? "" : null',
                    },
                }]
        }], propDecorators: { goToFirstPage: [{
                type: HostListener,
                args: ['click']
            }], onEnter: [{
                type: HostListener,
                args: ['keydown.enter', ['$event']]
            }, {
                type: HostListener,
                args: ['keydown.space', ['$event']]
            }] } });

/**
 * Copyright © 2024 Angular Primitives.
 * https://github.com/ng-primitives/ng-primitives
 *
 * This source code is licensed under the Apache 2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */
const NgpPaginationLastToken = new InjectionToken('NgpPaginationLastToken');
/**
 * Inject the PaginationLast directive instance
 */
function injectPaginationLast() {
    return inject(NgpPaginationLastToken);
}

class NgpPaginationLast {
    constructor() {
        /**
         * Access the pagination directive.
         */
        this.pagination = injectPagination();
        /**
         * Whether the button is disabled.
         */
        this.buttonDisabled = input(false, {
            alias: 'ngpPaginationLastDisabled',
            transform: booleanAttribute,
        });
        this.disabled = computed(() => this.buttonDisabled() || this.pagination.disabled() || this.pagination.lastPage());
    }
    /**
     * Go to the last page.
     */
    goToLastPage() {
        if (this.disabled()) {
            return;
        }
        this.pagination.page.set(this.pagination.pageCount());
    }
    /**
     * A click event may not be fired if this is on an anchor tag and the href is empty.
     * This is a workaround to ensure the click event is fired.
     */
    onEnter(event) {
        event.preventDefault();
        event.stopPropagation();
        this.goToLastPage();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: NgpPaginationLast, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "17.1.0", version: "18.2.13", type: NgpPaginationLast, isStandalone: true, selector: "[ngpPaginationLast]", inputs: { buttonDisabled: { classPropertyName: "buttonDisabled", publicName: "ngpPaginationLastDisabled", isSignal: true, isRequired: false, transformFunction: null } }, host: { listeners: { "click": "goToLastPage()", "keydown.enter": "onEnter($event)", "keydown.space": "onEnter($event)" }, properties: { "tabindex": "disabled() ? -1 : 0", "attr.data-disabled": "disabled() ? \"\" : null", "attr.data-last-page": "pagination.lastPage() ? \"\" : null" } }, providers: [
            { provide: NgpPaginationLastToken, useExisting: NgpPaginationLast },
            { provide: NgpDisabledToken, useExisting: NgpPaginationLast },
        ], exportAs: ["ngpPaginationLast"], hostDirectives: [{ directive: i1.NgpButton }], ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: NgpPaginationLast, decorators: [{
            type: Directive,
            args: [{
                    standalone: true,
                    selector: '[ngpPaginationLast]',
                    exportAs: 'ngpPaginationLast',
                    providers: [
                        { provide: NgpPaginationLastToken, useExisting: NgpPaginationLast },
                        { provide: NgpDisabledToken, useExisting: NgpPaginationLast },
                    ],
                    hostDirectives: [NgpButton],
                    host: {
                        '[tabindex]': 'disabled() ? -1 : 0',
                        '[attr.data-disabled]': 'disabled() ? "" : null',
                        '[attr.data-last-page]': 'pagination.lastPage() ? "" : null',
                    },
                }]
        }], propDecorators: { goToLastPage: [{
                type: HostListener,
                args: ['click']
            }], onEnter: [{
                type: HostListener,
                args: ['keydown.enter', ['$event']]
            }, {
                type: HostListener,
                args: ['keydown.space', ['$event']]
            }] } });

/**
 * Copyright © 2024 Angular Primitives.
 * https://github.com/ng-primitives/ng-primitives
 *
 * This source code is licensed under the Apache 2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */

/**
 * Generated bundle index. Do not edit.
 */

export { NgpPagination, NgpPaginationButton, NgpPaginationButtonToken, NgpPaginationFirst, NgpPaginationFirstToken, NgpPaginationLast, NgpPaginationLastToken, NgpPaginationNext, NgpPaginationNextToken, NgpPaginationPrevious, NgpPaginationPreviousToken, NgpPaginationToken };
//# sourceMappingURL=ng-primitives-pagination.mjs.map
