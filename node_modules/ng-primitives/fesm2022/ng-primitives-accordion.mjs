import * as i0 from '@angular/core';
import { InjectionToken, inject, input, Directive, booleanAttribute, contentChild, computed, HostListener, model } from '@angular/core';
import { uniqueId } from 'ng-primitives/utils';

/**
 * Copyright © 2024 Angular Primitives.
 * https://github.com/ng-primitives/ng-primitives
 *
 * This source code is licensed under the Apache 2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */
const NgpAccordionItemToken = new InjectionToken('NgpAccordionItemToken');
/**
 * Inject the AccordionItem directive instance
 * @returns The AccordionItem directive instance
 */
function injectAccordionItem() {
    return inject(NgpAccordionItemToken);
}

/**
 * Copyright © 2024 Angular Primitives.
 * https://github.com/ng-primitives/ng-primitives
 *
 * This source code is licensed under the Apache 2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */
const NgpAccordionToken = new InjectionToken('NgpAccordionToken');
/**
 * Inject the Accordion directive instance
 * @returns The Accordion directive instance
 */
function injectAccordion() {
    return inject(NgpAccordionToken);
}

/**
 * Copyright © 2024 Angular Primitives.
 * https://github.com/ng-primitives/ng-primitives
 *
 * This source code is licensed under the Apache 2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */
const NgpAccordionContentToken = new InjectionToken('NgpAccordionContentToken');
/**
 * Inject the AccordionContent directive instance
 * @returns The AccordionContent directive instance
 */
function injectAccordionContent() {
    return inject(NgpAccordionContentToken);
}

/**
 * Copyright © 2024 Angular Primitives.
 * https://github.com/ng-primitives/ng-primitives
 *
 * This source code is licensed under the Apache 2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */
class NgpAccordionContent {
    constructor() {
        /**
         * Access the accordion
         */
        this.accordion = injectAccordion();
        /**
         * Access the accordion item
         */
        this.accordionItem = injectAccordionItem();
        /**
         * The id of the content region
         */
        this.id = input(uniqueId('ngp-accordion-content'));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: NgpAccordionContent, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "17.1.0", version: "18.2.13", type: NgpAccordionContent, isStandalone: true, selector: "[ngpAccordionContent]", inputs: { id: { classPropertyName: "id", publicName: "id", isSignal: true, isRequired: false, transformFunction: null } }, host: { attributes: { "role": "region" }, properties: { "id": "id()", "attr.data-orientation": "accordion.orientation()", "attr.data-open": "accordionItem.open() ? \"\" : null", "attr.aria-labelledby": "accordionItem.triggerId()" } }, providers: [{ provide: NgpAccordionContentToken, useExisting: NgpAccordionContent }], exportAs: ["ngpAccordionContent"], ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: NgpAccordionContent, decorators: [{
            type: Directive,
            args: [{
                    standalone: true,
                    selector: '[ngpAccordionContent]',
                    exportAs: 'ngpAccordionContent',
                    providers: [{ provide: NgpAccordionContentToken, useExisting: NgpAccordionContent }],
                    host: {
                        role: 'region',
                        '[id]': 'id()',
                        '[attr.data-orientation]': 'accordion.orientation()',
                        '[attr.data-open]': 'accordionItem.open() ? "" : null',
                        '[attr.aria-labelledby]': 'accordionItem.triggerId()',
                    },
                }]
        }] });

/**
 * Copyright © 2024 Angular Primitives.
 * https://github.com/ng-primitives/ng-primitives
 *
 * This source code is licensed under the Apache 2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */
const NgpAccordionTriggerToken = new InjectionToken('NgpAccordionTriggerToken');
/**
 * Inject the AccordionTrigger directive instance
 * @returns The AccordionTrigger directive instance
 */
function injectAccordionTrigger() {
    return inject(NgpAccordionTriggerToken);
}

class NgpAccordionItem {
    constructor() {
        /**
         * Access the accordion.
         */
        this.accordion = injectAccordion();
        /**
         * The value of the accordion item.
         */
        this.value = input.required({
            alias: 'ngpAccordionItemValue',
        });
        /**
         * Whether the accordion item is disabled.
         */
        this.disabled = input(false, {
            alias: 'ngpAccordionItemDisabled',
            transform: booleanAttribute,
        });
        /**
         * Access the accordion trigger
         */
        this.trigger = contentChild(NgpAccordionTriggerToken);
        /**
         * Access the accordion content
         */
        this.content = contentChild(NgpAccordionContentToken);
        /**
         * Whether the accordion item is expanded.
         */
        this.open = computed(() => this.accordion.isOpen(this.value()));
        /**
         * The trigger id.
         */
        this.triggerId = computed(() => this.trigger()?.id());
        /**
         * The content id.
         */
        this.contentId = computed(() => this.content()?.id());
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: NgpAccordionItem, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "17.2.0", version: "18.2.13", type: NgpAccordionItem, isStandalone: true, selector: "[ngpAccordionItem]", inputs: { value: { classPropertyName: "value", publicName: "ngpAccordionItemValue", isSignal: true, isRequired: true, transformFunction: null }, disabled: { classPropertyName: "disabled", publicName: "ngpAccordionItemDisabled", isSignal: true, isRequired: false, transformFunction: null } }, host: { properties: { "attr.data-orientation": "accordion.orientation()", "attr.data-open": "open() ? \"\" : null", "attr.data-disabled": "disabled() || accordion.disabled() ? \"\" : null" } }, providers: [{ provide: NgpAccordionItemToken, useExisting: NgpAccordionItem }], queries: [{ propertyName: "trigger", first: true, predicate: NgpAccordionTriggerToken, descendants: true, isSignal: true }, { propertyName: "content", first: true, predicate: NgpAccordionContentToken, descendants: true, isSignal: true }], exportAs: ["ngpAccordionItem"], ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: NgpAccordionItem, decorators: [{
            type: Directive,
            args: [{
                    standalone: true,
                    selector: '[ngpAccordionItem]',
                    exportAs: 'ngpAccordionItem',
                    providers: [{ provide: NgpAccordionItemToken, useExisting: NgpAccordionItem }],
                    host: {
                        '[attr.data-orientation]': 'accordion.orientation()',
                        '[attr.data-open]': 'open() ? "" : null',
                        '[attr.data-disabled]': 'disabled() || accordion.disabled() ? "" : null',
                    },
                }]
        }] });

/**
 * Copyright © 2024 Angular Primitives.
 * https://github.com/ng-primitives/ng-primitives
 *
 * This source code is licensed under the Apache 2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */
class NgpAccordionTrigger {
    constructor() {
        /**
         * Access the parent accordion.
         */
        this.accordion = injectAccordion();
        /**
         * The item instance.
         */
        this.item = injectAccordionItem();
        /**
         * The id of the trigger.
         */
        this.id = input(uniqueId('ngp-accordion-trigger'));
    }
    /**
     * Toggle the accordion item.
     */
    toggle() {
        if (this.item.disabled() || this.accordion.disabled()) {
            return;
        }
        this.accordion.toggle(this.item.value());
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: NgpAccordionTrigger, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "17.1.0", version: "18.2.13", type: NgpAccordionTrigger, isStandalone: true, selector: "[ngpAccordionTrigger]", inputs: { id: { classPropertyName: "id", publicName: "id", isSignal: true, isRequired: false, transformFunction: null } }, host: { listeners: { "click": "toggle()" }, properties: { "id": "id()", "attr.data-orientation": "accordion.orientation()", "attr.data-open": "item.open() ? \"\" : null", "attr.data-disabled": "item.disabled() || accordion.disabled() ? \"\" : null", "attr.aria-controls": "item.contentId()", "attr.aria-expanded": "item.open()" } }, providers: [{ provide: NgpAccordionTriggerToken, useExisting: NgpAccordionTrigger }], exportAs: ["ngpAccordionTrigger"], ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: NgpAccordionTrigger, decorators: [{
            type: Directive,
            args: [{
                    standalone: true,
                    selector: '[ngpAccordionTrigger]',
                    exportAs: 'ngpAccordionTrigger',
                    providers: [{ provide: NgpAccordionTriggerToken, useExisting: NgpAccordionTrigger }],
                    host: {
                        '[id]': 'id()',
                        '[attr.data-orientation]': 'accordion.orientation()',
                        '[attr.data-open]': 'item.open() ? "" : null',
                        '[attr.data-disabled]': 'item.disabled() || accordion.disabled() ? "" : null',
                        '[attr.aria-controls]': 'item.contentId()',
                        '[attr.aria-expanded]': 'item.open()',
                    },
                }]
        }], propDecorators: { toggle: [{
                type: HostListener,
                args: ['click']
            }] } });

/**
 * Copyright © 2024 Angular Primitives.
 * https://github.com/ng-primitives/ng-primitives
 *
 * This source code is licensed under the Apache 2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */
const defaultAccordionConfig = {
    type: 'single',
    collapsible: false,
    orientation: 'vertical',
};
const NgpAccordionConfigToken = new InjectionToken('NgpAccordionConfigToken');
/**
 * Provide the default Accordion configuration
 * @param config The Accordion configuration
 * @returns The provider
 */
function provideAccordionConfig(config) {
    return [
        {
            provide: NgpAccordionConfigToken,
            useValue: { ...defaultAccordionConfig, ...config },
        },
    ];
}
/**
 * Inject the Accordion configuration
 * @returns The global Accordion configuration
 */
function injectAccordionConfig() {
    return inject(NgpAccordionConfigToken, { optional: true }) ?? defaultAccordionConfig;
}

class NgpAccordion {
    constructor() {
        /**
         * Access the global accordion configuration.
         */
        this.config = injectAccordionConfig();
        /**
         * The type of the accordion.
         */
        this.type = input(this.config.type, {
            alias: 'ngpAccordionType',
        });
        /**
         * Whether the accordion is collapsible.
         */
        this.collapsible = input(this.config.collapsible, {
            alias: 'ngpAccordionCollapsible',
            transform: booleanAttribute,
        });
        /**
         * The value of the accordion.
         */
        this.value = model(null, {
            alias: 'ngpAccordionValue',
        });
        /**
         * Whether the accordion is disabled.
         */
        this.disabled = input(false, {
            alias: 'ngpAccordionDisabled',
            transform: booleanAttribute,
        });
        /**
         * The accordion orientation.
         */
        this.orientation = input(this.config.orientation, {
            alias: 'ngpAccordionOrientation',
        });
    }
    /**
     * @param value The value to check.
     * @returns Whether the value is open.
     * @internal
     */
    isOpen(value) {
        if (this.type() === 'multiple') {
            return this.value()?.includes(value) ?? false;
        }
        return this.value() === value;
    }
    toggle(value) {
        const isOpen = this.isOpen(value);
        // if we are in single mode and the value is already open and the accordion is not collapsible, do nothing
        if (this.type() === 'single' && isOpen && !this.collapsible()) {
            return;
        }
        // if we are in single mode then toggle the value
        if (this.type() === 'single') {
            this.value.set(isOpen ? null : value);
            return;
        }
        // if we are in multiple mode then toggle the value
        const values = this.value() ?? [];
        if (isOpen) {
            this.value.set(values.filter(v => v !== value));
        }
        else {
            this.value.set([...values, value]);
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: NgpAccordion, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "17.1.0", version: "18.2.13", type: NgpAccordion, isStandalone: true, selector: "[ngpAccordion]", inputs: { type: { classPropertyName: "type", publicName: "ngpAccordionType", isSignal: true, isRequired: false, transformFunction: null }, collapsible: { classPropertyName: "collapsible", publicName: "ngpAccordionCollapsible", isSignal: true, isRequired: false, transformFunction: null }, value: { classPropertyName: "value", publicName: "ngpAccordionValue", isSignal: true, isRequired: false, transformFunction: null }, disabled: { classPropertyName: "disabled", publicName: "ngpAccordionDisabled", isSignal: true, isRequired: false, transformFunction: null }, orientation: { classPropertyName: "orientation", publicName: "ngpAccordionOrientation", isSignal: true, isRequired: false, transformFunction: null } }, outputs: { value: "ngpAccordionValueChange" }, host: { properties: { "attr.data-orientation": "orientation()", "attr.data-disabled": "disabled() ? \"\" : null" } }, providers: [{ provide: NgpAccordionToken, useExisting: NgpAccordion }], exportAs: ["ngpAccordion"], ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: NgpAccordion, decorators: [{
            type: Directive,
            args: [{
                    standalone: true,
                    selector: '[ngpAccordion]',
                    exportAs: 'ngpAccordion',
                    providers: [{ provide: NgpAccordionToken, useExisting: NgpAccordion }],
                    host: {
                        '[attr.data-orientation]': 'orientation()',
                        '[attr.data-disabled]': 'disabled() ? "" : null',
                    },
                }]
        }] });

/**
 * Copyright © 2024 Angular Primitives.
 * https://github.com/ng-primitives/ng-primitives
 *
 * This source code is licensed under the Apache 2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */

/**
 * Generated bundle index. Do not edit.
 */

export { NgpAccordion, NgpAccordionContent, NgpAccordionContentToken, NgpAccordionItem, NgpAccordionItemToken, NgpAccordionToken, NgpAccordionTrigger, NgpAccordionTriggerToken, provideAccordionConfig };
//# sourceMappingURL=ng-primitives-accordion.mjs.map
