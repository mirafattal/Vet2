{"version":3,"file":"ng-primitives-roving-focus.mjs","sources":["../../../../packages/ng-primitives/roving-focus/src/roving-focus-group/roving-focus-group.token.ts","../../../../packages/ng-primitives/roving-focus/src/roving-focus-group/roving-focus-group.directive.ts","../../../../packages/ng-primitives/roving-focus/src/roving-focus-item/roving-focus-item.token.ts","../../../../packages/ng-primitives/roving-focus/src/roving-focus-item/roving-focus-item.directive.ts","../../../../packages/ng-primitives/roving-focus/src/index.ts","../../../../packages/ng-primitives/roving-focus/src/ng-primitives-roving-focus.ts"],"sourcesContent":["/**\n * Copyright © 2024 Angular Primitives.\n * https://github.com/ng-primitives/ng-primitives\n *\n * This source code is licensed under the Apache 2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport { InjectionToken, inject } from '@angular/core';\nimport type { NgpRovingFocusGroup } from './roving-focus-group.directive';\n\nexport const NgpRovingFocusGroupToken = new InjectionToken<NgpRovingFocusGroup>(\n  'NgpRovingFocusGroupToken',\n);\n\n/**\n * Inject the RovingFocusGroup directive instance\n * @returns The RovingFocusGroup directive instance\n */\nexport function injectRovingFocusGroup(): NgpRovingFocusGroup {\n  return inject(NgpRovingFocusGroupToken);\n}\n","/**\n * Copyright © 2024 Angular Primitives.\n * https://github.com/ng-primitives/ng-primitives\n *\n * This source code is licensed under the Apache 2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport { FocusOrigin } from '@angular/cdk/a11y';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { BooleanInput } from '@angular/cdk/coercion';\nimport { booleanAttribute, Directive, inject, input, model, signal } from '@angular/core';\nimport { injectOrientation, NgpCanOrientate, NgpOrientation } from 'ng-primitives/internal';\nimport { NgpRovingFocusItem } from '../roving-focus-item/roving-focus-item.directive';\nimport { NgpRovingFocusGroupToken } from './roving-focus-group.token';\n\n@Directive({\n  standalone: true,\n  selector: '[ngpRovingFocusGroup]',\n  exportAs: 'ngpRovingFocusGroup',\n  providers: [{ provide: NgpRovingFocusGroupToken, useExisting: NgpRovingFocusGroup }],\n})\nexport class NgpRovingFocusGroup implements NgpCanOrientate {\n  /**\n   * Access the directionality service.\n   */\n  private readonly directionality = inject(Directionality);\n\n  /**\n   * Determine the orientation of the roving focus group.\n   * @default 'vertical'\n   */\n  readonly orientation = model<NgpOrientation>('vertical', {\n    alias: 'ngpRovingFocusGroupOrientation',\n  });\n\n  /**\n   * Determine the orientation of the roving focus group.\n   */\n  readonly groupOrientation = injectOrientation(this.orientation);\n\n  /**\n   * Determine if focus should wrap when the end or beginning is reached.\n   */\n  readonly wrap = input<boolean, BooleanInput>(true, {\n    alias: 'ngpRovingFocusGroupWrap',\n    transform: booleanAttribute,\n  });\n\n  /**\n   * Determine if the home and end keys should navigate to the first and last items.\n   */\n  readonly homeEnd = input<boolean, BooleanInput>(true, {\n    alias: 'ngpRovingFocusGroupHomeEnd',\n    transform: booleanAttribute,\n  });\n\n  /**\n   * Determine if the roving focus group is disabled.\n   */\n  readonly disabled = input<boolean, BooleanInput>(false, {\n    alias: 'ngpRovingFocusGroupDisabled',\n    transform: booleanAttribute,\n  });\n\n  /**\n   * Store the items in the roving focus group.\n   */\n  private readonly items = signal<NgpRovingFocusItem[]>([]);\n\n  /**\n   * Get the items in the roving focus group sorted by order.\n   */\n  private get sortedItems() {\n    return this.items().sort((a, b) => {\n      // sort the items by their position in the document\n      return a.elementRef.nativeElement.compareDocumentPosition(b.elementRef.nativeElement) &\n        Node.DOCUMENT_POSITION_FOLLOWING\n        ? -1\n        : 1;\n    });\n  }\n\n  /**\n   * Store the active item in the roving focus group.\n   * @internal\n   */\n  readonly activeItem = signal<NgpRovingFocusItem | null>(null);\n\n  /**\n   * Register an item with the roving focus group.\n   * @param item The item to register\n   * @internal\n   */\n  register(item: NgpRovingFocusItem): void {\n    this.items.update(items => [...items, item]);\n\n    // if there is no active item, make the first item the tabbable item\n    if (!this.activeItem()) {\n      this.activeItem.set(item);\n    }\n  }\n\n  /**\n   * Unregister an item with the roving focus group.\n   * @param item The item to unregister\n   * @internal\n   */\n  unregister(item: NgpRovingFocusItem): void {\n    this.items.update(items => items.filter(i => i !== item));\n\n    // check if the unregistered item is the active item\n    if (this.activeItem() === item) {\n      // if the active item is unregistered, activate the first item\n      this.activeItem.set(this.items()[0] ?? null);\n    }\n  }\n\n  /**\n   * Activate an item in the roving focus group.\n   * @param item The item to activate\n   * @param origin The origin of the focus change\n   */\n  setActiveItem(item: NgpRovingFocusItem | null, origin: FocusOrigin = 'program'): void {\n    this.activeItem.set(item);\n    item?.focus(origin);\n  }\n\n  /**\n   * Activate the first item in the roving focus group.\n   * @param origin The origin of the focus change\n   */\n  private activateFirstItem(origin: FocusOrigin): void {\n    // find the first item that is not disabled\n    const item = this.sortedItems.find(i => !i.disabled()) ?? null;\n\n    // set the first item as the active item\n    this.setActiveItem(item, origin);\n  }\n\n  /**\n   * Activate the last item in the roving focus group.\n   * @param origin The origin of the focus change\n   */\n  private activateLastItem(origin: FocusOrigin): void {\n    // find the last item that is not disabled\n    const item = [...this.sortedItems].reverse().find(i => !i.disabled()) ?? null;\n\n    // set the last item as the active item\n    this.setActiveItem(item, origin);\n  }\n\n  /**\n   * Activate the next item in the roving focus group.\n   * @param origin The origin of the focus change\n   */\n  private activateNextItem(origin: FocusOrigin): void {\n    const activeItem = this.activeItem();\n\n    // if there is no active item, activate the first item\n    if (!activeItem) {\n      this.activateFirstItem(origin);\n      return;\n    }\n\n    // find the index of the active item\n    const index = this.sortedItems.indexOf(activeItem);\n\n    // find the next item that is not disabled\n    const item = this.sortedItems.slice(index + 1).find(i => !i.disabled()) ?? null;\n\n    // if we are at the end of the list, wrap to the beginning\n    if (!item && this.wrap()) {\n      this.activateFirstItem(origin);\n      return;\n    }\n\n    // if there is no next item, do nothing\n    if (!item) {\n      return;\n    }\n\n    // set the next item as the active item\n    this.setActiveItem(item, origin);\n  }\n\n  /**\n   * Activate the previous item in the roving focus group.\n   * @param origin The origin of the focus change\n   */\n  private activatePreviousItem(origin: FocusOrigin): void {\n    const activeItem = this.activeItem();\n\n    // if there is no active item, activate the last item\n    if (!activeItem) {\n      this.activateLastItem(origin);\n      return;\n    }\n\n    // find the index of the active item\n    const index = this.sortedItems.indexOf(activeItem);\n\n    // find the previous item that is not disabled\n    const item =\n      this.sortedItems\n        .slice(0, index)\n        .reverse()\n        .find(i => !i.disabled()) ?? null;\n\n    // if we are at the beginning of the list, wrap to the end\n    if (!item && this.wrap()) {\n      this.activateLastItem(origin);\n      return;\n    }\n\n    // if there is no previous item, do nothing\n    if (!item) {\n      return;\n    }\n\n    // set the previous item as the active item\n    this.setActiveItem(item, origin);\n  }\n\n  /**\n   * Handle keyboard navigation for the roving focus group.\n   * @param event The keyboard event\n   * @internal\n   */\n  onKeydown(event: KeyboardEvent): void {\n    if (this.disabled()) {\n      return;\n    }\n\n    switch (event.key) {\n      case 'ArrowUp':\n        if (this.groupOrientation() === 'vertical') {\n          event.preventDefault();\n          this.activatePreviousItem('keyboard');\n        }\n        break;\n      case 'ArrowDown':\n        if (this.groupOrientation() === 'vertical') {\n          event.preventDefault();\n          this.activateNextItem('keyboard');\n        }\n        break;\n      case 'ArrowLeft':\n        if (this.groupOrientation() === 'horizontal') {\n          event.preventDefault();\n\n          if (this.directionality.value === 'ltr') {\n            this.activatePreviousItem('keyboard');\n          } else {\n            this.activateNextItem('keyboard');\n          }\n        }\n        break;\n      case 'ArrowRight':\n        if (this.groupOrientation() === 'horizontal') {\n          event.preventDefault();\n\n          if (this.directionality.value === 'ltr') {\n            this.activateNextItem('keyboard');\n          } else {\n            this.activatePreviousItem('keyboard');\n          }\n        }\n        break;\n      case 'Home':\n        if (this.homeEnd()) {\n          event.preventDefault();\n          this.activateFirstItem('keyboard');\n        }\n        break;\n      case 'End':\n        if (this.homeEnd()) {\n          event.preventDefault();\n          this.activateLastItem('keyboard');\n        }\n        break;\n    }\n  }\n}\n","/**\n * Copyright © 2024 Angular Primitives.\n * https://github.com/ng-primitives/ng-primitives\n *\n * This source code is licensed under the Apache 2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport { InjectionToken, inject } from '@angular/core';\nimport type { NgpRovingFocusItem } from './roving-focus-item.directive';\n\nexport const NgpRovingFocusItemToken = new InjectionToken<NgpRovingFocusItem>(\n  'NgpRovingFocusItemToken',\n);\n\n/**\n * Inject the RovingFocusItem directive instance\n * @returns The RovingFocusItem directive instance\n */\nexport function injectRovingFocusItem(): NgpRovingFocusItem {\n  return inject(NgpRovingFocusItemToken);\n}\n","/**\n * Copyright © 2024 Angular Primitives.\n * https://github.com/ng-primitives/ng-primitives\n *\n * This source code is licensed under the Apache 2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport { FocusMonitor, FocusOrigin } from '@angular/cdk/a11y';\nimport { BooleanInput } from '@angular/cdk/coercion';\nimport {\n  Directive,\n  ElementRef,\n  HostListener,\n  OnDestroy,\n  OnInit,\n  booleanAttribute,\n  computed,\n  inject,\n  input,\n} from '@angular/core';\nimport { injectRovingFocusGroup } from '../roving-focus-group/roving-focus-group.token';\nimport { NgpRovingFocusItemToken } from './roving-focus-item.token';\n\n@Directive({\n  standalone: true,\n  selector: '[ngpRovingFocusItem]',\n  exportAs: 'ngpRovingFocusItem',\n  providers: [{ provide: NgpRovingFocusItemToken, useExisting: NgpRovingFocusItem }],\n  host: {\n    '[attr.tabindex]': 'tabindex()',\n  },\n})\nexport class NgpRovingFocusItem implements OnInit, OnDestroy {\n  /**\n   * Access the group the roving focus item belongs to.\n   */\n  private readonly group = injectRovingFocusGroup();\n\n  /**\n   * Access the focus monitor service.\n   */\n  private readonly focusMonitor = inject(FocusMonitor);\n\n  /**\n   * Access the element the roving focus item is attached to.\n   */\n  readonly elementRef = inject<ElementRef<HTMLElement>>(ElementRef);\n\n  /**\n   * Define if the item is disabled.\n   */\n  readonly disabled = input<boolean, BooleanInput>(false, {\n    alias: 'ngpRovingFocusItemDisabled',\n    transform: booleanAttribute,\n  });\n\n  /**\n   * Derive the tabindex of the roving focus item.\n   */\n  readonly tabindex = computed(() =>\n    !this.group.disabled() && this.group.activeItem() === this ? 0 : -1,\n  );\n\n  /**\n   * Initialize the roving focus item.\n   */\n  ngOnInit(): void {\n    this.group.register(this);\n  }\n\n  /**\n   * Clean up the roving focus item.\n   */\n  ngOnDestroy(): void {\n    this.group.unregister(this);\n  }\n\n  /**\n   * Forward the keydown event to the roving focus group.\n   * @param event The keyboard event\n   */\n  @HostListener('keydown', ['$event'])\n  protected onKeydown(event: KeyboardEvent): void {\n    if (this.disabled()) {\n      return;\n    }\n\n    this.group.onKeydown(event);\n  }\n\n  /**\n   * Activate the roving focus item on click.\n   */\n  @HostListener('click')\n  protected activate(): void {\n    if (this.disabled()) {\n      return;\n    }\n\n    this.group.setActiveItem(this, 'mouse');\n  }\n\n  /**\n   * Focus the roving focus item.\n   * @param origin The origin of the focus\n   */\n  focus(origin: FocusOrigin): void {\n    this.focusMonitor.focusVia(this.elementRef, origin);\n  }\n}\n","/**\n * Copyright © 2024 Angular Primitives.\n * https://github.com/ng-primitives/ng-primitives\n *\n * This source code is licensed under the Apache 2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nexport { NgpRovingFocusGroup } from './roving-focus-group/roving-focus-group.directive';\nexport {\n  NgpRovingFocusGroupToken,\n  injectRovingFocusGroup,\n} from './roving-focus-group/roving-focus-group.token';\nexport { NgpRovingFocusItem } from './roving-focus-item/roving-focus-item.directive';\nexport { NgpRovingFocusItemToken } from './roving-focus-item/roving-focus-item.token';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":[],"mappings":"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"}