import * as i0 from '@angular/core';
import { InjectionToken, inject, model, input, booleanAttribute, Directive, computed, HostListener } from '@angular/core';
import * as i2 from 'ng-primitives/form-field';
import { NgpFormControl } from 'ng-primitives/form-field';
import { NgpDisabledToken } from 'ng-primitives/internal';
import * as i1 from 'ng-primitives/roving-focus';
import { NgpRovingFocusGroup, NgpRovingFocusItem } from 'ng-primitives/roving-focus';
import * as i2$1 from 'ng-primitives/interactions';
import { NgpHover, NgpPress, NgpFocusVisible } from 'ng-primitives/interactions';

/**
 * Copyright © 2024 Angular Primitives.
 * https://github.com/ng-primitives/ng-primitives
 *
 * This source code is licensed under the Apache 2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */
const NgpRadioGroupToken = new InjectionToken('NgpRadioGroupToken');
/**
 * Injects the radio group directive.
 * @returns The radio group directive.
 */
function injectRadioGroup() {
    return inject(NgpRadioGroupToken);
}

class NgpRadioGroup {
    constructor() {
        /**
         * The value of the radio group.
         */
        this.value = model(null, { alias: 'ngpRadioGroupValue' });
        /**
         * Whether the radio group is disabled.
         */
        this.disabled = input(false, {
            alias: 'ngpRadioGroupDisabled',
            transform: booleanAttribute,
        });
        /**
         * The orientation of the radio group.
         * @default 'horizontal'
         */
        this.orientation = input('horizontal', {
            alias: 'ngpRadioGroupOrientation',
        });
    }
    /**
     * Select a radio item.
     * @param value The value of the radio item to select.
     */
    select(value) {
        this.value.set(value);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: NgpRadioGroup, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "17.1.0", version: "18.2.13", type: NgpRadioGroup, isStandalone: true, selector: "[ngpRadioGroup]", inputs: { value: { classPropertyName: "value", publicName: "ngpRadioGroupValue", isSignal: true, isRequired: false, transformFunction: null }, disabled: { classPropertyName: "disabled", publicName: "ngpRadioGroupDisabled", isSignal: true, isRequired: false, transformFunction: null }, orientation: { classPropertyName: "orientation", publicName: "ngpRadioGroupOrientation", isSignal: true, isRequired: false, transformFunction: null } }, outputs: { value: "ngpRadioGroupValueChange" }, host: { attributes: { "role": "radiogroup" }, properties: { "attr.aria-orientation": "orientation()", "attr.data-orientation": "orientation()" } }, providers: [
            { provide: NgpRadioGroupToken, useExisting: NgpRadioGroup },
            { provide: NgpDisabledToken, useExisting: NgpRadioGroup },
        ], hostDirectives: [{ directive: i1.NgpRovingFocusGroup }, { directive: i2.NgpFormControl }], ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: NgpRadioGroup, decorators: [{
            type: Directive,
            args: [{
                    selector: '[ngpRadioGroup]',
                    standalone: true,
                    providers: [
                        { provide: NgpRadioGroupToken, useExisting: NgpRadioGroup },
                        { provide: NgpDisabledToken, useExisting: NgpRadioGroup },
                    ],
                    hostDirectives: [NgpRovingFocusGroup, NgpFormControl],
                    host: {
                        role: 'radiogroup',
                        '[attr.aria-orientation]': 'orientation()',
                        '[attr.data-orientation]': 'orientation()',
                    },
                }]
        }] });

/**
 * Copyright © 2024 Angular Primitives.
 * https://github.com/ng-primitives/ng-primitives
 *
 * This source code is licensed under the Apache 2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */
const NgpRadioItemToken = new InjectionToken('NgpRadioItemToken');
/**
 * Inject the RadioItem directive instance
 * @returns The RadioItem directive instance
 */
function injectRadioItem() {
    return inject(NgpRadioItemToken);
}

/**
 * Copyright © 2024 Angular Primitives.
 * https://github.com/ng-primitives/ng-primitives
 *
 * This source code is licensed under the Apache 2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */
class NgpRadioIndicator {
    constructor() {
        /**
         * Access the radio group.
         */
        this.radioGroup = injectRadioGroup();
        /**
         * Access the radio group item.
         */
        this.radioItem = injectRadioItem();
        /**
         * Determine if the radio indicator is checked.
         */
        this.checked = computed(() => this.radioGroup.value() === this.radioItem.value());
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: NgpRadioIndicator, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "18.2.13", type: NgpRadioIndicator, isStandalone: true, selector: "[ngpRadioIndicator]", host: { properties: { "attr.data-checked": "checked() ? \"\" : null", "attr.data-disabled": "radioItem.disabled() ? \"\" : null" } }, hostDirectives: [{ directive: i2$1.NgpHover }, { directive: i2$1.NgpPress }], ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: NgpRadioIndicator, decorators: [{
            type: Directive,
            args: [{
                    selector: '[ngpRadioIndicator]',
                    standalone: true,
                    host: {
                        '[attr.data-checked]': 'checked() ? "" : null',
                        '[attr.data-disabled]': 'radioItem.disabled() ? "" : null',
                    },
                    hostDirectives: [NgpHover, NgpPress],
                }]
        }] });

class NgpRadioItem {
    constructor() {
        /**
         * Access the radio group.
         */
        this.radioGroup = injectRadioGroup();
        /**
         * The value of the radio item.
         */
        this.value = input.required({ alias: 'ngpRadioItemValue' });
        /**
         * Whether the radio item is disabled.
         * @default false
         */
        this.disabled = input(false, {
            alias: 'ngpRadioItemDisabled',
            transform: booleanAttribute,
        });
        /**
         * Whether the radio item is checked.
         */
        this.checked = computed(() => this.radioGroup.value() === this.value());
    }
    /**
     * When the item receives focus, select it.
     * @internal
     */
    onFocus() {
        this.radioGroup.select(this.value());
    }
    /**
     * When the item receives a click, select it.
     * @internal
     */
    onClick() {
        this.radioGroup.select(this.value());
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: NgpRadioItem, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "17.1.0", version: "18.2.13", type: NgpRadioItem, isStandalone: true, selector: "[ngpRadioItem]", inputs: { value: { classPropertyName: "value", publicName: "ngpRadioItemValue", isSignal: true, isRequired: true, transformFunction: null }, disabled: { classPropertyName: "disabled", publicName: "ngpRadioItemDisabled", isSignal: true, isRequired: false, transformFunction: null } }, host: { attributes: { "role": "radio" }, listeners: { "focus": "onFocus()", "click": "onClick()" }, properties: { "attr.aria-checked": "checked() ? \"true\" : \"false\"", "attr.data-disabled": "disabled() ? \"\" : null", "attr.data-checked": "checked() ? \"\" : null" } }, providers: [{ provide: NgpRadioItemToken, useExisting: NgpRadioItem }], hostDirectives: [{ directive: i1.NgpRovingFocusItem }, { directive: i2$1.NgpHover }, { directive: i2$1.NgpFocusVisible }, { directive: i2$1.NgpPress }], ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: NgpRadioItem, decorators: [{
            type: Directive,
            args: [{
                    selector: '[ngpRadioItem]',
                    standalone: true,
                    hostDirectives: [NgpRovingFocusItem, NgpHover, NgpFocusVisible, NgpPress],
                    providers: [{ provide: NgpRadioItemToken, useExisting: NgpRadioItem }],
                    host: {
                        role: 'radio',
                        '[attr.aria-checked]': 'checked() ? "true" : "false"',
                        '[attr.data-disabled]': 'disabled() ? "" : null',
                        '[attr.data-checked]': 'checked() ? "" : null',
                    },
                }]
        }], propDecorators: { onFocus: [{
                type: HostListener,
                args: ['focus']
            }], onClick: [{
                type: HostListener,
                args: ['click']
            }] } });

/**
 * Copyright © 2024 Angular Primitives.
 * https://github.com/ng-primitives/ng-primitives
 *
 * This source code is licensed under the Apache 2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */

/**
 * Generated bundle index. Do not edit.
 */

export { NgpRadioGroup, NgpRadioGroupToken, NgpRadioIndicator, NgpRadioItem, NgpRadioItemToken };
//# sourceMappingURL=ng-primitives-radio.mjs.map
