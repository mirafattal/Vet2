"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.tabsGenerator = tabsGenerator;
/**
 * Copyright Â© 2024 Angular Primitives.
 * https://github.com/ng-primitives/ng-primitives
 *
 * This source code is licensed under the Apache 2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */
const devkit_1 = require("@nx/devkit");
const path = require("path");
const panel = 'panel';
const tab = 'tab';
const list = 'list';
const button = 'button';
const panelStyles = `
:host { }

:host:not([data-active]) {
display: none;
}
`;
const buttonStyles = `
:host { }
:host[data-focus-visible] {}
:host[data-active] {}
:host {}
`;
async function tabsGenerator(tree, options) {
    const { fileName } = (0, devkit_1.names)(options.name);
    (0, devkit_1.generateFiles)(tree, path.join(__dirname, `files/${tab}`), options.directory, {
        ...options,
        ...(0, devkit_1.names)(options.name),
        selector: `${options.prefix}-${fileName}`,
        styles: `:host { }`,
        template: `<ng-content />`,
    });
    (0, devkit_1.generateFiles)(tree, path.join(__dirname, `files/${panel}`), options.directory, {
        ...options,
        ...(0, devkit_1.names)(`${options.name}-${panel}`),
        selector: `${options.prefix}-${fileName}-${panel}`,
        styles: panelStyles,
        template: `<ng-content />`,
    });
    (0, devkit_1.generateFiles)(tree, path.join(__dirname, `files/${list}`), options.directory, {
        ...options,
        ...(0, devkit_1.names)(`${options.name}-${list}`),
        selector: `${options.prefix}-${fileName}-${list}`,
        styles: `:host { }`,
        template: `<ng-content />`,
    });
    (0, devkit_1.generateFiles)(tree, path.join(__dirname, `files/${button}`), options.directory, {
        ...options,
        ...(0, devkit_1.names)(`${options.name}-${button}`),
        selector: `button[${options.prefix}-${fileName}-${button}]`,
        styles: buttonStyles,
        template: `<ng-content />`,
    });
    if (options.inlineStyle) {
        tree.delete(path.join(options.directory, `${fileName}.component.${options.style}`));
        tree.delete(path.join(options.directory, `${fileName}-${panel}.component.${options.style}`));
        tree.delete(path.join(options.directory, `${fileName}-${list}.component.${options.style}`));
        tree.delete(path.join(options.directory, `${fileName}-${button}.component.${options.style}`));
    }
    if (options.inlineTemplate) {
        tree.delete(path.join(options.directory, `${fileName}.component.html`));
        tree.delete(path.join(options.directory, `${fileName}-${panel}.component.html`));
        tree.delete(path.join(options.directory, `${fileName}-${list}.component.html`));
        tree.delete(path.join(options.directory, `${fileName}-${button}.component.html`));
    }
    await (0, devkit_1.formatFiles)(tree);
}
exports.default = tabsGenerator;
//# sourceMappingURL=generator.js.map