/**
 * @fileoverview added by tsickle
 * Generated from: lib/circular-measures.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as d3 from 'd3';
var CircularMeasures = /** @class */ (function () {
    function CircularMeasures() {
    }
    /**
     * calcRadius
     *
     * Calculate the minimum size between the height and width of the container element
     * with this value i will calculate the radius of circle.
     *
     * @param width width of container
     * @param height width of container
     * @returns number
     */
    /**
     * calcRadius
     *
     * Calculate the minimum size between the height and width of the container element
     * with this value i will calculate the radius of circle.
     *
     * @param {?} width width of container
     * @param {?} height width of container
     * @return {?} number
     */
    CircularMeasures.prototype.calcRadius = /**
     * calcRadius
     *
     * Calculate the minimum size between the height and width of the container element
     * with this value i will calculate the radius of circle.
     *
     * @param {?} width width of container
     * @param {?} height width of container
     * @return {?} number
     */
    function (width, height) {
        return width > height
            ? height
            : width;
    };
    /**
     * arcValue
     *
     * Calculate the arc to show.
     * Convert the pass value into a number that represent the degrees in a circle
     *
     * @param value value to represent
     * @returns number
     */
    /**
     * arcValue
     *
     * Calculate the arc to show.
     * Convert the pass value into a number that represent the degrees in a circle
     *
     * @param {?} value value to represent
     * @return {?} number
     */
    CircularMeasures.prototype.arcValue = /**
     * arcValue
     *
     * Calculate the arc to show.
     * Convert the pass value into a number that represent the degrees in a circle
     *
     * @param {?} value value to represent
     * @return {?} number
     */
    function (value) {
        /** @type {?} */
        var interValue = d3.scaleLinear()
            .domain([0, 100])
            .range([0, 360]);
        return interValue(value);
    };
    /**
     * toRadians
     *
     * Convert degrees values in radians
     *
     * @param degree value of degree
     * @returns number
     */
    /**
     * toRadians
     *
     * Convert degrees values in radians
     *
     * @param {?} degree value of degree
     * @return {?} number
     */
    CircularMeasures.prototype.toRadians = /**
     * toRadians
     *
     * Convert degrees values in radians
     *
     * @param {?} degree value of degree
     * @return {?} number
     */
    function (degree) {
        return degree * Math.PI / 180;
    };
    return CircularMeasures;
}());
export { CircularMeasures };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2lyY3VsYXItbWVhc3VyZXMuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BuZ3gtY2hhcnQvY29tbW9uLyIsInNvdXJjZXMiOlsibGliL2NpcmN1bGFyLW1lYXN1cmVzLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEtBQUssRUFBRSxNQUFNLElBQUksQ0FBQztBQUV6QjtJQUVFO0lBQWdCLENBQUM7SUFFakI7Ozs7Ozs7OztPQVNHOzs7Ozs7Ozs7OztJQUNILHFDQUFVOzs7Ozs7Ozs7O0lBQVYsVUFBVyxLQUFhLEVBQUUsTUFBYztRQUN0QyxPQUFPLEtBQUssR0FBRyxNQUFNO1lBQ25CLENBQUMsQ0FBQyxNQUFNO1lBQ1IsQ0FBQyxDQUFDLEtBQUssQ0FBQztJQUNaLENBQUM7SUFLRDs7Ozs7Ozs7T0FRRzs7Ozs7Ozs7OztJQUNILG1DQUFROzs7Ozs7Ozs7SUFBUixVQUFTLEtBQWE7O1lBQ2QsVUFBVSxHQUFHLEVBQUUsQ0FBQyxXQUFXLEVBQUU7YUFDaEMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDO2FBQ2hCLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQztRQUVsQixPQUFPLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUMzQixDQUFDO0lBS0Q7Ozs7Ozs7T0FPRzs7Ozs7Ozs7O0lBQ0gsb0NBQVM7Ozs7Ozs7O0lBQVQsVUFBVSxNQUFjO1FBQ3RCLE9BQU8sTUFBTSxHQUFHLElBQUksQ0FBQyxFQUFFLEdBQUcsR0FBRyxDQUFDO0lBQ2hDLENBQUM7SUFFSCx1QkFBQztBQUFELENBQUMsQUF2REQsSUF1REMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBkMyBmcm9tICdkMyc7XG5cbmV4cG9ydCBjbGFzcyBDaXJjdWxhck1lYXN1cmVzIHtcblxuICBjb25zdHJ1Y3RvcigpIHsgfVxuXG4gIC8qKlxuICAgKiBjYWxjUmFkaXVzXG4gICAqXG4gICAqIENhbGN1bGF0ZSB0aGUgbWluaW11bSBzaXplIGJldHdlZW4gdGhlIGhlaWdodCBhbmQgd2lkdGggb2YgdGhlIGNvbnRhaW5lciBlbGVtZW50XG4gICAqIHdpdGggdGhpcyB2YWx1ZSBpIHdpbGwgY2FsY3VsYXRlIHRoZSByYWRpdXMgb2YgY2lyY2xlLlxuICAgKlxuICAgKiBAcGFyYW0gd2lkdGggd2lkdGggb2YgY29udGFpbmVyXG4gICAqIEBwYXJhbSBoZWlnaHQgd2lkdGggb2YgY29udGFpbmVyXG4gICAqIEByZXR1cm5zIG51bWJlclxuICAgKi9cbiAgY2FsY1JhZGl1cyh3aWR0aDogbnVtYmVyLCBoZWlnaHQ6IG51bWJlcik6IG51bWJlciB7XG4gICAgcmV0dXJuIHdpZHRoID4gaGVpZ2h0XG4gICAgICA/IGhlaWdodFxuICAgICAgOiB3aWR0aDtcbiAgfVxuXG5cblxuXG4gIC8qKlxuICAgKiBhcmNWYWx1ZVxuICAgKlxuICAgKiBDYWxjdWxhdGUgdGhlIGFyYyB0byBzaG93LlxuICAgKiBDb252ZXJ0IHRoZSBwYXNzIHZhbHVlIGludG8gYSBudW1iZXIgdGhhdCByZXByZXNlbnQgdGhlIGRlZ3JlZXMgaW4gYSBjaXJjbGVcbiAgICpcbiAgICogQHBhcmFtIHZhbHVlIHZhbHVlIHRvIHJlcHJlc2VudFxuICAgKiBAcmV0dXJucyBudW1iZXJcbiAgICovXG4gIGFyY1ZhbHVlKHZhbHVlOiBudW1iZXIpOiBudW1iZXIge1xuICAgIGNvbnN0IGludGVyVmFsdWUgPSBkMy5zY2FsZUxpbmVhcigpXG4gICAgICAuZG9tYWluKFswLCAxMDBdKVxuICAgICAgLnJhbmdlKFswLCAzNjBdKTtcblxuICAgIHJldHVybiBpbnRlclZhbHVlKHZhbHVlKTtcbiAgfVxuXG5cblxuXG4gIC8qKlxuICAgKiB0b1JhZGlhbnNcbiAgICpcbiAgICogQ29udmVydCBkZWdyZWVzIHZhbHVlcyBpbiByYWRpYW5zXG4gICAqXG4gICAqIEBwYXJhbSBkZWdyZWUgdmFsdWUgb2YgZGVncmVlXG4gICAqIEByZXR1cm5zIG51bWJlclxuICAgKi9cbiAgdG9SYWRpYW5zKGRlZ3JlZTogbnVtYmVyKTogbnVtYmVyIHtcbiAgICByZXR1cm4gZGVncmVlICogTWF0aC5QSSAvIDE4MDtcbiAgfVxuXG59XG4iXX0=