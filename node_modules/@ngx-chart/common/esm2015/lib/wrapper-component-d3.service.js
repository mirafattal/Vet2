/**
 * @fileoverview added by tsickle
 * Generated from: lib/wrapper-component-d3.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as d3 from 'd3';
export class WrapperComponentD3 {
    /**
     * @param {?} _elementRef
     */
    constructor(_elementRef) {
        // Initialize private variables
        this._uid = this.generateUID();
        this._height = _elementRef.nativeElement.clientHeight;
        this._width = _elementRef.nativeElement.clientWidth;
        // Add Id to Element;
        _elementRef.nativeElement.id = this._uid;
        // Create svg container
        this._svgContainer = d3.select(`#${this._uid}`)
            .append('svg')
            .attr('id', `svg-${this._uid}`)
            .attr('height', this._height)
            .attr('width', this._width);
    }
    /**
     * svgContainer
     * return svg container
     * @return {?} HTMLElement
     */
    get svgContainer() {
        return this._svgContainer;
    }
    /**
     * uid
     * return uid of container
     * @return {?} string
     */
    get uid() {
        return this._uid;
    }
    /**
     * height
     * return height of container
     * @return {?} number
     */
    get height() {
        return this._height;
    }
    /**
     * width
     * return width of container
     * @return {?} number
     */
    get width() {
        return this._width;
    }
    /**
     * generateUID
     * Generate new UID. The uid is make with Date.now and plus random number and then replace it to string.
     * @private
     * @return {?} string
     */
    generateUID() {
        return (Date.now() + Math.random()).toString(36).replace('.', '-');
    }
}
if (false) {
    /**
     * @type {?}
     * @private
     */
    WrapperComponentD3.prototype._svgContainer;
    /**
     * @type {?}
     * @private
     */
    WrapperComponentD3.prototype._uid;
    /**
     * @type {?}
     * @private
     */
    WrapperComponentD3.prototype._height;
    /**
     * @type {?}
     * @private
     */
    WrapperComponentD3.prototype._width;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid3JhcHBlci1jb21wb25lbnQtZDMuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BuZ3gtY2hhcnQvY29tbW9uLyIsInNvdXJjZXMiOlsibGliL3dyYXBwZXItY29tcG9uZW50LWQzLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFFQSxPQUFPLEtBQUssRUFBRSxNQUFNLElBQUksQ0FBQztBQUV6QixNQUFNLE9BQU8sa0JBQWtCOzs7O0lBTzdCLFlBQ0UsV0FBdUI7UUFHdkIsK0JBQStCO1FBQy9CLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBQy9CLElBQUksQ0FBQyxPQUFPLEdBQUcsV0FBVyxDQUFDLGFBQWEsQ0FBQyxZQUFZLENBQUM7UUFDdEQsSUFBSSxDQUFDLE1BQU0sR0FBRyxXQUFXLENBQUMsYUFBYSxDQUFDLFdBQVcsQ0FBQztRQUVwRCxxQkFBcUI7UUFDckIsV0FBVyxDQUFDLGFBQWEsQ0FBQyxFQUFFLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQztRQUV6Qyx1QkFBdUI7UUFDdkIsSUFBSSxDQUFDLGFBQWEsR0FBRyxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO2FBQzVDLE1BQU0sQ0FBQyxLQUFLLENBQUM7YUFDYixJQUFJLENBQUMsSUFBSSxFQUFFLE9BQU8sSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO2FBQzlCLElBQUksQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQzthQUM1QixJQUFJLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUNoQyxDQUFDOzs7Ozs7SUFPRCxJQUFJLFlBQVk7UUFDZCxPQUFPLElBQUksQ0FBQyxhQUFhLENBQUM7SUFDNUIsQ0FBQzs7Ozs7O0lBT0QsSUFBSSxHQUFHO1FBQ0wsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDO0lBQ25CLENBQUM7Ozs7OztJQU9ELElBQUksTUFBTTtRQUNSLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQztJQUN0QixDQUFDOzs7Ozs7SUFPRCxJQUFJLEtBQUs7UUFDUCxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUM7SUFDckIsQ0FBQzs7Ozs7OztJQU9PLFdBQVc7UUFDakIsT0FBTyxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNyRSxDQUFDO0NBQ0Y7Ozs7OztJQXJFQywyQ0FBc0I7Ozs7O0lBQ3RCLGtDQUFxQjs7Ozs7SUFDckIscUNBQXdCOzs7OztJQUN4QixvQ0FBdUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFbGVtZW50UmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCAqIGFzIGQzIGZyb20gJ2QzJztcblxuZXhwb3J0IGNsYXNzIFdyYXBwZXJDb21wb25lbnREMyB7XG5cbiAgcHJpdmF0ZSBfc3ZnQ29udGFpbmVyO1xuICBwcml2YXRlIF91aWQ6IHN0cmluZztcbiAgcHJpdmF0ZSBfaGVpZ2h0OiBudW1iZXI7XG4gIHByaXZhdGUgX3dpZHRoOiBudW1iZXI7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgX2VsZW1lbnRSZWY6IEVsZW1lbnRSZWZcbiAgKSB7XG5cbiAgICAvLyBJbml0aWFsaXplIHByaXZhdGUgdmFyaWFibGVzXG4gICAgdGhpcy5fdWlkID0gdGhpcy5nZW5lcmF0ZVVJRCgpO1xuICAgIHRoaXMuX2hlaWdodCA9IF9lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQuY2xpZW50SGVpZ2h0O1xuICAgIHRoaXMuX3dpZHRoID0gX2VsZW1lbnRSZWYubmF0aXZlRWxlbWVudC5jbGllbnRXaWR0aDtcblxuICAgIC8vIEFkZCBJZCB0byBFbGVtZW50O1xuICAgIF9lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQuaWQgPSB0aGlzLl91aWQ7XG5cbiAgICAvLyBDcmVhdGUgc3ZnIGNvbnRhaW5lclxuICAgIHRoaXMuX3N2Z0NvbnRhaW5lciA9IGQzLnNlbGVjdChgIyR7dGhpcy5fdWlkfWApXG4gICAgICAuYXBwZW5kKCdzdmcnKVxuICAgICAgLmF0dHIoJ2lkJywgYHN2Zy0ke3RoaXMuX3VpZH1gKVxuICAgICAgLmF0dHIoJ2hlaWdodCcsIHRoaXMuX2hlaWdodClcbiAgICAgIC5hdHRyKCd3aWR0aCcsIHRoaXMuX3dpZHRoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBzdmdDb250YWluZXJcbiAgICogcmV0dXJuIHN2ZyBjb250YWluZXJcbiAgICogQHJldHVybnMgSFRNTEVsZW1lbnRcbiAgICovXG4gIGdldCBzdmdDb250YWluZXIoKTogSFRNTEVsZW1lbnQge1xuICAgIHJldHVybiB0aGlzLl9zdmdDb250YWluZXI7XG4gIH1cblxuICAvKipcbiAgICogdWlkXG4gICAqIHJldHVybiB1aWQgb2YgY29udGFpbmVyXG4gICAqIEByZXR1cm5zIHN0cmluZ1xuICAgKi9cbiAgZ2V0IHVpZCgpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLl91aWQ7XG4gIH1cblxuICAvKipcbiAgICogaGVpZ2h0XG4gICAqIHJldHVybiBoZWlnaHQgb2YgY29udGFpbmVyXG4gICAqIEByZXR1cm5zIG51bWJlclxuICAgKi9cbiAgZ2V0IGhlaWdodCgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9oZWlnaHQ7XG4gIH1cblxuICAvKipcbiAgICogd2lkdGhcbiAgICogcmV0dXJuIHdpZHRoIG9mIGNvbnRhaW5lclxuICAgKiBAcmV0dXJucyBudW1iZXJcbiAgICovXG4gIGdldCB3aWR0aCgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl93aWR0aDtcbiAgfVxuXG4gIC8qKlxuICAgKiBnZW5lcmF0ZVVJRFxuICAgKiBHZW5lcmF0ZSBuZXcgVUlELiBUaGUgdWlkIGlzIG1ha2Ugd2l0aCBEYXRlLm5vdyBhbmQgcGx1cyByYW5kb20gbnVtYmVyIGFuZCB0aGVuIHJlcGxhY2UgaXQgdG8gc3RyaW5nLlxuICAgKiBAcmV0dXJucyBzdHJpbmdcbiAgICovXG4gIHByaXZhdGUgZ2VuZXJhdGVVSUQoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gKERhdGUubm93KCkgKyBNYXRoLnJhbmRvbSgpKS50b1N0cmluZygzNikucmVwbGFjZSgnLicsICctJyk7XG4gIH1cbn1cbiJdfQ==