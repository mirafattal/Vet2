{"version":3,"sources":["ng://@ngx-chart/common/lib/wrapper-component-d3.service.ts","ng://@ngx-chart/common/lib/colors.service.ts","ng://@ngx-chart/common/lib/circular-measures.service.ts"],"names":["WrapperComponentD3","Object","defineProperty","prototype","this","_svgContainer","_uid","_height","_width","generateUID","Date","now","Math","random","toString","replace","_elementRef","nativeElement","clientHeight","clientWidth","id","d3.select","append","attr","Colors","generateRandomPallete","length","Array","fill","map","color","i","floor","CircularMeasures","calcRadius","width","height","arcValue","value","d3.scaleLinear","domain","range","interValue","toRadians","degree","PI"],"mappings":"wRAEA,IAAAA,GAkCEC,OAAAC,eAAIF,EAAAG,UAAA,eAAY,KAAhB,WACE,OAAOC,KAAKC,+CAQdJ,OAAAC,eAAIF,EAAAG,UAAA,MAAG,KAAP,WACE,OAAOC,KAAKE,sCAQdL,OAAAC,eAAIF,EAAAG,UAAA,SAAM,KAAV,WACE,OAAOC,KAAKG,yCAQdN,OAAAC,eAAIF,EAAAG,UAAA,QAAK,KAAT,WACE,OAAOC,KAAKI,wCAQNR,EAAAG,UAAAM,YAAR,WACE,OAAQC,KAAKC,MAAQC,KAAKC,UAAUC,SAAS,IAAIC,QAAQ,IAAK,MAElEf,GAhEE,SAAAA,EACEgB,GAIAZ,KAAKE,KAAOF,KAAKK,cACjBL,KAAKG,QAAUS,EAAYC,cAAcC,aACzCd,KAAKI,OAASQ,EAAYC,cAAcE,YAGxCH,EAAYC,cAAcG,GAAKhB,KAAKE,KAGpCF,KAAKC,cAAgBgB,EAAAA,OAAU,IAAIjB,KAAKE,MACrCgB,OAAO,OACPC,KAAK,KAAM,OAAOnB,KAAKE,MACvBiB,KAAK,SAAUnB,KAAKG,SACpBgB,KAAK,QAASnB,KAAKI,QC1B1B,IAAAgB,GAWEA,EAAArB,UAAAsB,sBAAA,SAAsBC,GAGpB,OADgB,IAAIC,MAAMD,GAAQE,KAAK,IACxBC,IAAG,WAEhB,QADIC,EAAQ,IACHC,EAAI,EAAGA,EAAI,EAAGA,IACrBD,GALY,mBAKKlB,KAAKoB,MAAsB,GAAhBpB,KAAKC,WAEnC,OAAOiB,KAGbN,GApBE,SAAAA,KCJF,IAAAS,GAgBEA,EAAA9B,UAAA+B,WAAA,SAAWC,EAAeC,GACxB,OAAeA,EAARD,EACHC,EACAD,GAeNF,EAAA9B,UAAAkC,SAAA,SAASC,GAKP,OAJmBC,EAAAA,cAChBC,OAAO,CAAC,EAAG,MACXC,MAAM,CAAC,EAAG,KAENC,CAAWJ,IAcpBL,EAAA9B,UAAAwC,UAAA,SAAUC,GACR,OAAOA,EAAShC,KAAKiC,GAAK,KAG9BZ,GArDE,SAAAA","sourcesContent":["import { ElementRef } from '@angular/core';\n\nimport * as d3 from 'd3';\n\nexport class WrapperComponentD3 {\n\n  private _svgContainer;\n  private _uid: string;\n  private _height: number;\n  private _width: number;\n\n  constructor(\n    _elementRef: ElementRef\n  ) {\n\n    // Initialize private variables\n    this._uid = this.generateUID();\n    this._height = _elementRef.nativeElement.clientHeight;\n    this._width = _elementRef.nativeElement.clientWidth;\n\n    // Add Id to Element;\n    _elementRef.nativeElement.id = this._uid;\n\n    // Create svg container\n    this._svgContainer = d3.select(`#${this._uid}`)\n      .append('svg')\n      .attr('id', `svg-${this._uid}`)\n      .attr('height', this._height)\n      .attr('width', this._width);\n  }\n\n  /**\n   * svgContainer\n   * return svg container\n   * @returns HTMLElement\n   */\n  get svgContainer(): HTMLElement {\n    return this._svgContainer;\n  }\n\n  /**\n   * uid\n   * return uid of container\n   * @returns string\n   */\n  get uid(): string {\n    return this._uid;\n  }\n\n  /**\n   * height\n   * return height of container\n   * @returns number\n   */\n  get height(): number {\n    return this._height;\n  }\n\n  /**\n   * width\n   * return width of container\n   * @returns number\n   */\n  get width(): number {\n    return this._width;\n  }\n\n  /**\n   * generateUID\n   * Generate new UID. The uid is make with Date.now and plus random number and then replace it to string.\n   * @returns string\n   */\n  private generateUID(): string {\n    return (Date.now() + Math.random()).toString(36).replace('.', '-');\n  }\n}\n","import { ElementRef } from '@angular/core';\n\nexport class Colors {\n\n  constructor() { }\n\n  /**\n   * generateRandomPallete\n   *\n   * Generate random palette of colors\n   * @param length. Number of colors in generate pallete\n   * @returns Array\n   */\n  generateRandomPallete(length: number): Array<string> {\n    const letters = '0123456789ABCDEF';\n    const pallete = new Array(length).fill('');\n    return pallete.map( () => {\n      let color = '#';\n      for (let i = 0; i < 6; i++) {\n        color += letters[Math.floor(Math.random() * 16)];\n      }\n      return color;\n    });\n  }\n}\n","import * as d3 from 'd3';\n\nexport class CircularMeasures {\n\n  constructor() { }\n\n  /**\n   * calcRadius\n   *\n   * Calculate the minimum size between the height and width of the container element\n   * with this value i will calculate the radius of circle.\n   *\n   * @param width width of container\n   * @param height width of container\n   * @returns number\n   */\n  calcRadius(width: number, height: number): number {\n    return width > height\n      ? height\n      : width;\n  }\n\n\n\n\n  /**\n   * arcValue\n   *\n   * Calculate the arc to show.\n   * Convert the pass value into a number that represent the degrees in a circle\n   *\n   * @param value value to represent\n   * @returns number\n   */\n  arcValue(value: number): number {\n    const interValue = d3.scaleLinear()\n      .domain([0, 100])\n      .range([0, 360]);\n\n    return interValue(value);\n  }\n\n\n\n\n  /**\n   * toRadians\n   *\n   * Convert degrees values in radians\n   *\n   * @param degree value of degree\n   * @returns number\n   */\n  toRadians(degree: number): number {\n    return degree * Math.PI / 180;\n  }\n\n}\n"]}