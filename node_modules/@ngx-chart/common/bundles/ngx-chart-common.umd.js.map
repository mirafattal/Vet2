{"version":3,"file":"ngx-chart-common.umd.js.map","sources":["ng://@ngx-chart/common/lib/wrapper-component-d3.service.ts","ng://@ngx-chart/common/lib/colors.service.ts","ng://@ngx-chart/common/lib/circular-measures.service.ts"],"sourcesContent":["import { ElementRef } from '@angular/core';\n\nimport * as d3 from 'd3';\n\nexport class WrapperComponentD3 {\n\n  private _svgContainer;\n  private _uid: string;\n  private _height: number;\n  private _width: number;\n\n  constructor(\n    _elementRef: ElementRef\n  ) {\n\n    // Initialize private variables\n    this._uid = this.generateUID();\n    this._height = _elementRef.nativeElement.clientHeight;\n    this._width = _elementRef.nativeElement.clientWidth;\n\n    // Add Id to Element;\n    _elementRef.nativeElement.id = this._uid;\n\n    // Create svg container\n    this._svgContainer = d3.select(`#${this._uid}`)\n      .append('svg')\n      .attr('id', `svg-${this._uid}`)\n      .attr('height', this._height)\n      .attr('width', this._width);\n  }\n\n  /**\n   * svgContainer\n   * return svg container\n   * @returns HTMLElement\n   */\n  get svgContainer(): HTMLElement {\n    return this._svgContainer;\n  }\n\n  /**\n   * uid\n   * return uid of container\n   * @returns string\n   */\n  get uid(): string {\n    return this._uid;\n  }\n\n  /**\n   * height\n   * return height of container\n   * @returns number\n   */\n  get height(): number {\n    return this._height;\n  }\n\n  /**\n   * width\n   * return width of container\n   * @returns number\n   */\n  get width(): number {\n    return this._width;\n  }\n\n  /**\n   * generateUID\n   * Generate new UID. The uid is make with Date.now and plus random number and then replace it to string.\n   * @returns string\n   */\n  private generateUID(): string {\n    return (Date.now() + Math.random()).toString(36).replace('.', '-');\n  }\n}\n","import { ElementRef } from '@angular/core';\n\nexport class Colors {\n\n  constructor() { }\n\n  /**\n   * generateRandomPallete\n   *\n   * Generate random palette of colors\n   * @param length. Number of colors in generate pallete\n   * @returns Array\n   */\n  generateRandomPallete(length: number): Array<string> {\n    const letters = '0123456789ABCDEF';\n    const pallete = new Array(length).fill('');\n    return pallete.map( () => {\n      let color = '#';\n      for (let i = 0; i < 6; i++) {\n        color += letters[Math.floor(Math.random() * 16)];\n      }\n      return color;\n    });\n  }\n}\n","import * as d3 from 'd3';\n\nexport class CircularMeasures {\n\n  constructor() { }\n\n  /**\n   * calcRadius\n   *\n   * Calculate the minimum size between the height and width of the container element\n   * with this value i will calculate the radius of circle.\n   *\n   * @param width width of container\n   * @param height width of container\n   * @returns number\n   */\n  calcRadius(width: number, height: number): number {\n    return width > height\n      ? height\n      : width;\n  }\n\n\n\n\n  /**\n   * arcValue\n   *\n   * Calculate the arc to show.\n   * Convert the pass value into a number that represent the degrees in a circle\n   *\n   * @param value value to represent\n   * @returns number\n   */\n  arcValue(value: number): number {\n    const interValue = d3.scaleLinear()\n      .domain([0, 100])\n      .range([0, 360]);\n\n    return interValue(value);\n  }\n\n\n\n\n  /**\n   * toRadians\n   *\n   * Convert degrees values in radians\n   *\n   * @param degree value of degree\n   * @returns number\n   */\n  toRadians(degree: number): number {\n    return degree * Math.PI / 180;\n  }\n\n}\n"],"names":["d3.select","d3.scaleLinear"],"mappings":";;;;;;;;;;;AAEA;QASE,4BACE,WAAuB;;YAIvB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC;YAC/B,IAAI,CAAC,OAAO,GAAG,WAAW,CAAC,aAAa,CAAC,YAAY,CAAC;YACtD,IAAI,CAAC,MAAM,GAAG,WAAW,CAAC,aAAa,CAAC,WAAW,CAAC;;YAGpD,WAAW,CAAC,aAAa,CAAC,EAAE,GAAG,IAAI,CAAC,IAAI,CAAC;;YAGzC,IAAI,CAAC,aAAa,GAAGA,SAAS,CAAC,MAAI,IAAI,CAAC,IAAM,CAAC;iBAC5C,MAAM,CAAC,KAAK,CAAC;iBACb,IAAI,CAAC,IAAI,EAAE,SAAO,IAAI,CAAC,IAAM,CAAC;iBAC9B,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,OAAO,CAAC;iBAC5B,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;SAC/B;QAOD,sBAAI,4CAAY;;;;;;;;;;gBAAhB;gBACE,OAAO,IAAI,CAAC,aAAa,CAAC;aAC3B;;;WAAA;QAOD,sBAAI,mCAAG;;;;;;;;;;gBAAP;gBACE,OAAO,IAAI,CAAC,IAAI,CAAC;aAClB;;;WAAA;QAOD,sBAAI,sCAAM;;;;;;;;;;gBAAV;gBACE,OAAO,IAAI,CAAC,OAAO,CAAC;aACrB;;;WAAA;QAOD,sBAAI,qCAAK;;;;;;;;;;gBAAT;gBACE,OAAO,IAAI,CAAC,MAAM,CAAC;aACpB;;;WAAA;;;;;;;;;;;;QAOO,wCAAW;;;;;;YAAnB;gBACE,OAAO,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,MAAM,EAAE,EAAE,QAAQ,CAAC,EAAE,CAAC,CAAC,OAAO,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;aACpE;QACH,yBAAC;IAAD,CAAC;;;;;;;ACzED;QAEE;SAAiB;;;;;;;;;;;;;;;QASjB,sCAAqB;;;;;;;YAArB,UAAsB,MAAc;;oBAC5B,OAAO,GAAG,kBAAkB;;oBAC5B,OAAO,GAAG,IAAI,KAAK,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC;gBAC1C,OAAO,OAAO,CAAC,GAAG;;mBAAE;;wBACd,KAAK,GAAG,GAAG;oBACf,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;wBAC1B,KAAK,IAAI,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,EAAE,CAAC,CAAC,CAAC;qBAClD;oBACD,OAAO,KAAK,CAAC;iBACd,EAAC,CAAC;aACJ;QACH,aAAC;IAAD,CAAC;;;;;;;ACxBD;QAIE;SAAiB;;;;;;;;;;;;;;;;;;;;;QAYjB,qCAAU;;;;;;;;;;YAAV,UAAW,KAAa,EAAE,MAAc;gBACtC,OAAO,KAAK,GAAG,MAAM;sBACjB,MAAM;sBACN,KAAK,CAAC;aACX;;;;;;;;;;;;;;;;;;;QAcD,mCAAQ;;;;;;;;;YAAR,UAAS,KAAa;;oBACd,UAAU,GAAGC,cAAc,EAAE;qBAChC,MAAM,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC;qBAChB,KAAK,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC;gBAElB,OAAO,UAAU,CAAC,KAAK,CAAC,CAAC;aAC1B;;;;;;;;;;;;;;;;;QAaD,oCAAS;;;;;;;;YAAT,UAAU,MAAc;gBACtB,OAAO,MAAM,GAAG,IAAI,CAAC,EAAE,GAAG,GAAG,CAAC;aAC/B;QAEH,uBAAC;IAAD,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;"}
