/**
 * @fileoverview added by tsickle
 * Generated from: lib/doughnut.class.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Input } from '@angular/core';
import * as d3 from 'd3';
import { Colors } from '@ngx-chart/common';
import { CircularGraphs } from './circular-graphs.class';
/**
 * @abstract
 */
export class DoughnutGraph extends CircularGraphs {
    constructor() {
        super();
    }
    /**
     * scaleData
     *
     * Convert the data values to array of values in percentage scale
     * @param {?} data array of values
     * @return {?} Array
     */
    scaleData(data) {
        /** @type {?} */
        const sumData = data.reduce((/**
         * @param {?} prev
         * @param {?} curr
         * @return {?}
         */
        (prev, curr) => {
            return prev + curr;
        }));
        /** @type {?} */
        const interValue = d3.scaleLinear()
            .domain([0, sumData])
            .range([0, 100]);
        return data.map((/**
         * @param {?} value
         * @return {?}
         */
        value => interValue(value)));
    }
    /**
     * checkGraphDataColors
     *
     *
     * Check if the number of colors is the same in the values. If it is different, it generates a random color palette
     * @return {?} Doughnut['colors']
     */
    checkGraphDataColors() {
        /** @type {?} */
        const colors = new Colors();
        return this.graphData.colors
            ? this.graphData.colors.length === this.graphData.values.length
                ? this.graphData.colors
                : [...this.graphData.colors, ...colors.generateRandomPallete(this.graphData.values.length - this.graphData.colors.length || 0)]
            : colors.generateRandomPallete(this.graphData.values.length);
    }
    /**
     * drawSegment
     *
     * Draw circular segment
     * @param {?} startAngle start angle of arc
     * @param {?} endAngle end angle of arc
     * @param {?} idx index of arc
     * @return {?}
     */
    drawSegment(startAngle, endAngle, idx) {
        /** @type {?} */
        const currenData = {
            id: `${this.graphElement.uid}__${idx}`,
            radius: this.minSize / 2,
            startAngle,
            endAngle,
            color: this.graphData.colors[idx],
            padding: this.graphData.padding
        };
        /** @type {?} */
        const arc = this.drawCircle(currenData, this.graphElement);
        if (this.graphData.labels && this.graphData.labels.position === 'internal') {
            this.appendIntLabels(`${this.graphElement.uid}__${idx}`, arc.centroid(), idx);
        }
        if (this.graphData.labels && this.graphData.labels.position === 'external') {
            this.appendExtLabels(currenData, `${this.graphElement.uid}__${idx}`, arc.centroid(), idx);
        }
    }
    /**
     * appendExtLabels
     *
     * Append external labels
     * @param {?} arcId arc id
     * @param {?} centro center of arc
     * @param {?} idx index of arc
     * @return {?}
     */
    appendIntLabels(arcId, centro, idx) {
        this.graphElement.svgContainer
            .select(`#${arcId}`)
            .append('text')
            .attr('x', centro[0])
            .attr('y', centro[1])
            .attr('dy', '0.33em')
            .attr('dx', '-0.33em')
            .style('fill', 'white')
            .text(this.graphData.labels.titles[idx]);
    }
    /**
     * appendExtLabels
     *
     * Append external labels
     * @param {?} data
     * @param {?} arcId arc id
     * @param {?} centro center of arc
     * @param {?} idx index of arc
     * @return {?}
     */
    appendExtLabels(data, arcId, centro, idx) {
        /**
         * calculateExternalPos
         *
         * Calculate the position of external pos to draw diagonal line.
         * @param {?} dataArc data of arc
         * @return {?} Array
         */
        function calculateEdgePos(dataArc) {
            /** @type {?} */
            const edgeCircle = d3.arc()
                .innerRadius(dataArc.radius)
                .outerRadius(dataArc.radius)
                .startAngle(this.circularMeasures.toRadians(dataArc.startAngle))
                .endAngle(this.circularMeasures.toRadians(dataArc.endAngle));
            return edgeCircle.centroid();
        }
        /**
         * calculateExternalPos
         *
         * Calculate the position of external pos to draw diagonal line.
         * @param {?} dataArc data of arc
         * @return {?} Array
         */
        function calculateExternalPos(dataArc) {
            /** @type {?} */
            const extCircle = d3.arc()
                .innerRadius(dataArc.radius)
                .outerRadius(dataArc.radius + 20)
                .startAngle(this.circularMeasures.toRadians(dataArc.startAngle))
                .endAngle(this.circularMeasures.toRadians(dataArc.endAngle));
            return extCircle.centroid();
        }
        /** @type {?} */
        const edgeCentro = calculateEdgePos.call(this, data);
        /** @type {?} */
        const extCentro = calculateExternalPos.call(this, data);
        /** @type {?} */
        const paddingHorizontalLabel = extCentro[0] >= 0 ? extCentro[0] + 4 : extCentro[0] - 4;
        /** @type {?} */
        const paddingVerticalLabel = extCentro[1] + 4;
        // Draw line
        this.graphElement.svgContainer
            .select(`#${arcId}`)
            .append('line')
            .style('stroke', 'black')
            .style('opacity', .7)
            .attr('x1', edgeCentro[0])
            .attr('y1', edgeCentro[1])
            .attr('x2', extCentro[0])
            .attr('y2', extCentro[1]);
        this.graphElement.svgContainer
            .select(`#${arcId}`)
            .append('text')
            .attr('text-anchor', (/**
         * @return {?}
         */
        () => extCentro[0] > 0 ? 'start' : 'end'))
            .attr('transform', `translate(${paddingHorizontalLabel}, ${paddingVerticalLabel})`)
            .text(this.graphData.labels.titles[idx]);
    }
}
DoughnutGraph.propDecorators = {
    graphData: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    DoughnutGraph.prototype.graphData;
    /**
     * @type {?}
     * @protected
     */
    DoughnutGraph.prototype.graphElement;
    /**
     * @type {?}
     * @protected
     */
    DoughnutGraph.prototype.minSize;
    /**
     * @type {?}
     * @protected
     */
    DoughnutGraph.prototype.segmentsDegree;
}
//# sourceMappingURL=data:application/json;base64,