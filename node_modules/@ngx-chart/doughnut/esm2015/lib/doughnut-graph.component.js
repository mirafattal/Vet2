/**
 * @fileoverview added by tsickle
 * Generated from: lib/doughnut-graph.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ElementRef } from '@angular/core';
import * as d3 from 'd3';
import { WrapperComponentD3, CircularMeasures } from '@ngx-chart/common';
import { DoughnutGraph } from './doughnut.class';
export class DoughnutGraphComponent extends DoughnutGraph {
    /**
     * @param {?} elementRef
     * @param {?} circularMeasures
     */
    constructor(elementRef, circularMeasures) {
        super();
        this.elementRef = elementRef;
        this.circularMeasures = circularMeasures;
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        // Remove previous graphs
        if (changes.graphData.previousValue) {
            d3.select(`#svg-${this.currentElementId}`).remove();
        }
        this.graphElement = new WrapperComponentD3(this.elementRef);
        this.currentElementId = this.graphElement.uid;
        this.minSize = this.circularMeasures.calcRadius(this.graphElement.width, this.graphElement.height);
        // If graph has labels and the position of if are extenal reduce radius in 25 points.
        this.minSize = this.graphData.labels && this.graphData.labels.position === 'external'
            ? this.minSize - 25
            : this.minSize;
        this.segmentsDegree = this.scaleData(this.graphData.values).map((/**
         * @param {?} value
         * @return {?}
         */
        value => this.circularMeasures.arcValue(value)));
        this.graphData.colors = this.checkGraphDataColors();
        this.segmentsDegree.map((/**
         * @param {?} arc
         * @param {?} idx
         * @return {?}
         */
        (arc, idx) => {
            /** @type {?} */
            const startAngle = idx === 0
                ? 0
                : this.segmentsDegree.slice(0, idx).reduce((/**
                 * @param {?} curr
                 * @param {?} prev
                 * @return {?}
                 */
                (curr, prev) => curr + prev));
            /** @type {?} */
            const endAngle = idx === this.segmentsDegree.length
                ? 360
                : this.segmentsDegree.slice(0, idx + 1).reduce((/**
                 * @param {?} curr
                 * @param {?} prev
                 * @return {?}
                 */
                (curr, prev) => curr + prev));
            this.drawSegment(startAngle, endAngle, idx);
        }));
    }
}
DoughnutGraphComponent.decorators = [
    { type: Component, args: [{
                selector: 'ngl-doughnut',
                template: ``,
                providers: [
                    CircularMeasures
                ]
            }] }
];
/** @nocollapse */
DoughnutGraphComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: CircularMeasures }
];
if (false) {
    /** @type {?} */
    DoughnutGraphComponent.prototype.currentElementId;
    /** @type {?} */
    DoughnutGraphComponent.prototype.elementRef;
    /** @type {?} */
    DoughnutGraphComponent.prototype.circularMeasures;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZG91Z2hudXQtZ3JhcGguY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQG5neC1jaGFydC9kb3VnaG51dC8iLCJzb3VyY2VzIjpbImxpYi9kb3VnaG51dC1ncmFwaC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUd0RCxPQUFPLEtBQUssRUFBRSxNQUFNLElBQUksQ0FBQztBQUN6QixPQUFPLEVBQUUsa0JBQWtCLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUN6RSxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFVakQsTUFBTSxPQUFPLHNCQUF1QixTQUFRLGFBQWE7Ozs7O0lBSXZELFlBQ1MsVUFBc0IsRUFDdEIsZ0JBQWtDO1FBRXpDLEtBQUssRUFBRSxDQUFDO1FBSEQsZUFBVSxHQUFWLFVBQVUsQ0FBWTtRQUN0QixxQkFBZ0IsR0FBaEIsZ0JBQWdCLENBQWtCO0lBRzNDLENBQUM7Ozs7O0lBRUQsV0FBVyxDQUFDLE9BQXNCO1FBRWhDLHlCQUF5QjtRQUN6QixJQUFLLE9BQU8sQ0FBQyxTQUFTLENBQUMsYUFBYSxFQUFHO1lBQ3JDLEVBQUUsQ0FBQyxNQUFNLENBQUMsUUFBUSxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDO1NBQ3JEO1FBRUQsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLGtCQUFrQixDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUM1RCxJQUFJLENBQUMsZ0JBQWdCLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUM7UUFFOUMsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDbkcscUZBQXFGO1FBQ3JGLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsUUFBUSxLQUFLLFVBQVU7WUFDbkYsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLEdBQUcsRUFBRTtZQUNuQixDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQztRQUNqQixJQUFJLENBQUMsY0FBYyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHOzs7O1FBQUUsS0FBSyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUM7UUFHbEgsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLG9CQUFvQixFQUFFLENBQUM7UUFFcEQsSUFBSSxDQUFDLGNBQWMsQ0FBQyxHQUFHOzs7OztRQUFFLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxFQUFFOztrQkFDOUIsVUFBVSxHQUFHLEdBQUcsS0FBSyxDQUFDO2dCQUMxQixDQUFDLENBQUMsQ0FBQztnQkFDSCxDQUFDLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLE1BQU07Ozs7O2dCQUFFLENBQUMsSUFBSSxFQUFFLElBQUksRUFBRSxFQUFFLENBQUMsSUFBSSxHQUFHLElBQUksRUFBQzs7a0JBQ3BFLFFBQVEsR0FBRyxHQUFHLEtBQUssSUFBSSxDQUFDLGNBQWMsQ0FBQyxNQUFNO2dCQUNqRCxDQUFDLENBQUMsR0FBRztnQkFDTCxDQUFDLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxNQUFNOzs7OztnQkFBRSxDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsRUFBRSxDQUFDLElBQUksR0FBRyxJQUFJLEVBQUM7WUFFOUUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxVQUFVLEVBQUcsUUFBUSxFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBQy9DLENBQUMsRUFBQyxDQUFDO0lBQ0wsQ0FBQzs7O1lBakRGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsY0FBYztnQkFDeEIsUUFBUSxFQUFFLEVBQUU7Z0JBRVosU0FBUyxFQUFFO29CQUNULGdCQUFnQjtpQkFDakI7YUFDRjs7OztZQWRtQixVQUFVO1lBSUQsZ0JBQWdCOzs7O0lBYTNDLGtEQUF5Qjs7SUFHdkIsNENBQTZCOztJQUM3QixrREFBeUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIEVsZW1lbnRSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE9uQ2hhbmdlcywgU2ltcGxlQ2hhbmdlcyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgKiBhcyBkMyBmcm9tICdkMyc7XG5pbXBvcnQgeyBXcmFwcGVyQ29tcG9uZW50RDMsIENpcmN1bGFyTWVhc3VyZXMgfSBmcm9tICdAbmd4LWNoYXJ0L2NvbW1vbic7XG5pbXBvcnQgeyBEb3VnaG51dEdyYXBoIH0gZnJvbSAnLi9kb3VnaG51dC5jbGFzcyc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ25nbC1kb3VnaG51dCcsXG4gIHRlbXBsYXRlOiBgYCxcbiAgc3R5bGVzOiBbXSxcbiAgcHJvdmlkZXJzOiBbXG4gICAgQ2lyY3VsYXJNZWFzdXJlc1xuICBdXG59KVxuZXhwb3J0IGNsYXNzIERvdWdobnV0R3JhcGhDb21wb25lbnQgZXh0ZW5kcyBEb3VnaG51dEdyYXBoIGltcGxlbWVudHMgT25DaGFuZ2VzICB7XG5cbiAgY3VycmVudEVsZW1lbnRJZDogc3RyaW5nO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHB1YmxpYyBlbGVtZW50UmVmOiBFbGVtZW50UmVmLFxuICAgIHB1YmxpYyBjaXJjdWxhck1lYXN1cmVzOiBDaXJjdWxhck1lYXN1cmVzXG4gICkge1xuICAgIHN1cGVyKCk7XG4gIH1cblxuICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKSB7XG5cbiAgICAvLyBSZW1vdmUgcHJldmlvdXMgZ3JhcGhzXG4gICAgaWYgKCBjaGFuZ2VzLmdyYXBoRGF0YS5wcmV2aW91c1ZhbHVlICkge1xuICAgICAgZDMuc2VsZWN0KGAjc3ZnLSR7dGhpcy5jdXJyZW50RWxlbWVudElkfWApLnJlbW92ZSgpO1xuICAgIH1cblxuICAgIHRoaXMuZ3JhcGhFbGVtZW50ID0gbmV3IFdyYXBwZXJDb21wb25lbnREMyh0aGlzLmVsZW1lbnRSZWYpO1xuICAgIHRoaXMuY3VycmVudEVsZW1lbnRJZCA9IHRoaXMuZ3JhcGhFbGVtZW50LnVpZDtcblxuICAgIHRoaXMubWluU2l6ZSA9IHRoaXMuY2lyY3VsYXJNZWFzdXJlcy5jYWxjUmFkaXVzKHRoaXMuZ3JhcGhFbGVtZW50LndpZHRoLCB0aGlzLmdyYXBoRWxlbWVudC5oZWlnaHQpO1xuICAgIC8vIElmIGdyYXBoIGhhcyBsYWJlbHMgYW5kIHRoZSBwb3NpdGlvbiBvZiBpZiBhcmUgZXh0ZW5hbCByZWR1Y2UgcmFkaXVzIGluIDI1IHBvaW50cy5cbiAgICB0aGlzLm1pblNpemUgPSB0aGlzLmdyYXBoRGF0YS5sYWJlbHMgJiYgdGhpcy5ncmFwaERhdGEubGFiZWxzLnBvc2l0aW9uID09PSAnZXh0ZXJuYWwnXG4gICAgICA/IHRoaXMubWluU2l6ZSAtIDI1XG4gICAgICA6IHRoaXMubWluU2l6ZTtcbiAgICB0aGlzLnNlZ21lbnRzRGVncmVlID0gdGhpcy5zY2FsZURhdGEodGhpcy5ncmFwaERhdGEudmFsdWVzKS5tYXAoIHZhbHVlID0+IHRoaXMuY2lyY3VsYXJNZWFzdXJlcy5hcmNWYWx1ZSh2YWx1ZSkgKTtcblxuXG4gICAgdGhpcy5ncmFwaERhdGEuY29sb3JzID0gdGhpcy5jaGVja0dyYXBoRGF0YUNvbG9ycygpO1xuXG4gICAgdGhpcy5zZWdtZW50c0RlZ3JlZS5tYXAoIChhcmMsIGlkeCkgPT4ge1xuICAgICAgY29uc3Qgc3RhcnRBbmdsZSA9IGlkeCA9PT0gMFxuICAgICAgICA/IDBcbiAgICAgICAgOiB0aGlzLnNlZ21lbnRzRGVncmVlLnNsaWNlKDAsIGlkeCkucmVkdWNlKCAoY3VyciwgcHJldikgPT4gY3VyciArIHByZXYpO1xuICAgICAgY29uc3QgZW5kQW5nbGUgPSBpZHggPT09IHRoaXMuc2VnbWVudHNEZWdyZWUubGVuZ3RoXG4gICAgICAgID8gMzYwXG4gICAgICAgIDogdGhpcy5zZWdtZW50c0RlZ3JlZS5zbGljZSgwLCBpZHggKyAxKS5yZWR1Y2UoIChjdXJyLCBwcmV2KSA9PiBjdXJyICsgcHJldik7XG5cbiAgICAgIHRoaXMuZHJhd1NlZ21lbnQoc3RhcnRBbmdsZSAsIGVuZEFuZ2xlLCBpZHgpO1xuICAgIH0pO1xuICB9XG5cbn1cbiJdfQ==