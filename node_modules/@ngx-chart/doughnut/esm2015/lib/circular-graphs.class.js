/**
 * @fileoverview added by tsickle
 * Generated from: lib/circular-graphs.class.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as d3 from 'd3';
import { CircularMeasures } from '@ngx-chart/common';
/**
 * @abstract
 */
export class CircularGraphs {
    constructor() {
        this.circularMeasures = new CircularMeasures();
    }
    /**
     * drawCircle
     *
     * Draw Circle
     * @param {?} data
     * @param {?} graphElement
     * @return {?}
     */
    drawCircle(data, graphElement) {
        data = this.defaultValues(data);
        /** @type {?} */
        const circle = d3.arc()
            .innerRadius(data.radius * 3 / 5)
            .outerRadius(data.radius)
            .startAngle(this.circularMeasures.toRadians(data.startAngle))
            .endAngle(this.circularMeasures.toRadians(data.endAngle))
            .padAngle((/**
         * @return {?}
         */
        () => data.padding ? 0.03 : 0));
        graphElement.svgContainer
            .append('g')
            // Center of wrapper
            .attr('transform', `translate(${graphElement.width / 2}, ${graphElement.height / 2})`)
            .attr('id', data.id)
            .append('path')
            .attr('fill', data.color)
            .style('opacity', data.opacity)
            .attr('d', circle);
        return circle;
    }
    /**
     * @private
     * @param {?} data
     * @return {?}
     */
    defaultValues(data) {
        data.opacity = !data.opacity ? 1 : data.opacity;
        return data;
    }
}
if (false) {
    /** @type {?} */
    CircularGraphs.prototype.circularMeasures;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2lyY3VsYXItZ3JhcGhzLmNsYXNzLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQG5neC1jaGFydC9kb3VnaG51dC8iLCJzb3VyY2VzIjpbImxpYi9jaXJjdWxhci1ncmFwaHMuY2xhc3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEtBQUssRUFBRSxNQUFNLElBQUksQ0FBQztBQUd6QixPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQzs7OztBQUNyRCxNQUFNLE9BQWdCLGNBQWM7SUFJbEM7UUFGTyxxQkFBZ0IsR0FBRyxJQUFJLGdCQUFnQixFQUFFLENBQUM7SUFFakMsQ0FBQzs7Ozs7Ozs7O0lBT2pCLFVBQVUsQ0FBQyxJQUFtQixFQUFFLFlBQVk7UUFFMUMsSUFBSSxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLENBQUM7O2NBRTFCLE1BQU0sR0FBRyxFQUFFLENBQUMsR0FBRyxFQUFFO2FBQ3BCLFdBQVcsQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7YUFDaEMsV0FBVyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUM7YUFDeEIsVUFBVSxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO2FBQzVELFFBQVEsQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQzthQUN4RCxRQUFROzs7UUFBQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQztRQUUxQyxZQUFZLENBQUMsWUFBWTthQUN0QixNQUFNLENBQUMsR0FBRyxDQUFDO1lBQ1Ysb0JBQW9CO2FBQ25CLElBQUksQ0FBQyxXQUFXLEVBQUUsYUFBYSxZQUFZLENBQUMsS0FBSyxHQUFHLENBQUMsS0FBSyxZQUFZLENBQUMsTUFBTSxHQUFHLENBQUMsR0FBRyxDQUFDO2FBQ3JGLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQzthQUNqQixNQUFNLENBQUMsTUFBTSxDQUFDO2FBQ2QsSUFBSSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDO2FBQ3hCLEtBQUssQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQzthQUM5QixJQUFJLENBQUMsR0FBRyxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBRXpCLE9BQU8sTUFBTSxDQUFDO0lBQ2hCLENBQUM7Ozs7OztJQUVPLGFBQWEsQ0FBQyxJQUFtQjtRQUN2QyxJQUFJLENBQUMsT0FBTyxHQUFHLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDO1FBQ2hELE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztDQUNGOzs7SUFyQ0MsMENBQWlEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgZDMgZnJvbSAnZDMnO1xuXG5pbXBvcnQgeyBDaXJjdWxhckdyYXBoIH0gZnJvbSAnLi9pQ2lyY3VsYXItZ3JhcGhzJztcbmltcG9ydCB7IENpcmN1bGFyTWVhc3VyZXMgfSBmcm9tICdAbmd4LWNoYXJ0L2NvbW1vbic7XG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgQ2lyY3VsYXJHcmFwaHMge1xuXG4gIHB1YmxpYyBjaXJjdWxhck1lYXN1cmVzID0gbmV3IENpcmN1bGFyTWVhc3VyZXMoKTtcblxuICBjb25zdHJ1Y3RvcigpIHsgfVxuXG4gIC8qKlxuICAgKiBkcmF3Q2lyY2xlXG4gICAqXG4gICAqIERyYXcgQ2lyY2xlXG4gICAqL1xuICBkcmF3Q2lyY2xlKGRhdGE6IENpcmN1bGFyR3JhcGgsIGdyYXBoRWxlbWVudCApOiBhbnkge1xuXG4gICAgZGF0YSA9IHRoaXMuZGVmYXVsdFZhbHVlcyhkYXRhKTtcblxuICAgIGNvbnN0IGNpcmNsZSA9IGQzLmFyYygpXG4gICAgICAuaW5uZXJSYWRpdXMoZGF0YS5yYWRpdXMgKiAzIC8gNSlcbiAgICAgIC5vdXRlclJhZGl1cyhkYXRhLnJhZGl1cylcbiAgICAgIC5zdGFydEFuZ2xlKHRoaXMuY2lyY3VsYXJNZWFzdXJlcy50b1JhZGlhbnMoZGF0YS5zdGFydEFuZ2xlKSlcbiAgICAgIC5lbmRBbmdsZSh0aGlzLmNpcmN1bGFyTWVhc3VyZXMudG9SYWRpYW5zKGRhdGEuZW5kQW5nbGUpKVxuICAgICAgLnBhZEFuZ2xlKCgpID0+IGRhdGEucGFkZGluZyA/IDAuMDMgOiAwKTtcblxuICAgIGdyYXBoRWxlbWVudC5zdmdDb250YWluZXJcbiAgICAgIC5hcHBlbmQoJ2cnKVxuICAgICAgICAvLyBDZW50ZXIgb2Ygd3JhcHBlclxuICAgICAgICAuYXR0cigndHJhbnNmb3JtJywgYHRyYW5zbGF0ZSgke2dyYXBoRWxlbWVudC53aWR0aCAvIDJ9LCAke2dyYXBoRWxlbWVudC5oZWlnaHQgLyAyfSlgKVxuICAgICAgICAuYXR0cignaWQnLCBkYXRhLmlkKVxuICAgICAgICAgIC5hcHBlbmQoJ3BhdGgnKVxuICAgICAgICAgIC5hdHRyKCdmaWxsJywgZGF0YS5jb2xvcilcbiAgICAgICAgICAuc3R5bGUoJ29wYWNpdHknLCBkYXRhLm9wYWNpdHkpXG4gICAgICAgICAgLmF0dHIoJ2QnLCBjaXJjbGUpO1xuXG4gICAgcmV0dXJuIGNpcmNsZTtcbiAgfVxuXG4gIHByaXZhdGUgZGVmYXVsdFZhbHVlcyhkYXRhOiBDaXJjdWxhckdyYXBoKSB7XG4gICAgZGF0YS5vcGFjaXR5ID0gIWRhdGEub3BhY2l0eSA/IDEgOiBkYXRhLm9wYWNpdHk7XG4gICAgcmV0dXJuIGRhdGE7XG4gIH1cbn1cbiJdfQ==