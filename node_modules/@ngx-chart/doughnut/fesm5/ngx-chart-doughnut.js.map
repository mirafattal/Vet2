{"version":3,"file":"ngx-chart-doughnut.js.map","sources":["ng://@ngx-chart/doughnut/lib/circular-graphs.class.ts","ng://@ngx-chart/doughnut/lib/doughnut.class.ts","ng://@ngx-chart/doughnut/lib/doughnut-graph.component.ts","ng://@ngx-chart/doughnut/lib/doughnut-graph.module.ts"],"sourcesContent":["import * as d3 from 'd3';\n\nimport { CircularGraph } from './iCircular-graphs';\nimport { CircularMeasures } from '@ngx-chart/common';\nexport abstract class CircularGraphs {\n\n  public circularMeasures = new CircularMeasures();\n\n  constructor() { }\n\n  /**\n   * drawCircle\n   *\n   * Draw Circle\n   */\n  drawCircle(data: CircularGraph, graphElement ): any {\n\n    data = this.defaultValues(data);\n\n    const circle = d3.arc()\n      .innerRadius(data.radius * 3 / 5)\n      .outerRadius(data.radius)\n      .startAngle(this.circularMeasures.toRadians(data.startAngle))\n      .endAngle(this.circularMeasures.toRadians(data.endAngle))\n      .padAngle(() => data.padding ? 0.03 : 0);\n\n    graphElement.svgContainer\n      .append('g')\n        // Center of wrapper\n        .attr('transform', `translate(${graphElement.width / 2}, ${graphElement.height / 2})`)\n        .attr('id', data.id)\n          .append('path')\n          .attr('fill', data.color)\n          .style('opacity', data.opacity)\n          .attr('d', circle);\n\n    return circle;\n  }\n\n  private defaultValues(data: CircularGraph) {\n    data.opacity = !data.opacity ? 1 : data.opacity;\n    return data;\n  }\n}\n","import { Input } from '@angular/core';\n\nimport * as d3 from 'd3';\nimport { Colors } from '@ngx-chart/common';\nimport { CircularGraphs } from './circular-graphs.class';\n\nimport { Doughnut } from './iDoughnut';\nimport { CircularGraph } from './iCircular-graphs';\n\nexport abstract class DoughnutGraph extends CircularGraphs {\n\n  @Input() graphData: Doughnut;\n\n  protected graphElement;\n  protected minSize: number;\n  protected segmentsDegree: Array<number>;\n\n  constructor() {\n    super();\n  }\n\n\n  /**\n   * scaleData\n   *\n   * Convert the data values to array of values in percentage scale\n   * @param data array of values\n   * @returns Array\n   */\n  scaleData(data: Array<number>): Array<number> {\n    const sumData = data.reduce( (prev, curr) => {\n      return prev + curr;\n    });\n\n    const interValue = d3.scaleLinear()\n      .domain([0, sumData])\n      .range([0, 100]);\n\n    return data.map( value => interValue(value));\n  }\n\n\n\n  /**\n   * checkGraphDataColors\n   *\n   *\n   * Check if the number of colors is the same in the values. If it is different, it generates a random color palette\n   * @returns Doughnut['colors']\n   */\n  checkGraphDataColors(): Doughnut['colors'] {\n    const colors = new Colors();\n    return this.graphData.colors\n      ? this.graphData.colors.length === this.graphData.values.length\n        ? this.graphData.colors\n        : [...this.graphData.colors, ...colors.generateRandomPallete(this.graphData.values.length - this.graphData.colors.length || 0 )]\n      : colors.generateRandomPallete(this.graphData.values.length);\n  }\n\n\n\n\n  /**\n   * drawSegment\n   *\n   * Draw circular segment\n   * @param startAngle start angle of arc\n   * @param endAngle end angle of arc\n   * @param idx index of arc\n   */\n  drawSegment(startAngle: number, endAngle: number, idx: number): void {\n    const currenData = {\n      id: `${this.graphElement.uid}__${idx}`,\n      radius: this.minSize / 2,\n      startAngle,\n      endAngle,\n      color: this.graphData.colors[idx],\n      padding: this.graphData.padding\n    };\n\n    const arc = this.drawCircle(currenData, this.graphElement);\n\n    if ( this.graphData.labels && this.graphData.labels.position === 'internal') {\n      this.appendIntLabels(`${this.graphElement.uid}__${idx}`, arc.centroid(), idx);\n    }\n\n    if ( this.graphData.labels && this.graphData.labels.position === 'external') {\n      this.appendExtLabels(currenData, `${this.graphElement.uid}__${idx}`, arc.centroid(), idx);\n    }\n  }\n\n\n\n\n  /**\n   * appendExtLabels\n   *\n   * Append external labels\n   * @param arcId arc id\n   * @param centro center of arc\n   * @param idx index of arc\n   */\n  appendIntLabels(arcId: string, centro: Array<number>, idx: number): void {\n\n    this.graphElement.svgContainer\n      .select(`#${arcId}`)\n        .append('text')\n        .attr('x', centro[0])\n        .attr('y', centro[1])\n        .attr('dy', '0.33em')\n        .attr('dx', '-0.33em')\n        .style('fill', 'white')\n        .text(this.graphData.labels.titles[idx]);\n  }\n\n\n\n\n  /**\n   * appendExtLabels\n   *\n   * Append external labels\n   * @param arcId arc id\n   * @param centro center of arc\n   * @param idx index of arc\n   */\n  appendExtLabels(data: CircularGraph, arcId: string, centro: Array<number>, idx: number): void {\n\n\n\n    /**\n     * calculateExternalPos\n     *\n     * Calculate the position of external pos to draw diagonal line.\n     * @param  dataArc data of arc\n     * @returns Array\n     */\n    function calculateEdgePos(dataArc: CircularGraph): Array<number> {\n      const edgeCircle = d3.arc()\n        .innerRadius(dataArc.radius)\n        .outerRadius(dataArc.radius)\n        .startAngle(this.circularMeasures.toRadians(dataArc.startAngle))\n        .endAngle(this.circularMeasures.toRadians(dataArc.endAngle));\n\n      return edgeCircle.centroid();\n    }\n\n    /**\n     * calculateExternalPos\n     *\n     * Calculate the position of external pos to draw diagonal line.\n     * @param  dataArc data of arc\n     * @returns Array\n     */\n    function calculateExternalPos(dataArc: CircularGraph): Array<number> {\n      const extCircle = d3.arc()\n        .innerRadius(dataArc.radius)\n        .outerRadius(dataArc.radius + 20)\n        .startAngle(this.circularMeasures.toRadians(dataArc.startAngle))\n        .endAngle(this.circularMeasures.toRadians(dataArc.endAngle));\n\n      return extCircle.centroid();\n    }\n\n    const edgeCentro = calculateEdgePos.call(this, data);\n    const extCentro = calculateExternalPos.call(this, data);\n\n    const paddingHorizontalLabel = extCentro[0] >= 0 ? extCentro[0] + 4 : extCentro[0] - 4;\n    const paddingVerticalLabel = extCentro[1] + 4;\n\n    // Draw line\n    this.graphElement.svgContainer\n      .select(`#${arcId}`)\n        .append('line')\n        .style('stroke', 'black')\n        .style('opacity', .7)\n        .attr('x1', edgeCentro[0])\n        .attr('y1', edgeCentro[1])\n        .attr('x2', extCentro[0])\n        .attr('y2', extCentro[1]);\n\n\n    this.graphElement.svgContainer\n      .select(`#${arcId}`)\n        .append('text')\n        .attr('text-anchor', () => extCentro[0] > 0 ? 'start' : 'end')\n        .attr('transform', `translate(${paddingHorizontalLabel}, ${paddingVerticalLabel})`)\n        .text(this.graphData.labels.titles[idx]);\n  }\n\n}\n","import { Component, ElementRef } from '@angular/core';\nimport { OnChanges, SimpleChanges } from '@angular/core';\n\nimport * as d3 from 'd3';\nimport { WrapperComponentD3, CircularMeasures } from '@ngx-chart/common';\nimport { DoughnutGraph } from './doughnut.class';\n\n@Component({\n  selector: 'ngl-doughnut',\n  template: ``,\n  styles: [],\n  providers: [\n    CircularMeasures\n  ]\n})\nexport class DoughnutGraphComponent extends DoughnutGraph implements OnChanges  {\n\n  currentElementId: string;\n\n  constructor(\n    public elementRef: ElementRef,\n    public circularMeasures: CircularMeasures\n  ) {\n    super();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n\n    // Remove previous graphs\n    if ( changes.graphData.previousValue ) {\n      d3.select(`#svg-${this.currentElementId}`).remove();\n    }\n\n    this.graphElement = new WrapperComponentD3(this.elementRef);\n    this.currentElementId = this.graphElement.uid;\n\n    this.minSize = this.circularMeasures.calcRadius(this.graphElement.width, this.graphElement.height);\n    // If graph has labels and the position of if are extenal reduce radius in 25 points.\n    this.minSize = this.graphData.labels && this.graphData.labels.position === 'external'\n      ? this.minSize - 25\n      : this.minSize;\n    this.segmentsDegree = this.scaleData(this.graphData.values).map( value => this.circularMeasures.arcValue(value) );\n\n\n    this.graphData.colors = this.checkGraphDataColors();\n\n    this.segmentsDegree.map( (arc, idx) => {\n      const startAngle = idx === 0\n        ? 0\n        : this.segmentsDegree.slice(0, idx).reduce( (curr, prev) => curr + prev);\n      const endAngle = idx === this.segmentsDegree.length\n        ? 360\n        : this.segmentsDegree.slice(0, idx + 1).reduce( (curr, prev) => curr + prev);\n\n      this.drawSegment(startAngle , endAngle, idx);\n    });\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { DoughnutGraphComponent } from './doughnut-graph.component';\n\n@NgModule({\n  declarations: [DoughnutGraphComponent],\n  imports: [\n  ],\n  exports: [DoughnutGraphComponent]\n})\nexport class DoughnutGraphModule { }\n"],"names":["d3.arc","tslib_1.__extends","d3.scaleLinear","arc","d3.select"],"mappings":"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"}
