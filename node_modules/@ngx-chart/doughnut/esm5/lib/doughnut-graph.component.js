/**
 * @fileoverview added by tsickle
 * Generated from: lib/doughnut-graph.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, ElementRef } from '@angular/core';
import * as d3 from 'd3';
import { WrapperComponentD3, CircularMeasures } from '@ngx-chart/common';
import { DoughnutGraph } from './doughnut.class';
var DoughnutGraphComponent = /** @class */ (function (_super) {
    tslib_1.__extends(DoughnutGraphComponent, _super);
    function DoughnutGraphComponent(elementRef, circularMeasures) {
        var _this = _super.call(this) || this;
        _this.elementRef = elementRef;
        _this.circularMeasures = circularMeasures;
        return _this;
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    DoughnutGraphComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        var _this = this;
        // Remove previous graphs
        if (changes.graphData.previousValue) {
            d3.select("#svg-" + this.currentElementId).remove();
        }
        this.graphElement = new WrapperComponentD3(this.elementRef);
        this.currentElementId = this.graphElement.uid;
        this.minSize = this.circularMeasures.calcRadius(this.graphElement.width, this.graphElement.height);
        // If graph has labels and the position of if are extenal reduce radius in 25 points.
        this.minSize = this.graphData.labels && this.graphData.labels.position === 'external'
            ? this.minSize - 25
            : this.minSize;
        this.segmentsDegree = this.scaleData(this.graphData.values).map((/**
         * @param {?} value
         * @return {?}
         */
        function (value) { return _this.circularMeasures.arcValue(value); }));
        this.graphData.colors = this.checkGraphDataColors();
        this.segmentsDegree.map((/**
         * @param {?} arc
         * @param {?} idx
         * @return {?}
         */
        function (arc, idx) {
            /** @type {?} */
            var startAngle = idx === 0
                ? 0
                : _this.segmentsDegree.slice(0, idx).reduce((/**
                 * @param {?} curr
                 * @param {?} prev
                 * @return {?}
                 */
                function (curr, prev) { return curr + prev; }));
            /** @type {?} */
            var endAngle = idx === _this.segmentsDegree.length
                ? 360
                : _this.segmentsDegree.slice(0, idx + 1).reduce((/**
                 * @param {?} curr
                 * @param {?} prev
                 * @return {?}
                 */
                function (curr, prev) { return curr + prev; }));
            _this.drawSegment(startAngle, endAngle, idx);
        }));
    };
    DoughnutGraphComponent.decorators = [
        { type: Component, args: [{
                    selector: 'ngl-doughnut',
                    template: "",
                    providers: [
                        CircularMeasures
                    ]
                }] }
    ];
    /** @nocollapse */
    DoughnutGraphComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: CircularMeasures }
    ]; };
    return DoughnutGraphComponent;
}(DoughnutGraph));
export { DoughnutGraphComponent };
if (false) {
    /** @type {?} */
    DoughnutGraphComponent.prototype.currentElementId;
    /** @type {?} */
    DoughnutGraphComponent.prototype.elementRef;
    /** @type {?} */
    DoughnutGraphComponent.prototype.circularMeasures;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZG91Z2hudXQtZ3JhcGguY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQG5neC1jaGFydC9kb3VnaG51dC8iLCJzb3VyY2VzIjpbImxpYi9kb3VnaG51dC1ncmFwaC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFHdEQsT0FBTyxLQUFLLEVBQUUsTUFBTSxJQUFJLENBQUM7QUFDekIsT0FBTyxFQUFFLGtCQUFrQixFQUFFLGdCQUFnQixFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDekUsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBRWpEO0lBUTRDLGtEQUFhO0lBSXZELGdDQUNTLFVBQXNCLEVBQ3RCLGdCQUFrQztRQUYzQyxZQUlFLGlCQUFPLFNBQ1I7UUFKUSxnQkFBVSxHQUFWLFVBQVUsQ0FBWTtRQUN0QixzQkFBZ0IsR0FBaEIsZ0JBQWdCLENBQWtCOztJQUczQyxDQUFDOzs7OztJQUVELDRDQUFXOzs7O0lBQVgsVUFBWSxPQUFzQjtRQUFsQyxpQkE4QkM7UUE1QkMseUJBQXlCO1FBQ3pCLElBQUssT0FBTyxDQUFDLFNBQVMsQ0FBQyxhQUFhLEVBQUc7WUFDckMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxVQUFRLElBQUksQ0FBQyxnQkFBa0IsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDO1NBQ3JEO1FBRUQsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLGtCQUFrQixDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUM1RCxJQUFJLENBQUMsZ0JBQWdCLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUM7UUFFOUMsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDbkcscUZBQXFGO1FBQ3JGLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsUUFBUSxLQUFLLFVBQVU7WUFDbkYsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLEdBQUcsRUFBRTtZQUNuQixDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQztRQUNqQixJQUFJLENBQUMsY0FBYyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHOzs7O1FBQUUsVUFBQSxLQUFLLElBQUksT0FBQSxLQUFJLENBQUMsZ0JBQWdCLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxFQUFyQyxDQUFxQyxFQUFFLENBQUM7UUFHbEgsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLG9CQUFvQixFQUFFLENBQUM7UUFFcEQsSUFBSSxDQUFDLGNBQWMsQ0FBQyxHQUFHOzs7OztRQUFFLFVBQUMsR0FBRyxFQUFFLEdBQUc7O2dCQUMxQixVQUFVLEdBQUcsR0FBRyxLQUFLLENBQUM7Z0JBQzFCLENBQUMsQ0FBQyxDQUFDO2dCQUNILENBQUMsQ0FBQyxLQUFJLENBQUMsY0FBYyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUMsTUFBTTs7Ozs7Z0JBQUUsVUFBQyxJQUFJLEVBQUUsSUFBSSxJQUFLLE9BQUEsSUFBSSxHQUFHLElBQUksRUFBWCxDQUFXLEVBQUM7O2dCQUNwRSxRQUFRLEdBQUcsR0FBRyxLQUFLLEtBQUksQ0FBQyxjQUFjLENBQUMsTUFBTTtnQkFDakQsQ0FBQyxDQUFDLEdBQUc7Z0JBQ0wsQ0FBQyxDQUFDLEtBQUksQ0FBQyxjQUFjLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsTUFBTTs7Ozs7Z0JBQUUsVUFBQyxJQUFJLEVBQUUsSUFBSSxJQUFLLE9BQUEsSUFBSSxHQUFHLElBQUksRUFBWCxDQUFXLEVBQUM7WUFFOUUsS0FBSSxDQUFDLFdBQVcsQ0FBQyxVQUFVLEVBQUcsUUFBUSxFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBQy9DLENBQUMsRUFBQyxDQUFDO0lBQ0wsQ0FBQzs7Z0JBakRGLFNBQVMsU0FBQztvQkFDVCxRQUFRLEVBQUUsY0FBYztvQkFDeEIsUUFBUSxFQUFFLEVBQUU7b0JBRVosU0FBUyxFQUFFO3dCQUNULGdCQUFnQjtxQkFDakI7aUJBQ0Y7Ozs7Z0JBZG1CLFVBQVU7Z0JBSUQsZ0JBQWdCOztJQXNEN0MsNkJBQUM7Q0FBQSxBQW5ERCxDQVE0QyxhQUFhLEdBMkN4RDtTQTNDWSxzQkFBc0I7OztJQUVqQyxrREFBeUI7O0lBR3ZCLDRDQUE2Qjs7SUFDN0Isa0RBQXlDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBFbGVtZW50UmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBPbkNoYW5nZXMsIFNpbXBsZUNoYW5nZXMgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0ICogYXMgZDMgZnJvbSAnZDMnO1xuaW1wb3J0IHsgV3JhcHBlckNvbXBvbmVudEQzLCBDaXJjdWxhck1lYXN1cmVzIH0gZnJvbSAnQG5neC1jaGFydC9jb21tb24nO1xuaW1wb3J0IHsgRG91Z2hudXRHcmFwaCB9IGZyb20gJy4vZG91Z2hudXQuY2xhc3MnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICduZ2wtZG91Z2hudXQnLFxuICB0ZW1wbGF0ZTogYGAsXG4gIHN0eWxlczogW10sXG4gIHByb3ZpZGVyczogW1xuICAgIENpcmN1bGFyTWVhc3VyZXNcbiAgXVxufSlcbmV4cG9ydCBjbGFzcyBEb3VnaG51dEdyYXBoQ29tcG9uZW50IGV4dGVuZHMgRG91Z2hudXRHcmFwaCBpbXBsZW1lbnRzIE9uQ2hhbmdlcyAge1xuXG4gIGN1cnJlbnRFbGVtZW50SWQ6IHN0cmluZztcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwdWJsaWMgZWxlbWVudFJlZjogRWxlbWVudFJlZixcbiAgICBwdWJsaWMgY2lyY3VsYXJNZWFzdXJlczogQ2lyY3VsYXJNZWFzdXJlc1xuICApIHtcbiAgICBzdXBlcigpO1xuICB9XG5cbiAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcykge1xuXG4gICAgLy8gUmVtb3ZlIHByZXZpb3VzIGdyYXBoc1xuICAgIGlmICggY2hhbmdlcy5ncmFwaERhdGEucHJldmlvdXNWYWx1ZSApIHtcbiAgICAgIGQzLnNlbGVjdChgI3N2Zy0ke3RoaXMuY3VycmVudEVsZW1lbnRJZH1gKS5yZW1vdmUoKTtcbiAgICB9XG5cbiAgICB0aGlzLmdyYXBoRWxlbWVudCA9IG5ldyBXcmFwcGVyQ29tcG9uZW50RDModGhpcy5lbGVtZW50UmVmKTtcbiAgICB0aGlzLmN1cnJlbnRFbGVtZW50SWQgPSB0aGlzLmdyYXBoRWxlbWVudC51aWQ7XG5cbiAgICB0aGlzLm1pblNpemUgPSB0aGlzLmNpcmN1bGFyTWVhc3VyZXMuY2FsY1JhZGl1cyh0aGlzLmdyYXBoRWxlbWVudC53aWR0aCwgdGhpcy5ncmFwaEVsZW1lbnQuaGVpZ2h0KTtcbiAgICAvLyBJZiBncmFwaCBoYXMgbGFiZWxzIGFuZCB0aGUgcG9zaXRpb24gb2YgaWYgYXJlIGV4dGVuYWwgcmVkdWNlIHJhZGl1cyBpbiAyNSBwb2ludHMuXG4gICAgdGhpcy5taW5TaXplID0gdGhpcy5ncmFwaERhdGEubGFiZWxzICYmIHRoaXMuZ3JhcGhEYXRhLmxhYmVscy5wb3NpdGlvbiA9PT0gJ2V4dGVybmFsJ1xuICAgICAgPyB0aGlzLm1pblNpemUgLSAyNVxuICAgICAgOiB0aGlzLm1pblNpemU7XG4gICAgdGhpcy5zZWdtZW50c0RlZ3JlZSA9IHRoaXMuc2NhbGVEYXRhKHRoaXMuZ3JhcGhEYXRhLnZhbHVlcykubWFwKCB2YWx1ZSA9PiB0aGlzLmNpcmN1bGFyTWVhc3VyZXMuYXJjVmFsdWUodmFsdWUpICk7XG5cblxuICAgIHRoaXMuZ3JhcGhEYXRhLmNvbG9ycyA9IHRoaXMuY2hlY2tHcmFwaERhdGFDb2xvcnMoKTtcblxuICAgIHRoaXMuc2VnbWVudHNEZWdyZWUubWFwKCAoYXJjLCBpZHgpID0+IHtcbiAgICAgIGNvbnN0IHN0YXJ0QW5nbGUgPSBpZHggPT09IDBcbiAgICAgICAgPyAwXG4gICAgICAgIDogdGhpcy5zZWdtZW50c0RlZ3JlZS5zbGljZSgwLCBpZHgpLnJlZHVjZSggKGN1cnIsIHByZXYpID0+IGN1cnIgKyBwcmV2KTtcbiAgICAgIGNvbnN0IGVuZEFuZ2xlID0gaWR4ID09PSB0aGlzLnNlZ21lbnRzRGVncmVlLmxlbmd0aFxuICAgICAgICA/IDM2MFxuICAgICAgICA6IHRoaXMuc2VnbWVudHNEZWdyZWUuc2xpY2UoMCwgaWR4ICsgMSkucmVkdWNlKCAoY3VyciwgcHJldikgPT4gY3VyciArIHByZXYpO1xuXG4gICAgICB0aGlzLmRyYXdTZWdtZW50KHN0YXJ0QW5nbGUgLCBlbmRBbmdsZSwgaWR4KTtcbiAgICB9KTtcbiAgfVxuXG59XG4iXX0=