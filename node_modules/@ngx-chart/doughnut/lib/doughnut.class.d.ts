import { CircularGraphs } from './circular-graphs.class';
import { Doughnut } from './iDoughnut';
import { CircularGraph } from './iCircular-graphs';
export declare abstract class DoughnutGraph extends CircularGraphs {
    graphData: Doughnut;
    protected graphElement: any;
    protected minSize: number;
    protected segmentsDegree: Array<number>;
    constructor();
    /**
     * scaleData
     *
     * Convert the data values to array of values in percentage scale
     * @param data array of values
     * @returns Array
     */
    scaleData(data: Array<number>): Array<number>;
    /**
     * checkGraphDataColors
     *
     *
     * Check if the number of colors is the same in the values. If it is different, it generates a random color palette
     * @returns Doughnut['colors']
     */
    checkGraphDataColors(): Doughnut['colors'];
    /**
     * drawSegment
     *
     * Draw circular segment
     * @param startAngle start angle of arc
     * @param endAngle end angle of arc
     * @param idx index of arc
     */
    drawSegment(startAngle: number, endAngle: number, idx: number): void;
    /**
     * appendExtLabels
     *
     * Append external labels
     * @param arcId arc id
     * @param centro center of arc
     * @param idx index of arc
     */
    appendIntLabels(arcId: string, centro: Array<number>, idx: number): void;
    /**
     * appendExtLabels
     *
     * Append external labels
     * @param arcId arc id
     * @param centro center of arc
     * @param idx index of arc
     */
    appendExtLabels(data: CircularGraph, arcId: string, centro: Array<number>, idx: number): void;
}
