import { Directive, EventEmitter, inject, Input, Output, ViewContainerRef } from '@angular/core';
import * as i0 from "@angular/core";
export class NgxPermissionsRestrictStubDirective {
    constructor() {
        this.permissionsAuthorized = new EventEmitter();
        this.permissionsUnauthorized = new EventEmitter();
        this.viewContainer = inject(ViewContainerRef);
    }
    ngOnInit() {
        this.viewContainer.clear();
        if (this.getUnAuthorizedTemplate()) {
            this.viewContainer.createEmbeddedView(this.getUnAuthorizedTemplate());
        }
        this.permissionsUnauthorized.emit();
    }
    getUnAuthorizedTemplate() {
        return (this.ngxPermissionsOnlyElse ||
            this.ngxPermissionsExceptElse ||
            this.ngxPermissionsElse);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.2.1", ngImport: i0, type: NgxPermissionsRestrictStubDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.2.1", type: NgxPermissionsRestrictStubDirective, isStandalone: true, selector: "[ngxPermissionsOnly],[ngxPermissionsExcept]", inputs: { ngxPermissionsOnly: "ngxPermissionsOnly", ngxPermissionsOnlyThen: "ngxPermissionsOnlyThen", ngxPermissionsOnlyElse: "ngxPermissionsOnlyElse", ngxPermissionsExcept: "ngxPermissionsExcept", ngxPermissionsExceptElse: "ngxPermissionsExceptElse", ngxPermissionsExceptThen: "ngxPermissionsExceptThen", ngxPermissionsThen: "ngxPermissionsThen", ngxPermissionsElse: "ngxPermissionsElse", ngxPermissionsOnlyAuthorisedStrategy: "ngxPermissionsOnlyAuthorisedStrategy", ngxPermissionsOnlyUnauthorisedStrategy: "ngxPermissionsOnlyUnauthorisedStrategy", ngxPermissionsExceptUnauthorisedStrategy: "ngxPermissionsExceptUnauthorisedStrategy", ngxPermissionsExceptAuthorisedStrategy: "ngxPermissionsExceptAuthorisedStrategy", ngxPermissionsUnauthorisedStrategy: "ngxPermissionsUnauthorisedStrategy", ngxPermissionsAuthorisedStrategy: "ngxPermissionsAuthorisedStrategy" }, outputs: { permissionsAuthorized: "permissionsAuthorized", permissionsUnauthorized: "permissionsUnauthorized" }, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.2.1", ngImport: i0, type: NgxPermissionsRestrictStubDirective, decorators: [{
            type: Directive,
            args: [{
                    standalone: true,
                    selector: '[ngxPermissionsOnly],[ngxPermissionsExcept]',
                }]
        }], propDecorators: { ngxPermissionsOnly: [{
                type: Input
            }], ngxPermissionsOnlyThen: [{
                type: Input
            }], ngxPermissionsOnlyElse: [{
                type: Input
            }], ngxPermissionsExcept: [{
                type: Input
            }], ngxPermissionsExceptElse: [{
                type: Input
            }], ngxPermissionsExceptThen: [{
                type: Input
            }], ngxPermissionsThen: [{
                type: Input
            }], ngxPermissionsElse: [{
                type: Input
            }], ngxPermissionsOnlyAuthorisedStrategy: [{
                type: Input
            }], ngxPermissionsOnlyUnauthorisedStrategy: [{
                type: Input
            }], ngxPermissionsExceptUnauthorisedStrategy: [{
                type: Input
            }], ngxPermissionsExceptAuthorisedStrategy: [{
                type: Input
            }], ngxPermissionsUnauthorisedStrategy: [{
                type: Input
            }], ngxPermissionsAuthorisedStrategy: [{
                type: Input
            }], permissionsAuthorized: [{
                type: Output
            }], permissionsUnauthorized: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGVybWlzc2lvbnMtcmVzdHJpY3QuZGlyZWN0aXZlLnN0dWIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9uZ3gtcGVybWlzc2lvbnMvc3JjL2xpYi90ZXN0aW5nL3Blcm1pc3Npb25zLXJlc3RyaWN0LmRpcmVjdGl2ZS5zdHViLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsWUFBWSxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQVUsTUFBTSxFQUFlLGdCQUFnQixFQUFFLE1BQU0sZUFBZSxDQUFDOztBQU90SCxNQUFNLE9BQU8sbUNBQW1DO0lBSmhEO1FBMkJjLDBCQUFxQixHQUFHLElBQUksWUFBWSxFQUFFLENBQUM7UUFDM0MsNEJBQXVCLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQUUvQyxrQkFBYSxHQUFHLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO0tBbUJwRDtJQWpCRyxRQUFRO1FBQ0osSUFBSSxDQUFDLGFBQWEsQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUMzQixJQUFJLElBQUksQ0FBQyx1QkFBdUIsRUFBRSxFQUFFLENBQUM7WUFDakMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxrQkFBa0IsQ0FDakMsSUFBSSxDQUFDLHVCQUF1QixFQUFFLENBQ2pDLENBQUM7UUFDTixDQUFDO1FBQ0QsSUFBSSxDQUFDLHVCQUF1QixDQUFDLElBQUksRUFBRSxDQUFDO0lBQ3hDLENBQUM7SUFFTyx1QkFBdUI7UUFDM0IsT0FBTyxDQUNILElBQUksQ0FBQyxzQkFBc0I7WUFDM0IsSUFBSSxDQUFDLHdCQUF3QjtZQUM3QixJQUFJLENBQUMsa0JBQWtCLENBQzFCLENBQUM7SUFDTixDQUFDOzhHQTVDUSxtQ0FBbUM7a0dBQW5DLG1DQUFtQzs7MkZBQW5DLG1DQUFtQztrQkFKL0MsU0FBUzttQkFBQztvQkFDUCxVQUFVLEVBQUUsSUFBSTtvQkFDaEIsUUFBUSxFQUFFLDZDQUE2QztpQkFDMUQ7OEJBRVksa0JBQWtCO3NCQUExQixLQUFLO2dCQUNHLHNCQUFzQjtzQkFBOUIsS0FBSztnQkFDRyxzQkFBc0I7c0JBQTlCLEtBQUs7Z0JBRUcsb0JBQW9CO3NCQUE1QixLQUFLO2dCQUNHLHdCQUF3QjtzQkFBaEMsS0FBSztnQkFDRyx3QkFBd0I7c0JBQWhDLEtBQUs7Z0JBRUcsa0JBQWtCO3NCQUExQixLQUFLO2dCQUNHLGtCQUFrQjtzQkFBMUIsS0FBSztnQkFFRyxvQ0FBb0M7c0JBQTVDLEtBQUs7Z0JBQ0csc0NBQXNDO3NCQUE5QyxLQUFLO2dCQUVHLHdDQUF3QztzQkFBaEQsS0FBSztnQkFHRyxzQ0FBc0M7c0JBQTlDLEtBQUs7Z0JBRUcsa0NBQWtDO3NCQUExQyxLQUFLO2dCQUNHLGdDQUFnQztzQkFBeEMsS0FBSztnQkFFSSxxQkFBcUI7c0JBQTlCLE1BQU07Z0JBQ0csdUJBQXVCO3NCQUFoQyxNQUFNIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBFdmVudEVtaXR0ZXIsIGluamVjdCwgSW5wdXQsIE9uSW5pdCwgT3V0cHV0LCBUZW1wbGF0ZVJlZiwgVmlld0NvbnRhaW5lclJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgU3RyYXRlZ3lGdW5jdGlvbiB9IGZyb20gJy4uL3NlcnZpY2UvY29uZmlndXJhdGlvbi5zZXJ2aWNlJztcblxuQERpcmVjdGl2ZSh7XG4gICAgc3RhbmRhbG9uZTogdHJ1ZSxcbiAgICBzZWxlY3RvcjogJ1tuZ3hQZXJtaXNzaW9uc09ubHldLFtuZ3hQZXJtaXNzaW9uc0V4Y2VwdF0nLFxufSlcbmV4cG9ydCBjbGFzcyBOZ3hQZXJtaXNzaW9uc1Jlc3RyaWN0U3R1YkRpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uSW5pdCB7XG4gICAgQElucHV0KCkgbmd4UGVybWlzc2lvbnNPbmx5OiBzdHJpbmcgfCBzdHJpbmdbXTtcbiAgICBASW5wdXQoKSBuZ3hQZXJtaXNzaW9uc09ubHlUaGVuOiBUZW1wbGF0ZVJlZjxhbnk+O1xuICAgIEBJbnB1dCgpIG5neFBlcm1pc3Npb25zT25seUVsc2U6IFRlbXBsYXRlUmVmPGFueT47XG5cbiAgICBASW5wdXQoKSBuZ3hQZXJtaXNzaW9uc0V4Y2VwdDogc3RyaW5nIHwgc3RyaW5nW107XG4gICAgQElucHV0KCkgbmd4UGVybWlzc2lvbnNFeGNlcHRFbHNlOiBUZW1wbGF0ZVJlZjxhbnk+O1xuICAgIEBJbnB1dCgpIG5neFBlcm1pc3Npb25zRXhjZXB0VGhlbjogVGVtcGxhdGVSZWY8YW55PjtcblxuICAgIEBJbnB1dCgpIG5neFBlcm1pc3Npb25zVGhlbjogVGVtcGxhdGVSZWY8YW55PjtcbiAgICBASW5wdXQoKSBuZ3hQZXJtaXNzaW9uc0Vsc2U6IFRlbXBsYXRlUmVmPGFueT47XG5cbiAgICBASW5wdXQoKSBuZ3hQZXJtaXNzaW9uc09ubHlBdXRob3Jpc2VkU3RyYXRlZ3k6IHN0cmluZyB8IFN0cmF0ZWd5RnVuY3Rpb247XG4gICAgQElucHV0KCkgbmd4UGVybWlzc2lvbnNPbmx5VW5hdXRob3Jpc2VkU3RyYXRlZ3k6IHN0cmluZyB8IFN0cmF0ZWd5RnVuY3Rpb247XG5cbiAgICBASW5wdXQoKSBuZ3hQZXJtaXNzaW9uc0V4Y2VwdFVuYXV0aG9yaXNlZFN0cmF0ZWd5OlxuICAgICAgICB8IHN0cmluZ1xuICAgICAgICB8IFN0cmF0ZWd5RnVuY3Rpb247XG4gICAgQElucHV0KCkgbmd4UGVybWlzc2lvbnNFeGNlcHRBdXRob3Jpc2VkU3RyYXRlZ3k6IHN0cmluZyB8IFN0cmF0ZWd5RnVuY3Rpb247XG5cbiAgICBASW5wdXQoKSBuZ3hQZXJtaXNzaW9uc1VuYXV0aG9yaXNlZFN0cmF0ZWd5OiBzdHJpbmcgfCBTdHJhdGVneUZ1bmN0aW9uO1xuICAgIEBJbnB1dCgpIG5neFBlcm1pc3Npb25zQXV0aG9yaXNlZFN0cmF0ZWd5OiBzdHJpbmcgfCBTdHJhdGVneUZ1bmN0aW9uO1xuXG4gICAgQE91dHB1dCgpIHBlcm1pc3Npb25zQXV0aG9yaXplZCA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcbiAgICBAT3V0cHV0KCkgcGVybWlzc2lvbnNVbmF1dGhvcml6ZWQgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG5cbiAgICBwcml2YXRlIHZpZXdDb250YWluZXIgPSBpbmplY3QoVmlld0NvbnRhaW5lclJlZik7XG5cbiAgICBuZ09uSW5pdCgpOiB2b2lkIHtcbiAgICAgICAgdGhpcy52aWV3Q29udGFpbmVyLmNsZWFyKCk7XG4gICAgICAgIGlmICh0aGlzLmdldFVuQXV0aG9yaXplZFRlbXBsYXRlKCkpIHtcbiAgICAgICAgICAgIHRoaXMudmlld0NvbnRhaW5lci5jcmVhdGVFbWJlZGRlZFZpZXcoXG4gICAgICAgICAgICAgICAgdGhpcy5nZXRVbkF1dGhvcml6ZWRUZW1wbGF0ZSgpXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucGVybWlzc2lvbnNVbmF1dGhvcml6ZWQuZW1pdCgpO1xuICAgIH1cblxuICAgIHByaXZhdGUgZ2V0VW5BdXRob3JpemVkVGVtcGxhdGUoKSB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICB0aGlzLm5neFBlcm1pc3Npb25zT25seUVsc2UgfHxcbiAgICAgICAgICAgIHRoaXMubmd4UGVybWlzc2lvbnNFeGNlcHRFbHNlIHx8XG4gICAgICAgICAgICB0aGlzLm5neFBlcm1pc3Npb25zRWxzZVxuICAgICAgICApO1xuICAgIH1cbn1cbiJdfQ==