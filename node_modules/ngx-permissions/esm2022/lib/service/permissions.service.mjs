import { Inject, Injectable, InjectionToken } from '@angular/core';
import { BehaviorSubject, from, of } from 'rxjs';
import { catchError, first, map, mergeAll, switchMap } from 'rxjs/operators';
import { isBoolean, isFunction, transformStringToArray } from '../utils/utils';
import * as i0 from "@angular/core";
import * as i1 from "../store/permissions.store";
export const USE_PERMISSIONS_STORE = new InjectionToken('USE_PERMISSIONS_STORE');
export class NgxPermissionsService {
    constructor(isolate = false, permissionsStore) {
        this.isolate = isolate;
        this.permissionsStore = permissionsStore;
        this.permissionsSource = this.isolate ? new BehaviorSubject({}) : this.permissionsStore.permissionsSource;
        this.permissions$ = this.permissionsSource.asObservable();
    }
    /**
     * Remove all permissions from permissions source
     */
    flushPermissions() {
        this.permissionsSource.next({});
    }
    hasPermission(permission) {
        if (!permission || (Array.isArray(permission) && permission.length === 0)) {
            return Promise.resolve(true);
        }
        permission = transformStringToArray(permission);
        return this.hasArrayPermission(permission);
    }
    loadPermissions(permissions, validationFunction) {
        const newPermissions = permissions.reduce((source, name) => this.reducePermission(source, name, validationFunction), {});
        this.permissionsSource.next(newPermissions);
    }
    addPermission(permission, validationFunction) {
        if (Array.isArray(permission)) {
            const permissions = permission.reduce((source, name) => this.reducePermission(source, name, validationFunction), this.permissionsSource.value);
            this.permissionsSource.next(permissions);
        }
        else {
            const permissions = this.reducePermission(this.permissionsSource.value, permission, validationFunction);
            this.permissionsSource.next(permissions);
        }
    }
    removePermission(permissionName) {
        const permissions = {
            ...this.permissionsSource.value
        };
        delete permissions[permissionName];
        this.permissionsSource.next(permissions);
    }
    getPermission(name) {
        return this.permissionsSource.value[name];
    }
    getPermissions() {
        return this.permissionsSource.value;
    }
    reducePermission(source, name, validationFunction) {
        if (!!validationFunction && isFunction(validationFunction)) {
            return {
                ...source,
                [name]: { name, validationFunction }
            };
        }
        return {
            ...source,
            [name]: { name }
        };
    }
    hasArrayPermission(permissions) {
        const promises = permissions.map(key => {
            if (this.hasPermissionValidationFunction(key)) {
                const validationFunction = this.permissionsSource.value[key].validationFunction;
                const immutableValue = { ...this.permissionsSource.value };
                return of(null).pipe(map(() => validationFunction(key, immutableValue)), switchMap((promise) => isBoolean(promise) ?
                    of(promise) : promise), catchError(() => of(false)));
            }
            // check for name of the permission if there is no validation function
            return of(!!this.permissionsSource.value[key]);
        });
        return from(promises).pipe(mergeAll(), first((data) => data !== false, false), map((data) => data !== false)).toPromise().then((data) => data);
    }
    hasPermissionValidationFunction(key) {
        return !!this.permissionsSource.value[key] &&
            !!this.permissionsSource.value[key].validationFunction &&
            isFunction(this.permissionsSource.value[key].validationFunction);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.2.1", ngImport: i0, type: NgxPermissionsService, deps: [{ token: USE_PERMISSIONS_STORE }, { token: i1.NgxPermissionsStore }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "17.2.1", ngImport: i0, type: NgxPermissionsService }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.2.1", ngImport: i0, type: NgxPermissionsService, decorators: [{
            type: Injectable
        }], ctorParameters: () => [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [USE_PERMISSIONS_STORE]
                }] }, { type: i1.NgxPermissionsStore }] });
//# sourceMappingURL=data:application/json;base64,