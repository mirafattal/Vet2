import { coerceCssPixelValue } from '@angular/cdk/coercion';
import { Dialog, DialogConfig } from '@angular/cdk/dialog';
import { Inject, Injectable, InjectionToken, Optional, SkipSelf, } from '@angular/core';
import { defer, Subject } from 'rxjs';
import { startWith } from 'rxjs/operators';
import { MtxDrawerConfig } from './drawer-config';
import { MtxDrawerContainer } from './drawer-container';
import { MtxDrawerRef } from './drawer-ref';
import * as i0 from "@angular/core";
import * as i1 from "@angular/cdk/overlay";
import * as i2 from "./drawer-config";
/** Injection token that can be used to access the data that was passed in to a drawer. */
export const MTX_DRAWER_DATA = new InjectionToken('MtxDrawerData');
/** Injection token that can be used to specify default drawer options. */
export const MTX_DRAWER_DEFAULT_OPTIONS = new InjectionToken('mtx-drawer-default-options');
// Counter for unique drawer ids.
let uniqueId = 0;
/**
 * Service to trigger Material Design bottom sheets.
 */
export class MtxDrawer {
    /** Keeps track of the currently-open dialogs. */
    get openDrawers() {
        return this._parentDrawer ? this._parentDrawer.openDrawers : this._openDrawersAtThisLevel;
    }
    /** Stream that emits when a drawer has been opened. */
    get afterOpened() {
        return this._parentDrawer ? this._parentDrawer.afterOpened : this._afterOpenedAtThisLevel;
    }
    _getAfterAllDismissed() {
        const parent = this._parentDrawer;
        return parent ? parent._getAfterAllDismissed() : this._afterAllDismissedAtThisLevel;
    }
    constructor(_overlay, injector, _parentDrawer, _defaultOptions) {
        this._overlay = _overlay;
        this._parentDrawer = _parentDrawer;
        this._defaultOptions = _defaultOptions;
        this._openDrawersAtThisLevel = [];
        this._afterAllDismissedAtThisLevel = new Subject();
        this._afterOpenedAtThisLevel = new Subject();
        /**
         * Stream that emits when all open drawer have finished closing.
         * Will emit on subscribe if there are no open drawers to begin with.
         */
        this.afterAllDismissed = defer(() => this.openDrawers.length
            ? this._getAfterAllDismissed()
            : this._getAfterAllDismissed().pipe(startWith(undefined)));
        this._dialog = injector.get(Dialog);
    }
    open(componentOrTemplateRef, config) {
        let drawerRef;
        const _config = { ...(this._defaultOptions || new MtxDrawerConfig()), ...config };
        _config.id = _config.id || `mtx-drawer-${uniqueId++}`;
        _config.width =
            _config.position === 'left' || _config.position === 'right'
                ? coerceCssPixelValue(_config.width)
                : '100vw';
        _config.height =
            _config.position === 'top' || _config.position === 'bottom'
                ? coerceCssPixelValue(_config.height)
                : '100vh';
        this._dialog.open(componentOrTemplateRef, {
            ..._config,
            // Disable closing since we need to sync it up to the animation ourselves.
            disableClose: true,
            // Disable closing on detachments so that we can sync up the animation.
            closeOnOverlayDetachments: false,
            container: {
                type: MtxDrawerContainer,
                providers: () => [
                    // Provide our config as the CDK config as well since it has the same interface as the
                    // CDK one, but it contains the actual values passed in by the user for things like
                    // `disableClose` which we disable for the CDK dialog since we handle it ourselves.
                    { provide: MtxDrawerConfig, useValue: _config },
                    { provide: DialogConfig, useValue: _config },
                ],
            },
            scrollStrategy: _config.scrollStrategy || this._overlay.scrollStrategies.block(),
            positionStrategy: this._overlay.position().global()[_config.position]('0'),
            templateContext: () => ({ drawerRef }),
            providers: (cdkRef, _cdkConfig, container) => {
                drawerRef = new MtxDrawerRef(cdkRef, _config, container);
                return [
                    { provide: MtxDrawerRef, useValue: drawerRef },
                    { provide: MTX_DRAWER_DATA, useValue: _config.data },
                ];
            },
        });
        this.openDrawers.push(drawerRef);
        this.afterOpened.next(drawerRef);
        drawerRef.afterDismissed().subscribe(() => {
            const index = this.openDrawers.indexOf(drawerRef);
            if (index > -1) {
                this.openDrawers.splice(index, 1);
                if (!this.openDrawers.length) {
                    this._getAfterAllDismissed().next();
                }
            }
        });
        return drawerRef;
    }
    /**
     * Dismisses all of the currently-open drawers.
     */
    dismissAll() {
        this._dismissDrawers(this.openDrawers);
    }
    /**
     * Finds an open drawer by its id.
     * @param id ID to use when looking up the drawer.
     */
    getDrawerById(id) {
        return this.openDrawers.find(drawer => drawer.id === id);
    }
    ngOnDestroy() {
        // Only dismiss the drawers at this level on destroy
        // since the parent service may still be active.
        this._dismissDrawers(this._openDrawersAtThisLevel);
        this._afterAllDismissedAtThisLevel.complete();
        this._afterOpenedAtThisLevel.complete();
    }
    _dismissDrawers(drawers) {
        let i = drawers.length;
        while (i--) {
            drawers[i].dismiss();
        }
    }
    /** @nocollapse */ static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.0", ngImport: i0, type: MtxDrawer, deps: [{ token: i1.Overlay }, { token: i0.Injector }, { token: MtxDrawer, optional: true, skipSelf: true }, { token: MTX_DRAWER_DEFAULT_OPTIONS, optional: true }], target: i0.ɵɵFactoryTarget.Injectable }); }
    /** @nocollapse */ static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.0", ngImport: i0, type: MtxDrawer, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.0", ngImport: i0, type: MtxDrawer, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: i1.Overlay }, { type: i0.Injector }, { type: MtxDrawer, decorators: [{
                    type: Optional
                }, {
                    type: SkipSelf
                }] }, { type: i2.MtxDrawerConfig, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [MTX_DRAWER_DEFAULT_OPTIONS]
                }] }] });
//# sourceMappingURL=data:application/json;base64,