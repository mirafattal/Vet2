import { coerceNumberProperty } from '@angular/cdk/coercion';
import { DOWN_ARROW, UP_ARROW } from '@angular/cdk/keycodes';
import { booleanAttribute, ChangeDetectionStrategy, Component, Directive, ElementRef, EventEmitter, Input, Output, ViewChild, ViewEncapsulation, } from '@angular/core';
import { MatButton } from '@angular/material/button';
import { MtxClock } from './clock';
import * as i0 from "@angular/core";
import * as i1 from "@ng-matero/extensions/core";
import * as i2 from "./datetimepicker-intl";
function pad(num, size) {
    num = String(num);
    while (num.length < size)
        num = '0' + num;
    return num;
}
export class MtxTimeInput {
    set timeInterval(value) {
        this._interval = coerceNumberProperty(value);
    }
    set timeMin(value) {
        this._min = coerceNumberProperty(value);
    }
    set timeMax(value) {
        this._max = coerceNumberProperty(value);
    }
    set timeValue(value) {
        this._value = coerceNumberProperty(value);
        if (!this.hasFocus) {
            this.writeValue(this._value);
        }
        this.writePlaceholder(this._value);
    }
    constructor(element, cdr) {
        this.element = element;
        this.cdr = cdr;
        this._interval = 1;
        this._min = 0;
        this._max = Infinity;
        this.timeValueChanged = new EventEmitter();
        this.keyDownListener = this.keyDownHandler.bind(this);
        this.keyPressListener = this.keyPressHandler.bind(this);
        this.inputEventListener = this.inputChangedHandler.bind(this);
        this.inputElement.addEventListener('keydown', this.keyDownListener, {
            passive: true,
        });
        // Do not passive since we want to be able to preventDefault()
        this.inputElement.addEventListener('keypress', this.keyPressListener);
        this.inputElement.addEventListener('input', this.inputEventListener, {
            passive: true,
        });
    }
    get hasFocus() {
        return this.element.nativeElement && this.element?.nativeElement === document?.activeElement;
    }
    get inputElement() {
        return this.element.nativeElement;
    }
    // We look here at the placeholder value, because we write '' into the value on focus
    // placeholder should always be up to date with "currentValue"
    get valid() {
        // At the start _value is undefined therefore this would result in not valid and
        // make a ugly warning border afterwards we can safely check
        if (this._value) {
            const currentValue = String(this.inputElement.value);
            // It can be that currentValue is empty due to we removing the value on focus,
            // if that is the case we should check previous value which should be in the placeholder
            if (currentValue.length) {
                return this._value == this.inputElement.value;
            }
            else {
                return this._value == this.inputElement.placeholder;
            }
        }
        return true;
    }
    get invalid() {
        return !this.valid;
    }
    blur() {
        this.writeValue(this._value);
        this.writePlaceholder(this._value);
    }
    focus() {
        this.writeValue('');
    }
    /**
     * Write value to inputElement
     * @param value NumberInput
     */
    writeValue(value) {
        if (value !== '') {
            this.inputElement.value = pad(value, 2);
        }
        else {
            this.inputElement.value = '';
        }
        this.cdr.markForCheck();
    }
    /**
     * Writes value to placeholder
     * @param value NumberInput
     */
    writePlaceholder(value) {
        this.inputElement.placeholder = pad(value, 2);
        this.cdr.markForCheck();
    }
    keyDownHandler(event) {
        if (String(this.inputElement.value).length > 0) {
            let value = null;
            if (event.keyCode === UP_ARROW) {
                value = coerceNumberProperty(this._value);
                value += this._interval;
                event.stopPropagation();
            }
            else if (event.keyCode === DOWN_ARROW) {
                value = coerceNumberProperty(this._value);
                value -= this._interval;
                event.stopPropagation();
            }
            // if value has changed
            if (typeof value === 'number') {
                this.writeValue(value);
                this.writePlaceholder(value);
                this.clampInputValue();
                this.timeValueChanged.emit(this._value);
            }
        }
    }
    /**
     * Prevent non number inputs in the inputElement with the exception of Enter/BackSpace
     * @param event KeyboardEvent
     */
    keyPressHandler(event) {
        const key = event?.key ?? null;
        if (isNaN(Number(key)) && key !== 'Enter') {
            event.preventDefault();
        }
    }
    inputChangedHandler() {
        this.clampInputValue();
        this.timeValueChanged.emit(this._value);
    }
    clampInputValue() {
        if (this.inputElement?.value === '') {
            return;
        }
        const value = coerceNumberProperty(this.inputElement?.value ?? null);
        // if this._min === 0, we should allow 0
        if (value || (this._min === 0 && value === 0)) {
            const clampedValue = Math.min(Math.max(value, this._min), this._max);
            if (clampedValue !== value) {
                this.writeValue(clampedValue);
                this.writePlaceholder(clampedValue);
            }
            this._value = clampedValue;
        }
    }
    /**
     * Remove event listeners on destruction
     */
    ngOnDestroy() {
        this.inputElement.removeEventListener('keydown', this.keyDownListener);
        this.inputElement.removeEventListener('keypress', this.keyPressListener);
        this.inputElement.removeEventListener('input', this.inputEventListener);
    }
    /** @nocollapse */ static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.0", ngImport: i0, type: MtxTimeInput, deps: [{ token: i0.ElementRef }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Directive }); }
    /** @nocollapse */ static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "18.2.0", type: MtxTimeInput, isStandalone: true, selector: "input.mtx-time-input", inputs: { timeInterval: "timeInterval", timeMin: "timeMin", timeMax: "timeMax", timeValue: "timeValue" }, outputs: { timeValueChanged: "timeValueChanged" }, host: { listeners: { "blur": "blur($event)", "focus": "focus($event)" } }, exportAs: ["mtxTimeInput"], ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.0", ngImport: i0, type: MtxTimeInput, decorators: [{
            type: Directive,
            args: [{
                    selector: 'input.mtx-time-input',
                    host: {
                        '(blur)': 'blur($event)',
                        '(focus)': 'focus($event)',
                    },
                    exportAs: 'mtxTimeInput',
                    standalone: true,
                }]
        }], ctorParameters: () => [{ type: i0.ElementRef }, { type: i0.ChangeDetectorRef }], propDecorators: { timeInterval: [{
                type: Input,
                args: ['timeInterval']
            }], timeMin: [{
                type: Input,
                args: ['timeMin']
            }], timeMax: [{
                type: Input,
                args: ['timeMax']
            }], timeValue: [{
                type: Input,
                args: ['timeValue']
            }], timeValueChanged: [{
                type: Output
            }] } });
export class MtxTime {
    /**
     * The date to display in this clock view.
     */
    get activeDate() {
        return this._activeDate;
    }
    set activeDate(value) {
        this._activeDate = this._adapter.clampDate(value, this.minDate, this.maxDate);
    }
    /** The currently selected date. */
    get selected() {
        return this._selected;
    }
    set selected(value) {
        this._selected = this._adapter.getValidDateOrNull(this._adapter.deserialize(value));
        if (this._selected) {
            this.activeDate = this._selected;
        }
    }
    /** The minimum selectable date. */
    get minDate() {
        return this._minDate;
    }
    set minDate(value) {
        this._minDate = this._adapter.getValidDateOrNull(this._adapter.deserialize(value));
    }
    /** The maximum selectable date. */
    get maxDate() {
        return this._maxDate;
    }
    set maxDate(value) {
        this._maxDate = this._adapter.getValidDateOrNull(this._adapter.deserialize(value));
    }
    /** Whether the clock should be started in hour or minute view. */
    get clockView() {
        return this._clockView;
    }
    set clockView(value) {
        this._clockView = value;
    }
    get isHourView() {
        return this._clockView === 'hour';
    }
    get isMinuteView() {
        return this._clockView === 'hour';
    }
    get hour() {
        if (!this.activeDate) {
            if (this.twelvehour) {
                return '12';
            }
            else {
                return '00';
            }
        }
        const hour = Number(this._adapter.getHour(this.activeDate));
        if (!this.twelvehour) {
            return this.prefixWithZero(hour);
        }
        if (hour === 0) {
            return '12';
        }
        else {
            return this.prefixWithZero(hour > 12 ? hour - 12 : hour);
        }
    }
    get minute() {
        if (this.activeDate) {
            return this.prefixWithZero(this._adapter.getMinute(this.activeDate));
        }
        return '00';
    }
    prefixWithZero(value) {
        if (value < 10) {
            return '0' + String(value);
        }
        return String(value);
    }
    constructor(_adapter, _changeDetectorRef, _datetimepickerIntl) {
        this._adapter = _adapter;
        this._changeDetectorRef = _changeDetectorRef;
        this._datetimepickerIntl = _datetimepickerIntl;
        /** Emits when the currently selected date changes. */
        this.selectedChange = new EventEmitter();
        /** Emits when any date changes. */
        this.activeDateChange = new EventEmitter();
        /** Emits when any date is selected. */
        this._userSelection = new EventEmitter();
        /** Emits when AM/PM button are clicked. */
        this.ampmChange = new EventEmitter();
        /** Emits when AM/PM button are clicked. */
        this.clockViewChange = new EventEmitter();
        /** Step over minutes. */
        this.interval = 1;
        /** Input for action buttons. */
        this.actionsPortal = null;
        /** Whether the clock uses 12 hour format. */
        this.twelvehour = false;
        /** Whether the time is now in AM or PM. */
        this.AMPM = 'AM';
        /** Whether the clock is in hour view. */
        this._clockView = 'hour';
        this.datetimepickerIntlChangesSubscription = this._datetimepickerIntl.changes.subscribe(() => {
            this._changeDetectorRef.detectChanges();
        });
    }
    ngOnChanges(changes) {
        // when clockView changes by input we should focus the correct input
        if (changes.clockView) {
            if (changes.clockView.currentValue !== changes.clockView.previousValue) {
                this.focusInputElement();
            }
        }
    }
    ngAfterViewInit() {
        this.focusInputElement();
    }
    ngOnDestroy() {
        if (this.datetimepickerIntlChangesSubscription) {
            this.datetimepickerIntlChangesSubscription.unsubscribe();
        }
    }
    focusInputElement() {
        if (this.clockView === 'hour') {
            if (this.hourInputElement) {
                this.hourInputElement.nativeElement.focus();
            }
        }
        else {
            if (this.minuteInputElement) {
                this.minuteInputElement.nativeElement.focus();
            }
        }
    }
    _handleHourInputChange(value) {
        const hour = coerceNumberProperty(value);
        if (hour || hour === 0) {
            const newValue = this._adapter.createDatetime(this._adapter.getYear(this.activeDate), this._adapter.getMonth(this.activeDate), this._adapter.getDate(this.activeDate), this._updateHourForAmPm(hour), this._adapter.getMinute(this.activeDate));
            this._activeDate = this._adapter.clampDate(newValue, this.minDate, this.maxDate);
            this.activeDateChange.emit(this.activeDate);
            // If previously we did set [mtxValue]="13" and the input changed to 6, and the clamping
            // will make it "13" again then the hourInputDirective will not have been updated
            // since "13" === "13" same reference so no change detected by directly setting it within
            // this handler, we handle this usecase
            if (this.hourInputDirective) {
                this.hourInputDirective.timeValue = this.hour;
            }
        }
    }
    _updateHourForAmPm(value) {
        if (!this.twelvehour) {
            return value;
        }
        // value should be between 1-12
        if (this.AMPM === 'AM') {
            if (value === 0 || value === 12) {
                return 0;
            }
            return value;
        }
        // PM
        else {
            if (value === 0 || value === 12) {
                return 12;
            }
            // other cases, we should add 12 to the value aka 3:00 PM = 3 + 12 = 15:00
            return value + 12;
        }
    }
    _handleMinuteInputChange(value) {
        const minute = coerceNumberProperty(value);
        if (minute || minute === 0) {
            const newValue = this._adapter.createDatetime(this._adapter.getYear(this.activeDate), this._adapter.getMonth(this.activeDate), this._adapter.getDate(this.activeDate), this._adapter.getHour(this.activeDate), minute);
            this._activeDate = this._adapter.clampDate(newValue, this.minDate, this.maxDate);
            this.activeDateChange.emit(this.activeDate);
            // If previously we did set [mtxValue]="40" and the input changed to 30, and the clamping
            // will make it "40" again then the minuteInputDirective will not have been updated
            // since "40" === "40" same reference so no change detected by directly setting it within
            // this handler, we handle this usecase
            if (this.minuteInputDirective) {
                this.minuteInputDirective.timeValue = this.minute;
            }
        }
    }
    _handleFocus(clockView) {
        this.clockView = clockView;
        this.clockViewChange.emit(clockView);
    }
    _timeSelected(date) {
        if (this.clockView === 'hour') {
            this.clockView = 'minute';
        }
        this._activeDate = this.selected = date;
    }
    _onActiveDateChange(date) {
        this._activeDate = date;
        this.activeDateChange.emit(date);
    }
    _handleSelection() {
        if (this.actionsPortal && this._selected) {
            this.selectedChange.emit(this._selected);
        }
    }
    _handleOk() {
        if (this._selected) {
            this.selectedChange.emit(this._selected);
        }
        this._userSelection.emit();
    }
    _handleCancel() {
        this._userSelection.emit();
    }
    /** @nocollapse */ static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.0", ngImport: i0, type: MtxTime, deps: [{ token: i1.DatetimeAdapter }, { token: i0.ChangeDetectorRef }, { token: i2.MtxDatetimepickerIntl }], target: i0.ɵɵFactoryTarget.Component }); }
    /** @nocollapse */ static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.0.0", version: "18.2.0", type: MtxTime, isStandalone: true, selector: "mtx-time", inputs: { dateFilter: "dateFilter", interval: "interval", actionsPortal: "actionsPortal", twelvehour: ["twelvehour", "twelvehour", booleanAttribute], AMPM: "AMPM", activeDate: "activeDate", selected: "selected", minDate: "minDate", maxDate: "maxDate", clockView: "clockView" }, outputs: { selectedChange: "selectedChange", activeDateChange: "activeDateChange", _userSelection: "_userSelection", ampmChange: "ampmChange", clockViewChange: "clockViewChange" }, host: { classAttribute: "mtx-time" }, viewQueries: [{ propertyName: "hourInputElement", first: true, predicate: ["hourInput"], descendants: true, read: (ElementRef) }, { propertyName: "hourInputDirective", first: true, predicate: ["hourInput"], descendants: true, read: MtxTimeInput }, { propertyName: "minuteInputElement", first: true, predicate: ["minuteInput"], descendants: true, read: (ElementRef) }, { propertyName: "minuteInputDirective", first: true, predicate: ["minuteInput"], descendants: true, read: MtxTimeInput }], exportAs: ["mtxTime"], usesOnChanges: true, ngImport: i0, template: "<div class=\"mtx-time-input-wrapper\">\n  <div class=\"mtx-time-input-inner\">\n    <input class=\"mtx-time-input\"\n      [class.mtx-time-input-active]=\"clockView === 'hour'\"\n      [class.mtx-time-input-warning]=\"!hourInput.valid\"\n      #hourInput=\"mtxTimeInput\"\n      type=\"text\"\n      inputmode=\"numeric\"\n      maxlength=\"2\"\n      [timeMin]=\"twelvehour ? 1 : 0\"\n      [timeMax]=\"twelvehour ? 12 : 23\"\n      [timeValue]=\"hour\"\n      (timeValueChanged)=\"_handleHourInputChange($event)\"\n      (focus)=\"_handleFocus('hour')\" />\n\n    <div class=\"mtx-time-seperator\">:</div>\n\n    <input class=\"mtx-time-input\"\n      [class.mtx-time-input-active]=\"clockView === 'minute'\"\n      [class.mtx-time-input-warning]=\"!minuteInput.valid\"\n      #minuteInput=\"mtxTimeInput\"\n      type=\"text\"\n      inputmode=\"numeric\"\n      maxlength=\"2\"\n      [timeMin]=\"0\"\n      [timeMax]=\"59\"\n      [timeValue]=\"minute\"\n      (timeValueChanged)=\"_handleMinuteInputChange($event)\"\n      [timeInterval]=\"interval\"\n      (focus)=\"_handleFocus('minute')\" />\n\n    @if (twelvehour) {\n      <div class=\"mtx-time-ampm\">\n        <button mat-button type=\"button\" class=\"mtx-time-am\"\n          [class.mtx-time-ampm-active]=\"AMPM === 'AM'\" aria-label=\"AM\"\n          (keydown)=\"$event.stopPropagation()\"\n          (click)=\"ampmChange.emit('AM')\">AM</button>\n        <button mat-button type=\"button\" class=\"mtx-time-pm\"\n          [class.mtx-time-ampm-active]=\"AMPM === 'PM'\" aria-label=\"PM\"\n          (keydown)=\"$event.stopPropagation()\"\n          (click)=\"ampmChange.emit('PM')\">PM</button>\n      </div>\n    }\n  </div>\n</div>\n\n<mtx-clock (selectedChange)=\"_timeSelected($event)\"\n  (activeDateChange)=\"_onActiveDateChange($event)\"\n  (_userSelection)=\"_handleSelection()\"\n  [AMPM]=\"AMPM\"\n  [dateFilter]=\"dateFilter\"\n  [actionButtons]=\"!!actionsPortal\"\n  [interval]=\"interval\"\n  [maxDate]=\"maxDate\"\n  [minDate]=\"minDate\"\n  [selected]=\"selected\"\n  [startView]=\"clockView\"\n  [twelvehour]=\"twelvehour\">\n</mtx-clock>\n\n@if (!actionsPortal) {\n  <div class=\"mtx-time-button-wrapper\">\n    <button class=\"mtx-time-cancel-button\" mat-button type=\"button\" (click)=\"_handleCancel()\">\n      {{ _datetimepickerIntl.cancelLabel }}\n    </button>\n    <button class=\"mtx-time-ok-button\" mat-button type=\"button\" (click)=\"_handleOk()\"\n      [disabled]=\"minuteInputDirective?.invalid || hourInputDirective?.invalid\">\n      {{ _datetimepickerIntl.okLabel }}\n    </button>\n  </div>\n}\n", styles: [".mtx-time{display:block;outline:none;-webkit-user-select:none;user-select:none}.mtx-time-input-wrapper{padding:8px 0;text-align:center}.mtx-time-input-inner{display:inline-flex;height:56px}.mtx-time-input{box-sizing:border-box;width:72px;height:100%;padding:0;font-size:36px;text-align:center;border:2px solid transparent;appearance:none;outline:none;border-radius:var(--mtx-datetimepicker-selector-container-shape, var(--mat-app-corner-small));background-color:var(--mtx-datetimepicker-time-input-background-color, var(--mat-app-surface-container-highest));color:var(--mtx-datetimepicker-time-input-text-color, var(--mat-app-on-surface))}.mtx-time-input.mtx-time-input-active{background-color:var(--mtx-datetimepicker-time-input-active-state-background-color, var(--mat-app-primary-container));color:var(--mtx-datetimepicker-time-input-active-state-text-color, var(--mat-app-on-primary-container))}.mtx-time-input.mtx-time-input-active:focus{border-color:var(--mtx-datetimepicker-time-input-focus-state-outline-color, var(--mat-app-primary));background-color:var(--mtx-datetimepicker-time-input-focus-state-background-color, var(--mat-app-primary-container))}.mtx-time-input.mtx-time-input-active:focus::placeholder{color:var(--mtx-datetimepicker-time-input-focus-state-placeholder-text-color, var(--mat-app-on-primary-container))}.mtx-time-input.mtx-time-input-warning{border-color:var(--mtx-datetimepicker-time-input-warn-state-outline-color, var(--mat-app-error))}.mtx-time-seperator{display:inline-flex;justify-content:center;align-items:center;width:24px;font-size:36px}.mtx-time-ampm{display:inline-flex;flex-direction:column;margin-left:12px}[dir=rtl] .mtx-time-ampm{margin-left:auto;margin-right:12px}.mtx-time-ampm .mtx-time-am,.mtx-time-ampm .mtx-time-pm{--mdc-text-button-label-text-weight: 400;flex:1;width:40px;min-width:auto;border-width:1px;border-style:solid;--mdc-text-button-label-text-color: var(--mtx-datetimepicker-time-ampm-text-color, var(--mat-app-on-surface));--mdc-text-button-container-shape: var(--mtx-datetimepicker-selector-container-shape, var(--mat-app-corner-small));border-color:var(--mtx-datetimepicker-time-ampm-outline-color, var(--mat-app-outline))}.mtx-time-ampm .mtx-time-am.mtx-time-ampm-active,.mtx-time-ampm .mtx-time-pm.mtx-time-ampm-active{--mdc-text-button-label-text-weight: 500;--mdc-text-button-label-text-color: var(--mtx-datetimepicker-time-ampm-selected-state-text-color, var(--mat-app-on-tertiary-container));background-color:var(--mtx-datetimepicker-time-ampm-selected-state-background-color, var(--mat-app-tertiary-container))}.mtx-time-ampm .mtx-time-am .mat-mdc-button-touch-target,.mtx-time-ampm .mtx-time-pm .mat-mdc-button-touch-target{height:100%}.mtx-time-ampm .mtx-time-am{border-bottom-left-radius:0;border-bottom-right-radius:0}.mtx-time-ampm .mtx-time-pm{border-top-left-radius:0;border-top-right-radius:0;border-top-width:0}.mtx-time-button-wrapper{display:flex;justify-content:flex-end;padding-top:8px}.mtx-time-button-wrapper .mat-mdc-button-base+.mat-mdc-button-base{margin-left:8px}[dir=rtl] .mtx-time-button-wrapper .mat-mdc-button-base+.mat-mdc-button-base{margin-left:0;margin-right:8px}\n"], dependencies: [{ kind: "component", type: MatButton, selector: "    button[mat-button], button[mat-raised-button], button[mat-flat-button],    button[mat-stroked-button]  ", exportAs: ["matButton"] }, { kind: "component", type: MtxClock, selector: "mtx-clock", inputs: ["dateFilter", "interval", "actionButtons", "twelvehour", "AMPM", "activeDate", "selected", "minDate", "maxDate", "startView"], outputs: ["selectedChange", "activeDateChange", "_userSelection"], exportAs: ["mtxClock"] }, { kind: "directive", type: MtxTimeInput, selector: "input.mtx-time-input", inputs: ["timeInterval", "timeMin", "timeMax", "timeValue"], outputs: ["timeValueChanged"], exportAs: ["mtxTimeInput"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.0", ngImport: i0, type: MtxTime, decorators: [{
            type: Component,
            args: [{ selector: 'mtx-time', exportAs: 'mtxTime', host: {
                        class: 'mtx-time',
                    }, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, standalone: true, imports: [MatButton, MtxClock, MtxTimeInput], template: "<div class=\"mtx-time-input-wrapper\">\n  <div class=\"mtx-time-input-inner\">\n    <input class=\"mtx-time-input\"\n      [class.mtx-time-input-active]=\"clockView === 'hour'\"\n      [class.mtx-time-input-warning]=\"!hourInput.valid\"\n      #hourInput=\"mtxTimeInput\"\n      type=\"text\"\n      inputmode=\"numeric\"\n      maxlength=\"2\"\n      [timeMin]=\"twelvehour ? 1 : 0\"\n      [timeMax]=\"twelvehour ? 12 : 23\"\n      [timeValue]=\"hour\"\n      (timeValueChanged)=\"_handleHourInputChange($event)\"\n      (focus)=\"_handleFocus('hour')\" />\n\n    <div class=\"mtx-time-seperator\">:</div>\n\n    <input class=\"mtx-time-input\"\n      [class.mtx-time-input-active]=\"clockView === 'minute'\"\n      [class.mtx-time-input-warning]=\"!minuteInput.valid\"\n      #minuteInput=\"mtxTimeInput\"\n      type=\"text\"\n      inputmode=\"numeric\"\n      maxlength=\"2\"\n      [timeMin]=\"0\"\n      [timeMax]=\"59\"\n      [timeValue]=\"minute\"\n      (timeValueChanged)=\"_handleMinuteInputChange($event)\"\n      [timeInterval]=\"interval\"\n      (focus)=\"_handleFocus('minute')\" />\n\n    @if (twelvehour) {\n      <div class=\"mtx-time-ampm\">\n        <button mat-button type=\"button\" class=\"mtx-time-am\"\n          [class.mtx-time-ampm-active]=\"AMPM === 'AM'\" aria-label=\"AM\"\n          (keydown)=\"$event.stopPropagation()\"\n          (click)=\"ampmChange.emit('AM')\">AM</button>\n        <button mat-button type=\"button\" class=\"mtx-time-pm\"\n          [class.mtx-time-ampm-active]=\"AMPM === 'PM'\" aria-label=\"PM\"\n          (keydown)=\"$event.stopPropagation()\"\n          (click)=\"ampmChange.emit('PM')\">PM</button>\n      </div>\n    }\n  </div>\n</div>\n\n<mtx-clock (selectedChange)=\"_timeSelected($event)\"\n  (activeDateChange)=\"_onActiveDateChange($event)\"\n  (_userSelection)=\"_handleSelection()\"\n  [AMPM]=\"AMPM\"\n  [dateFilter]=\"dateFilter\"\n  [actionButtons]=\"!!actionsPortal\"\n  [interval]=\"interval\"\n  [maxDate]=\"maxDate\"\n  [minDate]=\"minDate\"\n  [selected]=\"selected\"\n  [startView]=\"clockView\"\n  [twelvehour]=\"twelvehour\">\n</mtx-clock>\n\n@if (!actionsPortal) {\n  <div class=\"mtx-time-button-wrapper\">\n    <button class=\"mtx-time-cancel-button\" mat-button type=\"button\" (click)=\"_handleCancel()\">\n      {{ _datetimepickerIntl.cancelLabel }}\n    </button>\n    <button class=\"mtx-time-ok-button\" mat-button type=\"button\" (click)=\"_handleOk()\"\n      [disabled]=\"minuteInputDirective?.invalid || hourInputDirective?.invalid\">\n      {{ _datetimepickerIntl.okLabel }}\n    </button>\n  </div>\n}\n", styles: [".mtx-time{display:block;outline:none;-webkit-user-select:none;user-select:none}.mtx-time-input-wrapper{padding:8px 0;text-align:center}.mtx-time-input-inner{display:inline-flex;height:56px}.mtx-time-input{box-sizing:border-box;width:72px;height:100%;padding:0;font-size:36px;text-align:center;border:2px solid transparent;appearance:none;outline:none;border-radius:var(--mtx-datetimepicker-selector-container-shape, var(--mat-app-corner-small));background-color:var(--mtx-datetimepicker-time-input-background-color, var(--mat-app-surface-container-highest));color:var(--mtx-datetimepicker-time-input-text-color, var(--mat-app-on-surface))}.mtx-time-input.mtx-time-input-active{background-color:var(--mtx-datetimepicker-time-input-active-state-background-color, var(--mat-app-primary-container));color:var(--mtx-datetimepicker-time-input-active-state-text-color, var(--mat-app-on-primary-container))}.mtx-time-input.mtx-time-input-active:focus{border-color:var(--mtx-datetimepicker-time-input-focus-state-outline-color, var(--mat-app-primary));background-color:var(--mtx-datetimepicker-time-input-focus-state-background-color, var(--mat-app-primary-container))}.mtx-time-input.mtx-time-input-active:focus::placeholder{color:var(--mtx-datetimepicker-time-input-focus-state-placeholder-text-color, var(--mat-app-on-primary-container))}.mtx-time-input.mtx-time-input-warning{border-color:var(--mtx-datetimepicker-time-input-warn-state-outline-color, var(--mat-app-error))}.mtx-time-seperator{display:inline-flex;justify-content:center;align-items:center;width:24px;font-size:36px}.mtx-time-ampm{display:inline-flex;flex-direction:column;margin-left:12px}[dir=rtl] .mtx-time-ampm{margin-left:auto;margin-right:12px}.mtx-time-ampm .mtx-time-am,.mtx-time-ampm .mtx-time-pm{--mdc-text-button-label-text-weight: 400;flex:1;width:40px;min-width:auto;border-width:1px;border-style:solid;--mdc-text-button-label-text-color: var(--mtx-datetimepicker-time-ampm-text-color, var(--mat-app-on-surface));--mdc-text-button-container-shape: var(--mtx-datetimepicker-selector-container-shape, var(--mat-app-corner-small));border-color:var(--mtx-datetimepicker-time-ampm-outline-color, var(--mat-app-outline))}.mtx-time-ampm .mtx-time-am.mtx-time-ampm-active,.mtx-time-ampm .mtx-time-pm.mtx-time-ampm-active{--mdc-text-button-label-text-weight: 500;--mdc-text-button-label-text-color: var(--mtx-datetimepicker-time-ampm-selected-state-text-color, var(--mat-app-on-tertiary-container));background-color:var(--mtx-datetimepicker-time-ampm-selected-state-background-color, var(--mat-app-tertiary-container))}.mtx-time-ampm .mtx-time-am .mat-mdc-button-touch-target,.mtx-time-ampm .mtx-time-pm .mat-mdc-button-touch-target{height:100%}.mtx-time-ampm .mtx-time-am{border-bottom-left-radius:0;border-bottom-right-radius:0}.mtx-time-ampm .mtx-time-pm{border-top-left-radius:0;border-top-right-radius:0;border-top-width:0}.mtx-time-button-wrapper{display:flex;justify-content:flex-end;padding-top:8px}.mtx-time-button-wrapper .mat-mdc-button-base+.mat-mdc-button-base{margin-left:8px}[dir=rtl] .mtx-time-button-wrapper .mat-mdc-button-base+.mat-mdc-button-base{margin-left:0;margin-right:8px}\n"] }]
        }], ctorParameters: () => [{ type: i1.DatetimeAdapter }, { type: i0.ChangeDetectorRef }, { type: i2.MtxDatetimepickerIntl }], propDecorators: { selectedChange: [{
                type: Output
            }], activeDateChange: [{
                type: Output
            }], _userSelection: [{
                type: Output
            }], ampmChange: [{
                type: Output
            }], clockViewChange: [{
                type: Output
            }], dateFilter: [{
                type: Input
            }], interval: [{
                type: Input
            }], actionsPortal: [{
                type: Input
            }], hourInputElement: [{
                type: ViewChild,
                args: ['hourInput', { read: (ElementRef) }]
            }], hourInputDirective: [{
                type: ViewChild,
                args: ['hourInput', { read: MtxTimeInput }]
            }], minuteInputElement: [{
                type: ViewChild,
                args: ['minuteInput', { read: (ElementRef) }]
            }], minuteInputDirective: [{
                type: ViewChild,
                args: ['minuteInput', { read: MtxTimeInput }]
            }], twelvehour: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], AMPM: [{
                type: Input
            }], activeDate: [{
                type: Input
            }], selected: [{
                type: Input
            }], minDate: [{
                type: Input
            }], maxDate: [{
                type: Input
            }], clockView: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,