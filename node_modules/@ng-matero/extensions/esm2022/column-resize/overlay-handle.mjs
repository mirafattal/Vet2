/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { Directive } from '@angular/core';
import { coerceCssPixelValue } from '@angular/cdk/coercion';
import { ESCAPE } from '@angular/cdk/keycodes';
import { fromEvent, Subject, merge } from 'rxjs';
import { distinctUntilChanged, filter, map, mapTo, pairwise, startWith, takeUntil, } from 'rxjs/operators';
import { HEADER_CELL_SELECTOR } from './selectors';
import { closest } from './polyfill';
import * as i0 from "@angular/core";
// TODO: Take another look at using cdk drag drop. IIRC I ran into a couple
// good reasons for not using it but I don't remember what they were at this point.
/**
 * Base class for a component shown over the edge of a resizable column that is responsible
 * for handling column resize mouse events and displaying any visible UI on the column edge.
 */
export class ResizeOverlayHandle {
    constructor() {
        this.destroyed = new Subject();
    }
    ngAfterViewInit() {
        this._listenForMouseEvents();
    }
    ngOnDestroy() {
        this.destroyed.next();
        this.destroyed.complete();
    }
    _listenForMouseEvents() {
        this.ngZone.runOutsideAngular(() => {
            fromEvent(this.elementRef.nativeElement, 'mouseenter')
                .pipe(mapTo(this.resizeRef.origin.nativeElement), takeUntil(this.destroyed))
                .subscribe(cell => this.eventDispatcher.headerCellHovered.next(cell));
            fromEvent(this.elementRef.nativeElement, 'mouseleave')
                .pipe(map(event => event.relatedTarget && closest(event.relatedTarget, HEADER_CELL_SELECTOR)), takeUntil(this.destroyed))
                .subscribe(cell => this.eventDispatcher.headerCellHovered.next(cell));
            fromEvent(this.elementRef.nativeElement, 'mousedown')
                .pipe(takeUntil(this.destroyed))
                .subscribe(mousedownEvent => {
                this._dragStarted(mousedownEvent);
            });
        });
    }
    _dragStarted(mousedownEvent) {
        // Only allow dragging using the left mouse button.
        if (mousedownEvent.button !== 0) {
            return;
        }
        const mouseup = fromEvent(this.document, 'mouseup');
        const mousemove = fromEvent(this.document, 'mousemove');
        const escape = fromEvent(this.document, 'keyup').pipe(filter(event => event.keyCode === ESCAPE));
        const startX = mousedownEvent.screenX;
        const initialSize = this._getOriginWidth();
        let overlayOffset = 0;
        let originOffset = this._getOriginOffset();
        let size = initialSize;
        let overshot = 0;
        this.updateResizeActive(true);
        mouseup.pipe(takeUntil(merge(escape, this.destroyed))).subscribe(({ screenX }) => {
            this.styleScheduler.scheduleEnd(() => {
                this._notifyResizeEnded(size, screenX !== startX);
            });
        });
        escape.pipe(takeUntil(merge(mouseup, this.destroyed))).subscribe(() => {
            this._notifyResizeEnded(initialSize);
        });
        mousemove
            .pipe(map(({ screenX }) => screenX), startWith(startX), distinctUntilChanged(), pairwise(), takeUntil(merge(mouseup, escape, this.destroyed)))
            .subscribe(([prevX, currX]) => {
            let deltaX = currX - prevX;
            // If the mouse moved further than the resize was able to match, limit the
            // movement of the overlay to match the actual size and position of the origin.
            if (overshot !== 0) {
                if ((overshot < 0 && deltaX < 0) || (overshot > 0 && deltaX > 0)) {
                    overshot += deltaX;
                    return;
                }
                else {
                    const remainingOvershot = overshot + deltaX;
                    overshot =
                        overshot > 0 ? Math.max(remainingOvershot, 0) : Math.min(remainingOvershot, 0);
                    deltaX = remainingOvershot - overshot;
                    if (deltaX === 0) {
                        return;
                    }
                }
            }
            let computedNewSize = size + (this._isLtr() ? deltaX : -deltaX);
            computedNewSize = Math.min(Math.max(computedNewSize, this.resizeRef.minWidthPx, 0), this.resizeRef.maxWidthPx);
            this.resizeNotifier.triggerResize.next({
                columnId: this.columnDef.name,
                size: computedNewSize,
                previousSize: size,
                isStickyColumn: this.columnDef.sticky || this.columnDef.stickyEnd,
            });
            this.styleScheduler.scheduleEnd(() => {
                const originNewSize = this._getOriginWidth();
                const originNewOffset = this._getOriginOffset();
                const originOffsetDeltaX = originNewOffset - originOffset;
                const originSizeDeltaX = originNewSize - size;
                size = originNewSize;
                originOffset = originNewOffset;
                overshot += deltaX + (this._isLtr() ? -originSizeDeltaX : originSizeDeltaX);
                overlayOffset += originOffsetDeltaX + (this._isLtr() ? originSizeDeltaX : 0);
                this._updateOverlayOffset(overlayOffset);
            });
        });
    }
    updateResizeActive(active) {
        this.eventDispatcher.overlayHandleActiveForCell.next(active ? this.resizeRef.origin.nativeElement : null);
    }
    _getOriginWidth() {
        return this.resizeRef.origin.nativeElement.offsetWidth;
    }
    _getOriginOffset() {
        return this.resizeRef.origin.nativeElement.offsetLeft;
    }
    _updateOverlayOffset(offset) {
        this.resizeRef.overlayRef.overlayElement.style.transform = `translateX(${coerceCssPixelValue(offset)})`;
    }
    _isLtr() {
        return this.directionality.value === 'ltr';
    }
    _notifyResizeEnded(size, completedSuccessfully = false) {
        this.updateResizeActive(false);
        this.ngZone.run(() => {
            const sizeMessage = { columnId: this.columnDef.name, size };
            if (completedSuccessfully) {
                this.resizeNotifier.resizeCompleted.next(sizeMessage);
            }
            else {
                this.resizeNotifier.resizeCanceled.next(sizeMessage);
            }
        });
    }
    /** @nocollapse */ static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.0", ngImport: i0, type: ResizeOverlayHandle, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    /** @nocollapse */ static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "18.2.0", type: ResizeOverlayHandle, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.0", ngImport: i0, type: ResizeOverlayHandle, decorators: [{
            type: Directive
        }] });
//# sourceMappingURL=data:application/json;base64,